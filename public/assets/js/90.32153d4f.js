(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{437:function(t,s,n){"use strict";n.r(s);var a=n(42),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"共享状态并发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#共享状态并发"}},[t._v("#")]),t._v(" 共享状态并发")]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch16-03-shared-state.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch16-03-shared-state.md"),n("OutboundLink")],1),t._v(" > "),n("br"),t._v("\ncommit ef072458f903775e91ea9e21356154bc57ee31da")])]),t._v(" "),n("p",[t._v("虽然消息传递是一个很好的处理并发的方式，但并不是唯一一个。再一次思考一下 Go 编程语言文档中口号的这一部分：“不要通过共享内存来通讯”（“do not communicate by sharing memory.”）：")]),t._v(" "),n("blockquote",[n("p",[t._v("What would communicating by sharing memory look like? In addition, why would message passing enthusiasts not use it and do the opposite instead?")]),t._v(" "),n("p",[t._v("通过共享内存通讯看起来如何？除此之外，为何消息传递的拥护者并不使用它并反其道而行之呢？")])]),t._v(" "),n("p",[t._v("在某种程度上，任何编程语言中的通道都类似于单所有权，因为一旦将一个值传送到通道中，将无法再使用这个值。共享内存类似于多所有权：多个线程可以同时访问相同的内存位置。第十五章介绍了智能指针如何使得多所有权成为可能，然而这会增加额外的复杂性，因为需要以某种方式管理这些不同的所有者。Rust 的类型系统和所有权规则极大的协助了正确地管理这些所有权。作为一个例子，让我们看看互斥器，一个更为常见的共享内存并发原语。")]),t._v(" "),n("h3",{attrs:{id:"互斥器一次只允许一个线程访问数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#互斥器一次只允许一个线程访问数据"}},[t._v("#")]),t._v(" 互斥器一次只允许一个线程访问数据")]),t._v(" "),n("p",[n("strong",[t._v("互斥器")]),t._v("（"),n("em",[t._v("mutex")]),t._v("）是 "),n("em",[t._v("mutual exclusion")]),t._v(" 的缩写，也就是说，任意时刻，其只允许一个线程访问某些数据。为了访问互斥器中的数据，线程首先需要通过获取互斥器的 "),n("strong",[t._v("锁")]),t._v("（"),n("em",[t._v("lock")]),t._v("）来表明其希望访问数据。锁是一个作为互斥器一部分的数据结构，它记录谁有数据的排他访问权。因此，我们描述互斥器为通过锁系统 "),n("strong",[t._v("保护")]),t._v("（"),n("em",[t._v("guarding")]),t._v("）其数据。")]),t._v(" "),n("p",[t._v("互斥器以难以使用著称，因为你不得不记住：")]),t._v(" "),n("ol",[n("li",[t._v("在使用数据之前尝试获取锁。")]),t._v(" "),n("li",[t._v("处理完被互斥器所保护的数据之后，必须解锁数据，这样其他线程才能够获取锁。")])]),t._v(" "),n("p",[t._v("作为一个现实中互斥器的例子，想象一下在某个会议的一次小组座谈会中，只有一个麦克风。如果一位成员要发言，他必须请求或表示希望使用麦克风。一旦得到了麦克风，他可以畅所欲言，然后将麦克风交给下一位希望讲话的成员。如果一位成员结束发言后忘记将麦克风交还，其他人将无法发言。如果对共享麦克风的管理出现了问题，座谈会将无法如期进行！")]),t._v(" "),n("p",[t._v("正确的管理互斥器异常复杂，这也是许多人之所以热衷于通道的原因。然而，在 Rust 中，得益于类型系统和所有权，我们不会在锁和解锁上出错。")]),t._v(" "),n("h3",{attrs:{id:"mutex-t-的-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutex-t-的-api"}},[t._v("#")]),t._v(" "),n("code",[t._v("Mutex<T>")]),t._v("的 API")]),t._v(" "),n("p",[t._v("作为展示如何使用互斥器的例子，让我们从在单线程上下文使用互斥器开始，如示例 16-12 所示：")]),t._v(" "),n("p",[n("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("num "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"m = {:?}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("span",{staticClass:"caption"},[t._v("示例 16-12: 出于简单的考虑，在一个单线程上下文中探索 "),n("code",[t._v("Mutex<T>")]),t._v(" 的 API")])]),t._v(" "),n("p",[t._v("像很多类型一样，我们使用关联函数 "),n("code",[t._v("new")]),t._v(" 来创建一个 "),n("code",[t._v("Mutex<T>")]),t._v("。使用 "),n("code",[t._v("lock")]),t._v(" 方法获取锁，以访问互斥器中的数据。这个调用会阻塞当前线程，直到我们拥有锁为止。")]),t._v(" "),n("p",[t._v("如果另一个线程拥有锁，并且那个线程 panic 了，则 "),n("code",[t._v("lock")]),t._v(" 调用会失败。在这种情况下，没人能够再获取锁，所以这里选择 "),n("code",[t._v("unwrap")]),t._v(" 并在遇到这种情况时使线程 panic。")]),t._v(" "),n("p",[t._v("一旦获取了锁，就可以将返回值（在这里是"),n("code",[t._v("num")]),t._v("）视为一个其内部数据的可变引用了。类型系统确保了我们在使用 "),n("code",[t._v("m")]),t._v(" 中的值之前获取锁："),n("code",[t._v("Mutex<i32>")]),t._v(" 并不是一个 "),n("code",[t._v("i32")]),t._v("，所以 "),n("strong",[t._v("必须")]),t._v(" 获取锁才能使用这个 "),n("code",[t._v("i32")]),t._v(" 值。我们是不会忘记这么做的，因为反之类型系统不允许访问内部的 "),n("code",[t._v("i32")]),t._v(" 值。")]),t._v(" "),n("p",[t._v("正如你所怀疑的，"),n("code",[t._v("Mutex<T>")]),t._v(" 是一个智能指针。更准确的说，"),n("code",[t._v("lock")]),t._v(" 调用 "),n("strong",[t._v("返回")]),t._v(" 一个叫做 "),n("code",[t._v("MutexGuard")]),t._v(" 的智能指针。这个智能指针实现了 "),n("code",[t._v("Deref")]),t._v(" 来指向其内部数据；其也提供了一个 "),n("code",[t._v("Drop")]),t._v(" 实现当 "),n("code",[t._v("MutexGuard")]),t._v(" 离开作用域时自动释放锁，这正发生于示例 16-12 内部作用域的结尾。为此，我们不会冒忘记释放锁并阻塞互斥器为其它线程所用的风险，因为锁的释放是自动发生的。")]),t._v(" "),n("p",[t._v("丢弃了锁之后，可以打印出互斥器的值，并发现能够将其内部的 "),n("code",[t._v("i32")]),t._v(" 改为 6。")]),t._v(" "),n("h4",{attrs:{id:"在线程间共享-mutex-t"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在线程间共享-mutex-t"}},[t._v("#")]),t._v(" 在线程间共享 "),n("code",[t._v("Mutex<T>")])]),t._v(" "),n("p",[t._v("现在让我们尝试使用 "),n("code",[t._v("Mutex<T>")]),t._v(" 在多个线程间共享值。我们将启动十个线程，并在各个线程中对同一个计数器值加一，这样计数器将从 0 变为 10。示例 16-13 中的例子会出现编译错误，而我们将通过这些错误来学习如何使用 "),n("code",[t._v("Mutex<T>")]),t._v("，以及 Rust 又是如何帮助我们正确使用的。")]),t._v(" "),n("p",[n("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),n("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('use std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Mutex::new(0);\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!("Result: {}", *counter.lock().unwrap());\n}\n')])])]),n("p",[n("span",{staticClass:"caption"},[t._v("示例 16-13: 程序启动了 10 个线程，每个线程都通过 "),n("code",[t._v("Mutex<T>")]),t._v(" 来增加计数器的值")])]),t._v(" "),n("p",[t._v("这里创建了一个 "),n("code",[t._v("counter")]),t._v(" 变量来存放内含 "),n("code",[t._v("i32")]),t._v(" 的 "),n("code",[t._v("Mutex<T>")]),t._v("，类似示例 16-12 那样。接下来遍历 range 创建了 10 个线程。使用了 "),n("code",[t._v("thread::spawn")]),t._v(" 并对所有线程使用了相同的闭包：他们每一个都将调用 "),n("code",[t._v("lock")]),t._v(" 方法来获取 "),n("code",[t._v("Mutex<T>")]),t._v(" 上的锁，接着将互斥器中的值加一。当一个线程结束执行，"),n("code",[t._v("num")]),t._v(" 会离开闭包作用域并释放锁，这样另一个线程就可以获取它了。")]),t._v(" "),n("p",[t._v("在主线程中，我们像示例 16-2 那样收集了所有的 join 句柄，调用它们的 "),n("code",[t._v("join")]),t._v(" 方法来确保所有线程都会结束。这时，主线程会获取锁并打印出程序的结果。")]),t._v(" "),n("p",[t._v("之前提示过这个例子不能编译，让我们看看为什么！")]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("error[E0382]: use of moved value: `counter`\n  --\x3e src/main.rs:9:36\n   |\n9  |         let handle = thread::spawn(move || {\n   |                                    ^^^^^^^ value moved into closure here,\nin previous iteration of loop\n10 |             let mut num = counter.lock().unwrap();\n   |                           ------- use occurs due to use in closure\n   |\n   = note: move occurs because `counter` has type `std::sync::Mutex<i32>`,\nwhich does not implement the `Copy` trait\n")])])]),n("p",[t._v("错误信息表明 "),n("code",[t._v("counter")]),t._v(" 值在上一次循环中被移动了。所以 Rust 告诉我们不能将 "),n("code",[t._v("counter")]),t._v(" 锁的所有权移动到多个线程中。让我们通过一个第十五章讨论过的多所有权手段来修复这个编译错误。")]),t._v(" "),n("h4",{attrs:{id:"多线程和多所有权"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程和多所有权"}},[t._v("#")]),t._v(" 多线程和多所有权")]),t._v(" "),n("p",[t._v("在第十五章中，通过使用智能指针 "),n("code",[t._v("Rc<T>")]),t._v(" 来创建引用计数的值，以便拥有多所有者。让我们在这也这么做看看会发生什么。将示例 16-14 中的 "),n("code",[t._v("Mutex<T>")]),t._v(" 封装进 "),n("code",[t._v("Rc<T>")]),t._v(" 中并在将所有权移入线程之前克隆了 "),n("code",[t._v("Rc<T>")]),t._v("。现在我们理解了所发生的错误，同时也将代码改回使用 "),n("code",[t._v("for")]),t._v(" 循环，并保留闭包的 "),n("code",[t._v("move")]),t._v(" 关键字：")]),t._v(" "),n("p",[n("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),n("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('use std::rc::Rc;\nuse std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Rc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Rc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!("Result: {}", *counter.lock().unwrap());\n}\n')])])]),n("p",[n("span",{staticClass:"caption"},[t._v("示例 16-14: 尝试使用 "),n("code",[t._v("Rc<T>")]),t._v(" 来允许多个线程拥有 "),n("code",[t._v("Mutex<T>")])])]),t._v(" "),n("p",[t._v("再一次编译并...出现了不同的错误！编译器真是教会了我们很多！")]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("error[E0277]: `std::rc::Rc<std::sync::Mutex<i32>>` cannot be sent between threads safely\n  --\x3e src/main.rs:11:22\n   |\n11 |         let handle = thread::spawn(move || {\n   |                      ^^^^^^^^^^^^^ `std::rc::Rc<std::sync::Mutex<i32>>`\ncannot be sent between threads safely\n   |\n   = help: within `[closure@src/main.rs:11:36: 14:10\ncounter:std::rc::Rc<std::sync::Mutex<i32>>]`, the trait `std::marker::Send`\nis not implemented for `std::rc::Rc<std::sync::Mutex<i32>>`\n   = note: required because it appears within the type\n`[closure@src/main.rs:11:36: 14:10 counter:std::rc::Rc<std::sync::Mutex<i32>>]`\n   = note: required by `std::thread::spawn`\n")])])]),n("p",[t._v("哇哦，错误信息太长不看！这里是一些需要注意的重要部分：第一行错误表明 "),n("code",[t._v("`std::rc::Rc<std::sync::Mutex<i32>>` cannot be sent between threads safely")]),t._v("。编译器也告诉了我们原因 "),n("code",[t._v("the trait bound `Send` is not satisfied")]),t._v("。下一部分会讲到 "),n("code",[t._v("Send")]),t._v("：这是确保所使用的类型可以用于并发环境的 trait 之一。")]),t._v(" "),n("p",[t._v("不幸的是，"),n("code",[t._v("Rc<T>")]),t._v(" 并不能安全的在线程间共享。当 "),n("code",[t._v("Rc<T>")]),t._v(" 管理引用计数时，它必须在每一个 "),n("code",[t._v("clone")]),t._v(" 调用时增加计数，并在每一个克隆被丢弃时减少计数。"),n("code",[t._v("Rc<T>")]),t._v(" 并没有使用任何并发原语，来确保改变计数的操作不会被其他线程打断。在计数出错时可能会导致诡异的 bug，比如可能会造成内存泄漏，或在使用结束之前就丢弃一个值。我们所需要的是一个完全类似 "),n("code",[t._v("Rc<T>")]),t._v("，又以一种线程安全的方式改变引用计数的类型。")]),t._v(" "),n("h4",{attrs:{id:"原子引用计数-arc-t"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原子引用计数-arc-t"}},[t._v("#")]),t._v(" 原子引用计数 "),n("code",[t._v("Arc<T>")])]),t._v(" "),n("p",[t._v("所幸 "),n("code",[t._v("Arc<T>")]),t._v(" "),n("strong",[t._v("正是")]),t._v(" 这么一个类似 "),n("code",[t._v("Rc<T>")]),t._v(" 并可以安全的用于并发环境的类型。字母 “a” 代表 "),n("strong",[t._v("原子性")]),t._v("（"),n("em",[t._v("atomic")]),t._v("），所以这是一个"),n("strong",[t._v("原子引用计数")]),t._v("（"),n("em",[t._v("atomically reference counted")]),t._v("）类型。原子性是另一类这里还未涉及到的并发原语：请查看标准库中 "),n("code",[t._v("std::sync::atomic")]),t._v(" 的文档来获取更多细节。其中的要点就是：原子性类型工作起来类似原始类型，不过可以安全的在线程间共享。")]),t._v(" "),n("p",[t._v("你可能会好奇为什么不是所有的原始类型都是原子性的？为什么不是所有标准库中的类型都默认使用 "),n("code",[t._v("Arc<T>")]),t._v(" 实现？原因在于线程安全带有性能惩罚，我们希望只在必要时才为此买单。如果只是在单线程中对值进行操作，原子性提供的保证并无必要，代码可以因此运行的更快。")]),t._v(" "),n("p",[t._v("回到之前的例子："),n("code",[t._v("Arc<T>")]),t._v(" 和 "),n("code",[t._v("Rc<T>")]),t._v(" 有着相同的 API，所以修改程序中的 "),n("code",[t._v("use")]),t._v(" 行和 "),n("code",[t._v("new")]),t._v(" 调用。示例 16-15 中的代码最终可以编译和运行：")]),t._v(" "),n("p",[n("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("sync"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mutex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" handles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("vec!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("counter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" handle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("move")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token closure-params"}},[n("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),n("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("num "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        handles"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" handle "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" handles "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Result: {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("counter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("span",{staticClass:"caption"},[t._v("示例 16-15: 使用 "),n("code",[t._v("Arc<T>")]),t._v(" 包装一个 "),n("code",[t._v("Mutex<T>")]),t._v(" 能够实现在多线程之间共享所有权")])]),t._v(" "),n("p",[t._v("这会打印出：")]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Result: 10\n")])])]),n("p",[t._v("成功了！我们从 0 数到了 10，这可能并不是很显眼，不过一路上我们确实学习了很多关于 "),n("code",[t._v("Mutex<T>")]),t._v(" 和线程安全的内容！这个例子中构建的结构可以用于比增加计数更为复杂的操作。使用这个策略，可将计算分成独立的部分，分散到多个线程中，接着使用 "),n("code",[t._v("Mutex<T>")]),t._v(" 使用各自的结算结果更新最终的结果。")]),t._v(" "),n("h3",{attrs:{id:"refcell-t-rc-t-与-mutex-t-arc-t-的相似性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#refcell-t-rc-t-与-mutex-t-arc-t-的相似性"}},[t._v("#")]),t._v(" "),n("code",[t._v("RefCell<T>")]),t._v("/"),n("code",[t._v("Rc<T>")]),t._v(" 与 "),n("code",[t._v("Mutex<T>")]),t._v("/"),n("code",[t._v("Arc<T>")]),t._v(" 的相似性")]),t._v(" "),n("p",[t._v("你可能注意到了，因为 "),n("code",[t._v("counter")]),t._v(" 是不可变的，不过可以获取其内部值的可变引用；这意味着 "),n("code",[t._v("Mutex<T>")]),t._v(" 提供了内部可变性，就像 "),n("code",[t._v("Cell")]),t._v(" 系列类型那样。正如第十五章中使用 "),n("code",[t._v("RefCell<T>")]),t._v(" 可以改变 "),n("code",[t._v("Rc<T>")]),t._v(" 中的内容那样，同样的可以使用 "),n("code",[t._v("Mutex<T>")]),t._v(" 来改变 "),n("code",[t._v("Arc<T>")]),t._v(" 中的内容。")]),t._v(" "),n("p",[t._v("另一个值得注意的细节是 Rust 不能避免使用 "),n("code",[t._v("Mutex<T>")]),t._v(" 的全部逻辑错误。回忆一下第十五章使用 "),n("code",[t._v("Rc<T>")]),t._v(" 就有造成引用循环的风险，这时两个 "),n("code",[t._v("Rc<T>")]),t._v(" 值相互引用，造成内存泄漏。同理，"),n("code",[t._v("Mutex<T>")]),t._v(" 也有造成 "),n("strong",[t._v("死锁")]),t._v("（"),n("em",[t._v("deadlock")]),t._v("） 的风险。这发生于当一个操作需要锁住两个资源而两个线程各持一个锁，这会造成它们永远相互等待。如果你对这个主题感兴趣，尝试编写一个带有死锁的 Rust 程序，接着研究任何其他语言中使用互斥器的死锁规避策略并尝试在 Rust 中实现他们。标准库中 "),n("code",[t._v("Mutex<T>")]),t._v(" 和 "),n("code",[t._v("MutexGuard")]),t._v(" 的 API 文档会提供有用的信息。")]),t._v(" "),n("p",[t._v("接下来，为了丰富本章的内容，让我们讨论一下 "),n("code",[t._v("Send")]),t._v("和 "),n("code",[t._v("Sync")]),t._v(" trait 以及如何对自定义类型使用他们。")])])}),[],!1,null,null,null);s.default=e.exports}}]);