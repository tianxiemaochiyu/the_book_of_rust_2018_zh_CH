(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{456:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"将单线程-server-变为多线程-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将单线程-server-变为多线程-server"}},[s._v("#")]),s._v(" 将单线程 server 变为多线程 server")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch20-02-multithreaded.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("ch20-02-multithreaded.md"),a("OutboundLink")],1),s._v(" "),a("br"),s._v("\ncommit 120e76a0cc77c9cde52643f847ed777f8f441817")])]),s._v(" "),a("p",[s._v("目前 server 会依次处理每一个请求，意味着它在完成第一个连接的处理之前不会处理第二个连接。如果 server 正接收越来越多的请求，这类串行操作会使性能越来越差。如果一个请求花费很长时间来处理，随后而来的请求则不得不等待这个长请求结束，即便这些新请求可以很快就处理完。我们需要修复这种情况，不过首先让我们实际尝试一下这个问题。")]),s._v(" "),a("h3",{attrs:{id:"在当前-server-实现中模拟慢请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在当前-server-实现中模拟慢请求"}},[s._v("#")]),s._v(" 在当前 server 实现中模拟慢请求")]),s._v(" "),a("p",[s._v("让我们看看一个慢请求如何影响当前 server 实现中的其他请求。示例 20-10 通过模拟慢响应实现了 "),a("em",[s._v("/sleep")]),s._v(" 请求处理，它会使 server 在响应之前休眠五秒。")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Duration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("prelude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TcpStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("handle_connection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TcpStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" buffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#     stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" get "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('b"GET / HTTP/1.1\\r\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sleep "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('b"GET /sleep HTTP/1.1\\r\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("status_line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("starts_with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HTTP/1.1 200 OK\\r\\n\\r\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello.html"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("starts_with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sleep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Duration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from_secs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HTTP/1.1 200 OK\\r\\n\\r\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello.html"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"404.html"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-10: 通过识别 "),a("em",[s._v("/sleep")]),s._v(" 并休眠五秒来模拟慢请求")])]),s._v(" "),a("p",[s._v("这段代码有些凌乱，不过对于模拟的目的来说已经足够。这里创建了第二个请求 "),a("code",[s._v("sleep")]),s._v("，我们会识别其数据。在 "),a("code",[s._v("if")]),s._v(" 块之后增加了一个 "),a("code",[s._v("else if")]),s._v(" 来检查 "),a("em",[s._v("/sleep")]),s._v(" 请求，当接收到这个请求时，在渲染成功 HTML 页面之前会先休眠五秒。")]),s._v(" "),a("p",[s._v("现在就可以真切的看出我们的 server 有多么的原始：真实的库将会以更简洁的方式处理多请求识别问题！")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("cargo run")]),s._v(" 启动 server，并接着打开两个浏览器窗口：一个请求 "),a("em",[s._v("http://127.0.0.1:7878/")]),s._v(" 而另一个请求 "),a("em",[s._v("http://127.0.0.1:7878/sleep")]),s._v(" 。如果像之前一样多次请求 "),a("em",[s._v("/")]),s._v("，会发现响应的比较快速。不过如果请求 "),a("em",[s._v("/sleep")]),s._v(" 之后在请求 "),a("em",[s._v("/")]),s._v("，就会看到 "),a("em",[s._v("/")]),s._v(" 会等待直到 "),a("code",[s._v("sleep")]),s._v(" 休眠完五秒之后才出现。")]),s._v(" "),a("p",[s._v("这里有多种办法来改变我们的 web server 使其避免所有请求都排在慢请求之后；我们将要实现的一个便是线程池。")]),s._v(" "),a("h3",{attrs:{id:"使用线程池改善吞吐量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用线程池改善吞吐量"}},[s._v("#")]),s._v(" 使用线程池改善吞吐量")]),s._v(" "),a("p",[a("strong",[s._v("线程池")]),s._v("（"),a("em",[s._v("thread pool")]),s._v("）是一组预先分配的等待或准备处理任务的线程。当程序收到一个新任务，线程池中的一个线程会被分配任务，这个线程会离开并处理任务。其余的线程则可用于处理在第一个线程处理任务的同时处理其他接收到的任务。当第一个线程处理完任务时，它会返回空闲线程池中等待处理新任务。线程池允许我们并发处理连接，增加 server 的吞吐量。")]),s._v(" "),a("p",[s._v("我们会将池中线程限制为较少的数量，以防拒绝服务（Denial of Service， DoS）攻击；如果程序为每一个接收的请求都新建一个线程，某人向 server 发起千万级的请求时会耗尽服务器的资源并导致所有请求的处理都被终止。")]),s._v(" "),a("p",[s._v("不同于分配无限的线程，线程池中将有固定数量的等待线程。当新进请求时，将请求发送到线程池中做处理。线程池会维护一个接收请求的队列。每一个线程会从队列中取出一个请求，处理请求，接着向对队列索取另一个请求。通过这种设计，则可以并发处理 "),a("code",[s._v("N")]),s._v(" 个请求，其中 "),a("code",[s._v("N")]),s._v(" 为线程数。如果每一个线程都在响应慢请求，之后的请求仍然会阻塞队列，不过相比之前增加了能处理的慢请求的数量。")]),s._v(" "),a("p",[s._v("这个设计仅仅是多种改善 web server 吞吐量的方法之一。其他可供探索的方法有 fork/join 模型和单线程异步 I/O 模型。如果你对这个主题感兴趣，则可以阅读更多关于其他解决方案的内容并尝试用 Rust 实现他们；对于一个像 Rust 这样的底层语言，所有这些方法都是可能的。")]),s._v(" "),a("p",[s._v("在开始之前，让我们讨论一下线程池应用看起来怎样。当尝试设计代码时，首先编写客户端接口确实有助于指导代码设计。以期望的调用方式来构建 API 代码的结构，接着在这个结构之内实现功能，而不是先实现功能再设计公有 API。")]),s._v(" "),a("p",[s._v("类似于第十二章项目中使用的测试驱动开发。这里将要使用编译器驱动开发（compiler-driven development）。我们将编写调用所期望的函数的代码，接着观察编译器错误告诉我们接下来需要修改什么使得代码可以工作。")]),s._v(" "),a("h4",{attrs:{id:"为每一个请求分配线程的代码结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为每一个请求分配线程的代码结构"}},[s._v("#")]),s._v(" 为每一个请求分配线程的代码结构")]),s._v(" "),a("p",[s._v("首先，让我们探索一下为每一个连接都创建一个线程的代码看起来如何。这并不是最终方案，因为正如之前讲到的它会潜在的分配无限的线程，不过这是一个开始。示例 20-11 展示了 "),a("code",[s._v("main")]),s._v(" 的改变，它在 "),a("code",[s._v("for")]),s._v(" 循环中为每一个流分配了一个新线程进行处理：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,no_run extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# use std::thread;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n#\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# fn handle_connection(mut stream: TcpStream) {}\n')])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-11: 为每一个流新建一个线程")])]),s._v(" "),a("p",[s._v("正如第十六章讲到的，"),a("code",[s._v("thread::spawn")]),s._v(" 会创建一个新线程并在其中运行闭包中的代码。如果运行这段代码并在在浏览器中加载 "),a("em",[s._v("/sleep")]),s._v("，接着在另两个浏览器标签页中加载 "),a("em",[s._v("/")]),s._v("，确实会发现 "),a("em",[s._v("/")]),s._v(" 请求不必等待 "),a("em",[s._v("/sleep")]),s._v(" 结束。不过正如之前提到的，这最终会使系统崩溃因为我们无限制的创建新线程。")]),s._v(" "),a("h4",{attrs:{id:"为有限数量的线程创建一个类似的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为有限数量的线程创建一个类似的接口"}},[s._v("#")]),s._v(" 为有限数量的线程创建一个类似的接口")]),s._v(" "),a("p",[s._v("我们期望线程池以类似且熟悉的方式工作，以便从线程切换到线程池并不会对使用该 API 的代码做出较大的修改。示例 20-12 展示我们希望用来替换 "),a("code",[s._v("thread::spawn")]),s._v(" 的 "),a("code",[s._v("ThreadPool")]),s._v(" 结构体的假想接口：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,no_run extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# use std::thread;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# struct ThreadPool;\n# impl ThreadPool {\n#    fn new(size: u32) -> ThreadPool { ThreadPool }\n#    fn execute<F>(&self, f: F)\n#        where F: FnOnce() + Send + \'static {}\n# }\n#\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# fn handle_connection(mut stream: TcpStream) {}\n')])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-12: 假想的 "),a("code",[s._v("ThreadPool")]),s._v(" 接口")])]),s._v(" "),a("p",[s._v("这里使用 "),a("code",[s._v("ThreadPool::new")]),s._v(" 来创建一个新的线程池，它有一个可配置的线程数的参数，在这里是四。这样在 "),a("code",[s._v("for")]),s._v(" 循环中，"),a("code",[s._v("pool.execute")]),s._v(" 有着类似 "),a("code",[s._v("thread::spawn")]),s._v(" 的接口，它获取一个线程池运行于每一个流的闭包。"),a("code",[s._v("pool.execute")]),s._v(" 需要实现为获取闭包并传递给池中的线程运行。这段代码还不能编译，不过通过尝试编译器会指导我们如何修复它。")]),s._v(" "),a("h4",{attrs:{id:"采用编译器驱动构建-threadpool-结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#采用编译器驱动构建-threadpool-结构体"}},[s._v("#")]),s._v(" 采用编译器驱动构建 "),a("code",[s._v("ThreadPool")]),s._v(" 结构体")]),s._v(" "),a("p",[s._v("继续并对示例 20-12 中的 "),a("em",[s._v("src/main.rs")]),s._v(" 做出修改，并利用来自 "),a("code",[s._v("cargo check")]),s._v(" 的编译器错误来驱动开发。下面是我们得到的第一个错误：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve. Use of undeclared type or module `ThreadPool`\n  --\x3e src\\main.rs:10:16\n   |\n10 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^^^^^^ Use of undeclared type or module\n   `ThreadPool`\n\nerror: aborting due to previous error\n")])])]),a("p",[s._v("好的，这告诉我们需要一个 "),a("code",[s._v("ThreadPool")]),s._v(" 类型或模块，所以我们将构建一个。"),a("code",[s._v("ThreadPool")]),s._v(" 的实现会与 web server 的特定工作相独立，所以让我们从 "),a("code",[s._v("hello")]),s._v(" crate 切换到存放 "),a("code",[s._v("ThreadPool")]),s._v(" 实现的新库 crate。这也意味着可以在任何工作中使用这个单独的线程池库，而不仅仅是处理网络请求。")]),s._v(" "),a("p",[s._v("创建 "),a("em",[s._v("src/lib.rs")]),s._v(" 文件，它包含了目前可用的最简单的 "),a("code",[s._v("ThreadPool")]),s._v(" 定义：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("接着创建一个新目录，"),a("em",[s._v("src/bin")]),s._v("，并将二进制 crate 根文件从 "),a("em",[s._v("src/main.rs")]),s._v(" 移动到 "),a("em",[s._v("src/bin/main.rs")]),s._v("。这使得库 crate 成为 "),a("em",[s._v("hello")]),s._v(" 目录的主要 crate；不过仍然可以使用 "),a("code",[s._v("cargo run")]),s._v(" 运行 "),a("em",[s._v("src/bin/main.rs")]),s._v(" 二进制文件。移动了 "),a("em",[s._v("main.rs")]),s._v(" 文件之后，修改 "),a("em",[s._v("src/bin/main.rs")]),s._v(" 文件开头加入如下代码来引入库 crate 并将 "),a("code",[s._v("ThreadPool")]),s._v(" 引入作用域：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/bin/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("use hello::ThreadPool;\n")])])]),a("p",[s._v("这仍然不能工作，再次尝试运行来得到下一个需要解决的错误：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no function or associated item named `new` found for type\n`hello::ThreadPool` in the current scope\n --\x3e src/bin/main.rs:13:16\n   |\n13 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^^^^^^ function or associated item not found in\n   `hello::ThreadPool`\n")])])]),a("p",[s._v("这告诉我们下一步是为 "),a("code",[s._v("ThreadPool")]),s._v(" 创建一个叫做 "),a("code",[s._v("new")]),s._v(" 的关联函数。我们还知道 "),a("code",[s._v("new")]),s._v(" 需要有一个参数可以接受 "),a("code",[s._v("4")]),s._v("，而且 "),a("code",[s._v("new")]),s._v(" 应该返回 "),a("code",[s._v("ThreadPool")]),s._v(" 实例。让我们实现拥有此特征的最小化 "),a("code",[s._v("new")]),s._v(" 函数：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件夹: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("这里选择 "),a("code",[s._v("usize")]),s._v(" 作为 "),a("code",[s._v("size")]),s._v(" 参数的类型，因为我们知道为负的线程数没有意义。我们还知道将使用 4 作为线程集合的元素数量，这也就是使用 "),a("code",[s._v("usize")]),s._v(" 类型的原因，如第三章 "),a("RouterLink",{attrs:{to:"/ch03-02-data-types.html#integer-types"}},[s._v("“整数类型”")]),s._v(" 部分所讲。")],1),s._v(" "),a("p",[s._v("再次编译检查这段代码：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: unused variable: `size`\n --\x3e src/lib.rs:4:16\n  |\n4 |     pub fn new(size: usize) -> ThreadPool {\n  |                ^^^^\n  |\n  = note: #[warn(unused_variables)] on by default\n  = note: to avoid this warning, consider using `_size` instead\n\nerror[E0599]: no method named `execute` found for type `hello::ThreadPool` in the current scope\n  --\x3e src/bin/main.rs:18:14\n   |\n18 |         pool.execute(|| {\n   |              ^^^^^^^\n")])])]),a("p",[s._v("现在有了一个警告和一个错误。暂时先忽略警告，发生错误是因为并没有 "),a("code",[s._v("ThreadPool")]),s._v(" 上的 "),a("code",[s._v("execute")]),s._v(" 方法。回忆 "),a("a",{attrs:{href:"#creating-a-similar-interface-for-a-finite-number-of-threads"}},[s._v("“为有限数量的线程创建一个类似的接口”")]),s._v("  部分我们决定线程池应该有与 "),a("code",[s._v("thread::spawn")]),s._v(" 类似的接口，同时我们将实现 "),a("code",[s._v("execute")]),s._v(" 函数来获取传递的闭包并将其传递给池中的空闲线程执行。")]),s._v(" "),a("p",[s._v("我们会在 "),a("code",[s._v("ThreadPool")]),s._v(" 上定义 "),a("code",[s._v("execute")]),s._v(" 函数来获取一个闭包参数。回忆第十三章的 "),a("RouterLink",{attrs:{to:"/ch13-01-closures.html#storing-closures-using-generic-parameters-and-the-fn-traits"}},[s._v("“使用带有泛型和 "),a("code",[s._v("Fn")]),s._v(" trait 的闭包”")]),s._v(" 部分，闭包作为参数时可以使用三个不同的 trait："),a("code",[s._v("Fn")]),s._v("、"),a("code",[s._v("FnMut")]),s._v(" 和 "),a("code",[s._v("FnOnce")]),s._v("。我们需要决定这里应该使用哪种闭包。最终需要实现的类似于标准库的 "),a("code",[s._v("thread::spawn")]),s._v("，所以我们可以观察 "),a("code",[s._v("thread::spawn")]),s._v(" 的签名在其参数中使用了何种 bound。查看文档会发现：")],1),s._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T + Send + 'static,\n        T: Send + 'static\n")])])]),a("p",[a("code",[s._v("F")]),s._v(" 是这里我们关心的参数；"),a("code",[s._v("T")]),s._v(" 与返回值有关所以我们并不关心。考虑到 "),a("code",[s._v("spawn")]),s._v(" 使用 "),a("code",[s._v("FnOnce")]),s._v(" 作为 "),a("code",[s._v("F")]),s._v(" 的 trait bound，这可能也是我们需要的，因为最终会将传递给 "),a("code",[s._v("execute")]),s._v(" 的参数传给 "),a("code",[s._v("spawn")]),s._v("。因为处理请求的线程只会执行闭包一次，这也进一步确认了 "),a("code",[s._v("FnOnce")]),s._v(" 是我们需要的 trait，这里符合 "),a("code",[s._v("FnOnce")]),s._v(" 中 "),a("code",[s._v("Once")]),s._v(" 的意思。")]),s._v(" "),a("p",[a("code",[s._v("F")]),s._v(" 还有 trait bound "),a("code",[s._v("Send")]),s._v(" 和生命周期绑定 "),a("code",[s._v("'static")]),s._v("，这对我们的情况也是有意义的：需要 "),a("code",[s._v("Send")]),s._v(" 来将闭包从一个线程转移到另一个线程，而 "),a("code",[s._v("'static")]),s._v(" 是因为并不知道线程会执行多久。让我们编写一个使用带有这些 bound 的泛型参数 "),a("code",[s._v("F")]),s._v(" 的 "),a("code",[s._v("ThreadPool")]),s._v(" 的 "),a("code",[s._v("execute")]),s._v(" 方法：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("execute")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FnOnce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Send")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[s._v("'static")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("code",[s._v("FnOnce")]),s._v(" trait 仍然需要之后的 "),a("code",[s._v("()")]),s._v("，因为这里的 "),a("code",[s._v("FnOnce")]),s._v(" 代表一个没有参数也没有返回值的闭包。正如函数的定义，返回值类型可以从签名中省略，不过即便没有参数也需要括号。")]),s._v(" "),a("p",[s._v("这里再一次增加了 "),a("code",[s._v("execute")]),s._v(" 方法的最小化实现：它没有做任何工作，只是尝试让代码能够编译。再次进行检查：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: unused variable: `size`\n --\x3e src/lib.rs:4:16\n  |\n4 |     pub fn new(size: usize) -> ThreadPool {\n  |                ^^^^\n  |\n  = note: #[warn(unused_variables)] on by default\n  = note: to avoid this warning, consider using `_size` instead\n\nwarning: unused variable: `f`\n --\x3e src/lib.rs:8:30\n  |\n8 |     pub fn execute<F>(&self, f: F)\n  |                              ^\n  |\n  = note: to avoid this warning, consider using `_f` instead\n")])])]),a("p",[s._v("现在就只有警告了！这意味着能够编译了！注意如果尝试 "),a("code",[s._v("cargo run")]),s._v(" 运行程序并在浏览器中发起请求，仍会在浏览器中出现在本章开始时那样的错误。这个库实际上还没有调用传递给 "),a("code",[s._v("execute")]),s._v(" 的闭包！")]),s._v(" "),a("blockquote",[a("p",[s._v("一个你可能听说过的关于像 Haskell 和 Rust 这样有严格编译器的语言的说法是 “如果代码能够编译，它就能工作”。这是一个提醒大家的好时机，实际上这并不是普适的。我们的项目可以编译，不过它完全没有做任何工作！如果构建一个真实且功能完整的项目，则需花费大量的时间来开始编写单元测试来检查代码能否编译 "),a("strong",[s._v("并且")]),s._v(" 拥有期望的行为。")])]),s._v(" "),a("h4",{attrs:{id:"在-new-中验证池中线程数量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-new-中验证池中线程数量"}},[s._v("#")]),s._v(" 在 "),a("code",[s._v("new")]),s._v(" 中验证池中线程数量")]),s._v(" "),a("p",[s._v("这里仍然存在警告是因为其并没有对 "),a("code",[s._v("new")]),s._v(" 和 "),a("code",[s._v("execute")]),s._v(" 的参数做任何操作。让我们用期望的行为来实现这些函数。以考虑 "),a("code",[s._v("new")]),s._v(" 作为开始。之前选择使用无符号类型作为 "),a("code",[s._v("size")]),s._v(" 参数的类型，因为线程数为负的线程池没有意义。然而，线程数为零的线程池同样没有意义，不过零是一个完全有效的 "),a("code",[s._v("u32")]),s._v(" 值。让我们增加在返回 "),a("code",[s._v("ThreadPool")]),s._v(" 实例之前检查 "),a("code",[s._v("size")]),s._v(" 是否大于零的代码，并使用 "),a("code",[s._v("assert!")]),s._v(" 宏在得到零时 panic，如示例 20-13 所示：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// 创建线程池。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// 线程池中线程的数量。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// # Panics")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// `new` 函数在 size 为 0 时会 panic。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-13: 实现 "),a("code",[s._v("ThreadPool::new")]),s._v(" 在 "),a("code",[s._v("size")]),s._v(" 为零时 panic")])]),s._v(" "),a("p",[s._v("这里用文档注释为 "),a("code",[s._v("ThreadPool")]),s._v(" 增加了一些文档。注意这里遵循了良好的文档实践并增加了一个部分来提示函数会 panic 的情况，正如第十四章所讨论的。尝试运行 "),a("code",[s._v("cargo doc --open")]),s._v(" 并点击 "),a("code",[s._v("ThreadPool")]),s._v(" 结构体来查看生成的 "),a("code",[s._v("new")]),s._v(" 的文档看起来如何！")]),s._v(" "),a("p",[s._v("相比像这里使用 "),a("code",[s._v("assert!")]),s._v(" 宏，也可以让 "),a("code",[s._v("new")]),s._v(" 像之前 I/O 项目中示例 12-9 中 "),a("code",[s._v("Config::new")]),s._v(" 那样返回一个 "),a("code",[s._v("Result")]),s._v("，不过在这里我们选择创建一个没有任何线程的线程池应该是不可恢复的错误。如果你想做的更好，尝试编写一个采用如下签名的 "),a("code",[s._v("new")]),s._v(" 版本来感受一下两者的区别：")]),s._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pub fn new(size: usize) -> Result<ThreadPool, PoolCreationError> {\n")])])]),a("h4",{attrs:{id:"分配空间以储存线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分配空间以储存线程"}},[s._v("#")]),s._v(" 分配空间以储存线程")]),s._v(" "),a("p",[s._v("现在有了一个有效的线程池线程数，就可以实际创建这些线程并在返回之前将他们储存在 "),a("code",[s._v("ThreadPool")]),s._v(" 结构体中。不过如何 “储存” 一个线程？让我们再看看 "),a("code",[s._v("thread::spawn")]),s._v(" 的签名：")]),s._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T + Send + 'static,\n        T: Send + 'static\n")])])]),a("p",[a("code",[s._v("spawn")]),s._v(" 返回 "),a("code",[s._v("JoinHandle<T>")]),s._v("，其中 "),a("code",[s._v("T")]),s._v(" 是闭包返回的类型。尝试使用 "),a("code",[s._v("JoinHandle")]),s._v(" 来看看会发生什么。在我们的情况中，传递给线程池的闭包会处理连接并不返回任何值，所以 "),a("code",[s._v("T")]),s._v(" 将会是单元类型 "),a("code",[s._v("()")]),s._v("。")]),s._v(" "),a("p",[s._v("示例 20-14 中的代码可以编译，不过实际上还并没有创建任何线程。我们改变了 "),a("code",[s._v("ThreadPool")]),s._v(" 的定义来存放一个 "),a("code",[s._v("thread::JoinHandle<()>")]),s._v(" 的 vector 实例，使用 "),a("code",[s._v("size")]),s._v(" 容量来初始化，并设置一个 "),a("code",[s._v("for")]),s._v(" 循环了来运行创建线程的代码，并返回包含这些线程的 "),a("code",[s._v("ThreadPool")]),s._v(" 实例：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore,not_desired_behavior extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("use std::thread;\n\npub struct ThreadPool {\n    threads: Vec<thread::JoinHandle<()>>,\n}\n\nimpl ThreadPool {\n    // --snip--\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut threads = Vec::with_capacity(size);\n\n        for _ in 0..size {\n            // create some threads and store them in the vector\n        }\n\n        ThreadPool {\n            threads\n        }\n    }\n\n    // --snip--\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-14: 为 "),a("code",[s._v("ThreadPool")]),s._v(" 创建一个 vector 来存放线程")])]),s._v(" "),a("p",[s._v("这里将 "),a("code",[s._v("std::thread")]),s._v(" 引入库 crate 的作用域，因为使用了 "),a("code",[s._v("thread::JoinHandle")]),s._v(" 作为 "),a("code",[s._v("ThreadPool")]),s._v(" 中 vector 元素的类型。")]),s._v(" "),a("p",[s._v("在得到了有效的数量之后，"),a("code",[s._v("ThreadPool")]),s._v(" 新建一个存放 "),a("code",[s._v("size")]),s._v(" 个元素的 vector。本书还未使用过 "),a("code",[s._v("with_capacity")]),s._v("，它与 "),a("code",[s._v("Vec::new")]),s._v(" 做了同样的工作，不过有一个重要的区别：它为 vector 预先分配空间。因为已经知道了 vector 中需要 "),a("code",[s._v("size")]),s._v(" 个元素，预先进行分配比仅仅 "),a("code",[s._v("Vec::new")]),s._v(" 要稍微有效率一些，因为 "),a("code",[s._v("Vec::new")]),s._v(" 随着插入元素而重新改变大小。")]),s._v(" "),a("p",[s._v("如果再次运行 "),a("code",[s._v("cargo check")]),s._v("，会看到一些警告，不过应该可以编译成功。")]),s._v(" "),a("h4",{attrs:{id:"worker-结构体负责从-threadpool-中将代码传递给线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker-结构体负责从-threadpool-中将代码传递给线程"}},[s._v("#")]),s._v(" "),a("code",[s._v("Worker")]),s._v(" 结构体负责从 "),a("code",[s._v("ThreadPool")]),s._v(" 中将代码传递给线程")]),s._v(" "),a("p",[s._v("示例 20-14 的 "),a("code",[s._v("for")]),s._v(" 循环中留下了一个关于创建线程的注释。如何实际创建线程呢？这是一个难题。标准库提供的创建线程的方法，"),a("code",[s._v("thread::spawn")]),s._v("，它期望获取一些一旦创建线程就应该执行的代码。然而，我们希望开始线程并使其等待稍后传递的代码。标准库的线程实现并没有包含这么做的方法；我们必须自己实现。")]),s._v(" "),a("p",[s._v("我们将要实现的行为是创建线程并稍后发送代码，这会在 "),a("code",[s._v("ThreadPool")]),s._v(" 和线程间引入一个新数据类型来管理这种新行为。这个数据结构称为 "),a("code",[s._v("Worker")]),s._v("：这是一个池实现中的常见概念。想象一下在餐馆厨房工作的员工：员工等待来自客户的订单，他们负责接受这些订单并完成它们。")]),s._v(" "),a("p",[s._v("不同于在线程池中储存一个 "),a("code",[s._v("JoinHandle<()>")]),s._v(" 实例的 vector，我们会储存 "),a("code",[s._v("Worker")]),s._v(" 结构体的实例。每一个 "),a("code",[s._v("Worker")]),s._v(" 会储存一个单独的 "),a("code",[s._v("JoinHandle<()>")]),s._v(" 实例。接着会在 "),a("code",[s._v("Worker")]),s._v(" 上实现一个方法，它会获取需要允许代码的闭包并将其发送给已经运行的线程执行。我们还会赋予每一个 worker "),a("code",[s._v("id")]),s._v("，这样就可以在日志和调试中区别线程池中的不同 worker。")]),s._v(" "),a("p",[s._v("首先，让我们做出如此创建 "),a("code",[s._v("ThreadPool")]),s._v(" 时所需的修改。在通过如下方式设置完 "),a("code",[s._v("Worker")]),s._v(" 之后，我们会实现向线程发送闭包的代码：")]),s._v(" "),a("ol",[a("li",[s._v("定义 "),a("code",[s._v("Worker")]),s._v(" 结构体存放 "),a("code",[s._v("id")]),s._v(" 和 "),a("code",[s._v("JoinHandle<()>")])]),s._v(" "),a("li",[s._v("修改 "),a("code",[s._v("ThreadPool")]),s._v(" 存放一个 "),a("code",[s._v("Worker")]),s._v(" 实例的 vector")]),s._v(" "),a("li",[s._v("定义 "),a("code",[s._v("Worker::new")]),s._v(" 函数，它获取一个 "),a("code",[s._v("id")]),s._v(" 数字并返回一个带有 "),a("code",[s._v("id")]),s._v(" 和用空闭包分配的线程的 "),a("code",[s._v("Worker")]),s._v(" 实例")]),s._v(" "),a("li",[s._v("在 "),a("code",[s._v("ThreadPool::new")]),s._v(" 中，使用 "),a("code",[s._v("for")]),s._v(" 循环计数生成 "),a("code",[s._v("id")]),s._v("，使用这个 "),a("code",[s._v("id")]),s._v(" 新建 "),a("code",[s._v("Worker")]),s._v("，并储存进 vector 中")])]),s._v(" "),a("p",[s._v("如果你渴望挑战，在查示例 20-15 中的代码之前尝试自己实现这些修改。")]),s._v(" "),a("p",[s._v("准备好了吗？示例 20-15 就是一个做出了这些修改的例子：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vec")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" workers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("with_capacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("size "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            workers\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JoinHandle")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-15: 修改 "),a("code",[s._v("ThreadPool")]),s._v(" 存放 "),a("code",[s._v("Worker")]),s._v(" 实例而不是直接存放线程")])]),s._v(" "),a("p",[s._v("这里将 "),a("code",[s._v("ThreadPool")]),s._v(" 中字段名从 "),a("code",[s._v("threads")]),s._v(" 改为 "),a("code",[s._v("workers")]),s._v("，因为它现在储存 "),a("code",[s._v("Worker")]),s._v(" 而不是 "),a("code",[s._v("JoinHandle<()>")]),s._v("。使用 "),a("code",[s._v("for")]),s._v(" 循环中的计数作为 "),a("code",[s._v("Worker::new")]),s._v(" 的参数，并将每一个新建的 "),a("code",[s._v("Worker")]),s._v(" 储存在叫做 "),a("code",[s._v("workers")]),s._v(" 的 vector 中。")]),s._v(" "),a("p",[a("code",[s._v("Worker")]),s._v(" 结构体和其 "),a("code",[s._v("new")]),s._v(" 函数是私有的，因为外部代码（比如 "),a("em",[s._v("src/bin/main.rs")]),s._v(" 中的 server）并不需要知道关于 "),a("code",[s._v("ThreadPool")]),s._v(" 中使用 "),a("code",[s._v("Worker")]),s._v(" 结构体的实现细节。"),a("code",[s._v("Worker::new")]),s._v(" 函数使用 "),a("code",[s._v("id")]),s._v(" 参数并储存了使用一个空闭包创建的 "),a("code",[s._v("JoinHandle<()>")]),s._v("。")]),s._v(" "),a("p",[s._v("这段代码能够编译并用指定给 "),a("code",[s._v("ThreadPool::new")]),s._v(" 的参数创建储存了一系列的 "),a("code",[s._v("Worker")]),s._v(" 实例，不过 "),a("strong",[s._v("仍然")]),s._v(" 没有处理 "),a("code",[s._v("execute")]),s._v(" 中得到的闭包。让我们聊聊接下来怎么做。")]),s._v(" "),a("h4",{attrs:{id:"使用通道向线程发送请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用通道向线程发送请求"}},[s._v("#")]),s._v(" 使用通道向线程发送请求")]),s._v(" "),a("p",[s._v("下一个需要解决的问题是传递给 "),a("code",[s._v("thread::spawn")]),s._v(" 的闭包完全没有做任何工作。目前，我们在 "),a("code",[s._v("execute")]),s._v(" 方法中获得期望执行的闭包，不过在创建 "),a("code",[s._v("ThreadPool")]),s._v(" 的过程中创建每一个 "),a("code",[s._v("Worker")]),s._v(" 时需要向 "),a("code",[s._v("thread::spawn")]),s._v(" 传递一个闭包。")]),s._v(" "),a("p",[s._v("我们希望刚创建的 "),a("code",[s._v("Worker")]),s._v(" 结构体能够从 "),a("code",[s._v("ThreadPool")]),s._v(" 的队列中获取需要执行的代码，并发送到线程中执行他们。")]),s._v(" "),a("p",[s._v("在第十六章，我们学习了 "),a("strong",[s._v("通道")]),s._v(" —— 一个沟通两个线程的简单手段 —— 对于这个例子来说则是绝佳的。这里通道将充当任务队列的作用，"),a("code",[s._v("execute")]),s._v(" 将通过 "),a("code",[s._v("ThreadPool")]),s._v(" 向其中线程正在寻找工作的 "),a("code",[s._v("Worker")]),s._v(" 实例发送任务。如下是这个计划：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("ThreadPool")]),s._v(" 会创建一个通道并充当发送端。")]),s._v(" "),a("li",[s._v("每个 "),a("code",[s._v("Worker")]),s._v(" 将会充当通道的接收端。")]),s._v(" "),a("li",[s._v("新建一个 "),a("code",[s._v("Job")]),s._v(" 结构体来存放用于向通道中发送的闭包。")]),s._v(" "),a("li",[a("code",[s._v("execute")]),s._v(" 方法会在通道发送端发出期望执行的任务。")]),s._v(" "),a("li",[s._v("在线程中，"),a("code",[s._v("Worker")]),s._v(" 会遍历通道的接收端并执行任何接收到的任务。")])]),s._v(" "),a("p",[s._v("让我们以在 "),a("code",[s._v("ThreadPool::new")]),s._v(" 中创建通道并让 "),a("code",[s._v("ThreadPool")]),s._v(" 实例充当发送端开始，如示例 20-16 所示。"),a("code",[s._v("Job")]),s._v(" 是将在通道中发出的类型，目前它是一个没有任何内容的结构体：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vec")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sender")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Job")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" receiver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("channel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" workers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("with_capacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("size "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#     thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JoinHandle")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n#         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#             id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#             thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-16: 修改 "),a("code",[s._v("ThreadPool")]),s._v(" 来储存一个发送 "),a("code",[s._v("Job")]),s._v(" 实例的通道发送端")])]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("ThreadPool::new")]),s._v(" 中，新建了一个通道，并接着让线程池在接收端等待。这段代码能够编译，不过仍有警告。")]),s._v(" "),a("p",[s._v("让我们尝试在线程池创建每个 worker 时将通道的接收端传递给他们。须知我们希望在 worker 所分配的线程中使用通道的接收端，所以将在闭包中引用 "),a("code",[s._v("receiver")]),s._v(" 参数。示例 20-17 中展示的代码还不能编译：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("impl ThreadPool {\n    // --snip--\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool {\n            workers,\n            sender,\n        }\n    }\n    // --snip--\n}\n\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-17: 将通道的接收端传递给 worker")])]),s._v(" "),a("p",[s._v("这是一些小而直观的修改：将通道的接收端传递进了 "),a("code",[s._v("Worker::new")]),s._v("，并接着在闭包中使用它。")]),s._v(" "),a("p",[s._v("如果尝试 check 代码，会得到这个错误：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n  --\x3e src/lib.rs:27:42\n   |\n27 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here in\n   previous iteration of loop\n   |\n   = note: move occurs because `receiver` has type\n   `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait\n")])])]),a("p",[s._v("这段代码尝试将 "),a("code",[s._v("receiver")]),s._v(" 传递给多个 "),a("code",[s._v("Worker")]),s._v(" 实例。这是不行的，回忆第十六章：Rust 所提供的通道实现是多 "),a("strong",[s._v("生产者")]),s._v("，单 "),a("strong",[s._v("消费者")]),s._v(" 的。这意味着不能简单的克隆通道的消费端来解决问题。即便可以，那也不是我们希望使用的技术；我们希望通过在所有的 worker 中共享单一 "),a("code",[s._v("receiver")]),s._v("，在线程间分发任务。")]),s._v(" "),a("p",[s._v("另外，从通道队列中取出任务涉及到修改 "),a("code",[s._v("receiver")]),s._v("，所以这些线程需要一个能安全的共享和修改 "),a("code",[s._v("receiver")]),s._v(" 的方式，否则可能导致竞争状态（参考第十六章）。")]),s._v(" "),a("p",[s._v("回忆一下第十六章讨论的线程安全智能指针，为了在多个线程间共享所有权并允许线程修改其值，需要使用 "),a("code",[s._v("Arc<Mutex<T>>")]),s._v("。"),a("code",[s._v("Arc")]),s._v(" 使得多个 worker 拥有接收端，而 "),a("code",[s._v("Mutex")]),s._v(" 则确保一次只有一个 worker 能从接收端得到任务。示例 20-18 展示了所需的修改：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vec")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#     sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sender")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Job")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" receiver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("channel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" receiver "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("receiver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" workers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("with_capacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("size "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("receiver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#     thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JoinHandle")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" receiver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arc")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutex")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Receiver")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Job")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("spawn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token closure-params"}},[a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#            receiver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n#         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#             id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#             thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-18: 使用 "),a("code",[s._v("Arc")]),s._v(" 和 "),a("code",[s._v("Mutex")]),s._v(" 在 worker 间共享通道的接收端")])]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("ThreadPool::new")]),s._v(" 中，将通道的接收端放入一个 "),a("code",[s._v("Arc")]),s._v(" 和一个 "),a("code",[s._v("Mutex")]),s._v(" 中。对于每一个新 worker，克隆 "),a("code",[s._v("Arc")]),s._v(" 来增加引用计数，如此这些 worker 就可以共享接收端的所有权了。")]),s._v(" "),a("p",[s._v("通过这些修改，代码可以编译了！我们做到了！")]),s._v(" "),a("h4",{attrs:{id:"实现-execute-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-execute-方法"}},[s._v("#")]),s._v(" 实现 "),a("code",[s._v("execute")]),s._v(" 方法")]),s._v(" "),a("p",[s._v("最后让我们实现 "),a("code",[s._v("ThreadPool")]),s._v(" 上的 "),a("code",[s._v("execute")]),s._v(" 方法。同时也要修改 "),a("code",[s._v("Job")]),s._v(" 结构体：它将不再是结构体，"),a("code",[s._v("Job")]),s._v(" 将是一个有着 "),a("code",[s._v("execute")]),s._v(" 接收到的闭包类型的 trait 对象的类型别名。第十九章 "),a("RouterLink",{attrs:{to:"/ch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases"}},[s._v("“类型别名用来创建类型同义词”")]),s._v(" 部分提到过，类型别名允许将长的类型变短。观察示例 20-19：")],1),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     workers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vec")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n#     sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sender")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Job")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("mpsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Worker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Job")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("dyn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FnOnce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Send")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[s._v("'static")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("execute")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FnOnce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Send")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[s._v("'static")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" job "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("unwrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// --snip--")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-19: 为存放每一个闭包的 "),a("code",[s._v("Box")]),s._v(" 创建一个 "),a("code",[s._v("Job")]),s._v(" 类型别名，接着在通道中发出任务")])]),s._v(" "),a("p",[s._v("在使用 "),a("code",[s._v("execute")]),s._v(" 得到的闭包新建 "),a("code",[s._v("Job")]),s._v(" 实例之后，将这些任务从通道的发送端发出。这里调用 "),a("code",[s._v("send")]),s._v(" 上的 "),a("code",[s._v("unwrap")]),s._v("，因为发送可能会失败，这可能发生于例如停止了所有线程执行的情况，这意味着接收端停止接收新消息了。不过目前我们无法停止线程执行；只要线程池存在他们就会一直执行。使用 "),a("code",[s._v("unwrap")]),s._v(" 是因为我们知道失败不可能发生，即便编译器不这么认为。")]),s._v(" "),a("p",[s._v("不过到此事情还没有结束！在 worker 中，传递给 "),a("code",[s._v("thread::spawn")]),s._v(" 的闭包仍然还只是 "),a("strong",[s._v("引用")]),s._v(" 了通道的接收端。相反我们需要闭包一直循环，向通道的接收端请求任务，并在得到任务时执行他们。如示例 20-20 对 "),a("code",[s._v("Worker::new")]),s._v(" 做出修改：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            loop {\n                let job = receiver.lock().unwrap().recv().unwrap();\n\n                println!("Worker {} got a job; executing.", id);\n\n                job();\n            }\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n')])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-20: 在 worker 线程中接收并执行任务")])]),s._v(" "),a("p",[s._v("这里，首先在 "),a("code",[s._v("receiver")]),s._v(" 上调用了 "),a("code",[s._v("lock")]),s._v(" 来获取互斥器，接着 "),a("code",[s._v("unwrap")]),s._v(" 在出现任何错误时 panic。如果互斥器处于一种叫做 "),a("strong",[s._v("被污染")]),s._v("（"),a("em",[s._v("poisoned")]),s._v("）的状态时获取锁可能会失败，这可能发生于其他线程在持有锁时 panic 了且没有释放锁。在这种情况下，调用 "),a("code",[s._v("unwrap")]),s._v(" 使其 panic 是正确的行为。请随意将 "),a("code",[s._v("unwrap")]),s._v(" 改为包含有意义错误信息的 "),a("code",[s._v("expect")]),s._v("。")]),s._v(" "),a("p",[s._v("如果锁定了互斥器，接着调用 "),a("code",[s._v("recv")]),s._v(" 从通道中接收 "),a("code",[s._v("Job")]),s._v("。最后的 "),a("code",[s._v("unwrap")]),s._v(" 也绕过了一些错误，这可能发生于持有通道发送端的线程停止的情况，类似于如果接收端关闭时 "),a("code",[s._v("send")]),s._v(" 方法如何返回 "),a("code",[s._v("Err")]),s._v(" 一样。")]),s._v(" "),a("p",[s._v("调用 "),a("code",[s._v("recv")]),s._v(" 会阻塞当前线程，所以如果还没有任务，其会等待直到有可用的任务。"),a("code",[s._v("Mutex<T>")]),s._v(" 确保一次只有一个 "),a("code",[s._v("Worker")]),s._v(" 线程尝试请求任务。")]),s._v(" "),a("p",[s._v("通过这个技巧，线程池处于可以运行的状态了！执行 "),a("code",[s._v("cargo run")]),s._v(" 并发起一些请求：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never used: `workers`\n --\x3e src/lib.rs:7:5\n  |\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(dead_code)] on by default\n\nwarning: field is never used: `id`\n  --\x3e src/lib.rs:61:5\n   |\n61 |     id: usize,\n   |     ^^^^^^^^^\n   |\n   = note: #[warn(dead_code)] on by default\n\nwarning: field is never used: `thread`\n  --\x3e src/lib.rs:62:5\n   |\n62 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(dead_code)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.99 secs\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n")])])]),a("p",[s._v("成功了！现在我们有了一个可以异步执行连接的线程池！它绝不会创建超过四个线程，所以当 server 收到大量请求时系统也不会负担过重。如果请求 "),a("em",[s._v("/sleep")]),s._v("，server 也能够通过另外一个线程处理其他请求。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意如果同时在多个浏览器窗口打开 "),a("em",[s._v("/sleep")]),s._v("，它们可能会彼此间隔地加载 5 秒，因为一些浏览器处于缓存的原因会顺序执行相同请求的多个实例。这些限制并不是由于我们的 web server 造成的。")])]),s._v(" "),a("p",[s._v("在学习了第十八章的 "),a("code",[s._v("while let")]),s._v(" 循环之后，你可能会好奇为何不能如此编写 worker 线程，如示例 20-21 所示：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/lib.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore,not_desired_behavior extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            while let Ok(job) = receiver.lock().unwrap().recv() {\n                println!("Worker {} got a job; executing.", id);\n\n                job();\n            }\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n')])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 20-21: 一个使用 "),a("code",[s._v("while let")]),s._v(" 的 "),a("code",[s._v("Worker::new")]),s._v(" 替代实现")])]),s._v(" "),a("p",[s._v("这段代码可以编译和运行，但是并不会产生所期望的线程行为：一个慢请求仍然会导致其他请求等待执行。其原因有些微妙："),a("code",[s._v("Mutex")]),s._v(" 结构体没有公有 "),a("code",[s._v("unlock")]),s._v(" 方法，因为锁的所有权依赖 "),a("code",[s._v("lock")]),s._v(" 方法返回的 "),a("code",[s._v("LockResult<MutexGuard<T>>")]),s._v(" 中 "),a("code",[s._v("MutexGuard<T>")]),s._v(" 的生命周期。这允许借用检查器在编译时确保绝不会在没有持有锁的情况下访问由 "),a("code",[s._v("Mutex")]),s._v(" 守护的资源，不过如果没有认真的思考 "),a("code",[s._v("MutexGuard<T>")]),s._v(" 的生命周期的话，也可能会导致比预期更久的持有锁。因为 "),a("code",[s._v("while")]),s._v(" 表达式中的值在整个块一直处于作用域中，"),a("code",[s._v("job()")]),s._v(" 调用的过程中其仍然持有锁，这意味着其他 worker 不能接收任务。")]),s._v(" "),a("p",[s._v("相反通过使用 "),a("code",[s._v("loop")]),s._v(" 并在循环块之内而不是之外获取锁和任务，"),a("code",[s._v("lock")]),s._v(" 方法返回的 "),a("code",[s._v("MutexGuard")]),s._v(" 在 "),a("code",[s._v("let job")]),s._v(" 语句结束之后立刻就被丢弃了。这确保了 "),a("code",[s._v("recv")]),s._v(" 调用过程中持有锁，而在 "),a("code",[s._v("job()")]),s._v(" 调用前锁就被释放了，这就允许并发处理多个请求了。")])])}),[],!1,null,null,null);t.default=e.exports}}]);