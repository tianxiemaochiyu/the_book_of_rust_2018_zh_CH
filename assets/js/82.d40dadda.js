(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{430:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"通过-deref-trait-将智能指针当作常规引用处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-deref-trait-将智能指针当作常规引用处理"}},[s._v("#")]),s._v(" 通过 "),a("code",[s._v("Deref")]),s._v(" trait 将智能指针当作常规引用处理")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch15-02-deref.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("ch15-02-deref.md"),a("OutboundLink")],1),s._v(" > "),a("br"),s._v("\ncommit 44f1b71c117b0dcec7805eced0b95405167092f6")])]),s._v(" "),a("p",[s._v("实现 "),a("code",[s._v("Deref")]),s._v(" trait 允许我们重载 "),a("strong",[s._v("解引用运算符")]),s._v("（"),a("em",[s._v("dereference operator")]),s._v("）"),a("code",[s._v("*")]),s._v("（与乘法运算符或通配符相区别）。通过这种方式实现 "),a("code",[s._v("Deref")]),s._v(" trait 的智能指针可以被当作常规引用来对待，可以编写操作引用的代码并用于智能指针。")]),s._v(" "),a("p",[s._v("让我们首先看看解引用运算符如何处理常规引用，接着尝试定义我们自己的类似 "),a("code",[s._v("Box<T>")]),s._v(" 的类型并看看为何解引用运算符不能像引用一样工作。我们会探索如何实现 "),a("code",[s._v("Deref")]),s._v(" trait 使得智能指针以类似引用的方式工作变为可能。最后，我们会讨论 Rust 的 "),a("strong",[s._v("解引用强制多态")]),s._v("（"),a("em",[s._v("deref coercions")]),s._v("）功能以及它是如何处理引用或智能指针的。")]),s._v(" "),a("blockquote",[a("p",[s._v("我们将要构建的 "),a("code",[s._v("MyBox<T>")]),s._v(" 类型与真正的 "),a("code",[s._v("Box<T>")]),s._v(" 有一个很大的区别：我们的版本不会在堆上储存数据。这个例子重点关注 "),a("code",[s._v("Deref")]),s._v("，所以其数据实际存放在何处，相比其类似指针的行为来说不算重要。")])]),s._v(" "),a("h3",{attrs:{id:"通过解引用运算符追踪指针的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过解引用运算符追踪指针的值"}},[s._v("#")]),s._v(" 通过解引用运算符追踪指针的值")]),s._v(" "),a("p",[s._v("常规引用是一个指针类型，一种理解指针的方式是将其看成指向储存在其他某处值的箭头。在示例 15-6 中，创建了一个 "),a("code",[s._v("i32")]),s._v(" 值的引用，接着使用解引用运算符来跟踪所引用的数据：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-6：使用解引用运算符来跟踪 "),a("code",[s._v("i32")]),s._v(" 值的引用")])]),s._v(" "),a("p",[s._v("变量 "),a("code",[s._v("x")]),s._v(" 存放了一个 "),a("code",[s._v("i32")]),s._v(" 值 "),a("code",[s._v("5")]),s._v("。"),a("code",[s._v("y")]),s._v(" 等于 "),a("code",[s._v("x")]),s._v(" 的一个引用。可以断言 "),a("code",[s._v("x")]),s._v(" 等于 "),a("code",[s._v("5")]),s._v("。然而，如果希望对 "),a("code",[s._v("y")]),s._v(" 的值做出断言，必须使用 "),a("code",[s._v("*y")]),s._v(" 来追踪引用所指向的值（也就是 "),a("strong",[s._v("解引用")]),s._v("）。一旦解引用了 "),a("code",[s._v("y")]),s._v("，就可以访问 "),a("code",[s._v("y")]),s._v(" 所指向的整型值并可以与 "),a("code",[s._v("5")]),s._v(" 做比较。")]),s._v(" "),a("p",[s._v("相反如果尝试编写 "),a("code",[s._v("assert_eq!(5, y);")]),s._v("，则会得到如下编译错误：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("error[E0277]: can't compare `{integer}` with `&{integer}`\n --\x3e src/main.rs:6:5\n  |\n6 |     assert_eq!(5, y);\n  |     ^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &{integer}`\n  |\n  = help: the trait `std::cmp::PartialEq<&{integer}>` is not implemented for\n  `{integer}`\n")])])]),a("p",[s._v("不允许比较数字的引用与数字，因为它们是不同的类型。必须使用解引用运算符追踪引用所指向的值。")]),s._v(" "),a("h3",{attrs:{id:"像引用一样使用-box-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#像引用一样使用-box-t"}},[s._v("#")]),s._v(" 像引用一样使用 "),a("code",[s._v("Box<T>")])]),s._v(" "),a("p",[s._v("可以使用 "),a("code",[s._v("Box<T>")]),s._v(" 代替引用来重写示例 15-6 中的代码，解引用运算符也一样能工作，如示例 15-7 所示：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-7：在 "),a("code",[s._v("Box<i32>")]),s._v(" 上使用解引用运算符")])]),s._v(" "),a("p",[s._v("示例 15-7 相比示例 15-6 唯一不同的地方就是将 "),a("code",[s._v("y")]),s._v(" 设置为一个指向 "),a("code",[s._v("x")]),s._v(" 值的 box 实例，而不是指向 "),a("code",[s._v("x")]),s._v(" 值的引用。在最后的断言中，可以使用解引用运算符以 "),a("code",[s._v("y")]),s._v(" 为引用时相同的方式追踪 box 的指针。接下来让我们通过实现自己的 box 类型来探索 "),a("code",[s._v("Box<T>")]),s._v(" 能这么做有何特殊之处。")]),s._v(" "),a("h3",{attrs:{id:"自定义智能指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义智能指针"}},[s._v("#")]),s._v(" 自定义智能指针")]),s._v(" "),a("p",[s._v("为了体会默认情况下智能指针与引用的不同，让我们创建一个类似于标准库提供的 "),a("code",[s._v("Box<T>")]),s._v(" 类型的智能指针。接着学习如何增加使用解引用运算符的功能。")]),s._v(" "),a("p",[s._v("从根本上说，"),a("code",[s._v("Box<T>")]),s._v(" 被定义为包含一个元素的元组结构体，所以示例 15-8 以相同的方式定义了 "),a("code",[s._v("MyBox<T>")]),s._v(" 类型。我们还定义了 "),a("code",[s._v("new")]),s._v(" 函数来对应定义于 "),a("code",[s._v("Box<T>")]),s._v(" 的 "),a("code",[s._v("new")]),s._v(" 函数：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-8：定义 "),a("code",[s._v("MyBox<T>")]),s._v(" 类型")])]),s._v(" "),a("p",[s._v("这里定义了一个结构体 "),a("code",[s._v("MyBox")]),s._v(" 并声明了一个泛型参数 "),a("code",[s._v("T")]),s._v("，因为我们希望其可以存放任何类型的值。"),a("code",[s._v("MyBox")]),s._v(" 是一个包含 "),a("code",[s._v("T")]),s._v(" 类型元素的元组结构体。"),a("code",[s._v("MyBox::new")]),s._v(" 函数获取一个 "),a("code",[s._v("T")]),s._v(" 类型的参数并返回一个存放传入值的 "),a("code",[s._v("MyBox")]),s._v(" 实例。")]),s._v(" "),a("p",[s._v("尝试将示例 15-7 中的代码加入示例 15-8 中并修改 "),a("code",[s._v("main")]),s._v(" 使用我们定义的 "),a("code",[s._v("MyBox<T>")]),s._v(" 类型代替 "),a("code",[s._v("Box<T>")]),s._v("。示例 15-9 中的代码不能编译，因为 Rust 不知道如何解引用 "),a("code",[s._v("MyBox")]),s._v("：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("fn main() {\n    let x = 5;\n    let y = MyBox::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-9：尝试以使用引用和 "),a("code",[s._v("Box<T>")]),s._v(" 相同的方式使用 "),a("code",[s._v("MyBox<T>")])])]),s._v(" "),a("p",[s._v("得到的编译错误是：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("error[E0614]: type `MyBox<{integer}>` cannot be dereferenced\n  --\x3e src/main.rs:14:19\n   |\n14 |     assert_eq!(5, *y);\n   |                   ^^\n")])])]),a("p",[a("code",[s._v("MyBox<T>")]),s._v(" 类型不能解引用，因为我们尚未在该类型实现这个功能。为了启用 "),a("code",[s._v("*")]),s._v(" 运算符的解引用功能，需要实现 "),a("code",[s._v("Deref")]),s._v(" trait。")]),s._v(" "),a("h3",{attrs:{id:"通过实现-deref-trait-将某类型像引用一样处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过实现-deref-trait-将某类型像引用一样处理"}},[s._v("#")]),s._v(" 通过实现 "),a("code",[s._v("Deref")]),s._v(" trait 将某类型像引用一样处理")]),s._v(" "),a("p",[s._v("如第十章所讨论的，为了实现 trait，需要提供 trait 所需的方法实现。"),a("code",[s._v("Deref")]),s._v(" trait，由标准库提供，要求实现名为 "),a("code",[s._v("deref")]),s._v(" 的方法，其借用 "),a("code",[s._v("self")]),s._v(" 并返回一个内部数据的引用。示例 15-10 包含定义于 "),a("code",[s._v("MyBox")]),s._v(" 之上的 "),a("code",[s._v("Deref")]),s._v(" 实现：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deref")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Target")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("deref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-10："),a("code",[s._v("MyBox<T>")]),s._v(" 上的 "),a("code",[s._v("Deref")]),s._v(" 实现")])]),s._v(" "),a("p",[a("code",[s._v("type Target = T;")]),s._v(" 语法定义了用于此 trait 的关联类型。关联类型是一个稍有不同的定义泛型参数的方式，现在还无需过多的担心它；第十九章会详细介绍。")]),s._v(" "),a("p",[a("code",[s._v("deref")]),s._v(" 方法体中写入了 "),a("code",[s._v("&self.0")]),s._v("，这样 "),a("code",[s._v("deref")]),s._v(" 返回了我希望通过 "),a("code",[s._v("*")]),s._v(" 运算符访问的值的引用。示例 15-9 中的 "),a("code",[s._v("main")]),s._v(" 函数中对 "),a("code",[s._v("MyBox<T>")]),s._v(" 值的 "),a("code",[s._v("*")]),s._v(" 调用现在可以编译并能通过断言了！")]),s._v(" "),a("p",[s._v("没有 "),a("code",[s._v("Deref")]),s._v(" trait 的话，编译器只会解引用 "),a("code",[s._v("&")]),s._v(" 引用类型。"),a("code",[s._v("deref")]),s._v(" 方法向编译器提供了获取任何实现了 "),a("code",[s._v("Deref")]),s._v(" trait 的类型的值，并且调用这个类型的 "),a("code",[s._v("deref")]),s._v(" 方法来获取一个它知道如何解引用的 "),a("code",[s._v("&")]),s._v(" 引用的能力。")]),s._v(" "),a("p",[s._v("当我们在示例 15-9 中输入 "),a("code",[s._v("*y")]),s._v(" 时，Rust 事实上在底层运行了如下代码：")]),s._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("*(y.deref())\n")])])]),a("p",[s._v("Rust 将 "),a("code",[s._v("*")]),s._v(" 运算符替换为先调用 "),a("code",[s._v("deref")]),s._v(" 方法再进行普通解引用的操作，如此我们便不用担心是否还需手动调用 "),a("code",[s._v("deref")]),s._v(" 方法了。Rust 的这个特性可以让我们写出行为一致的代码，无论是面对的是常规引用还是实现了 "),a("code",[s._v("Deref")]),s._v(" 的类型。")]),s._v(" "),a("p",[a("code",[s._v("deref")]),s._v(" 方法返回值的引用，以及 "),a("code",[s._v("*(y.deref())")]),s._v(" 括号外边的普通解引用仍为必须的原因在于所有权。如果 "),a("code",[s._v("deref")]),s._v(" 方法直接返回值而不是值的引用，其值（的所有权）将被移出 "),a("code",[s._v("self")]),s._v("。在这里以及大部分使用解引用运算符的情况下我们并不希望获取 "),a("code",[s._v("MyBox<T>")]),s._v(" 内部值的所有权。")]),s._v(" "),a("p",[s._v("注意，每次当我们在代码中使用 "),a("code",[s._v("*")]),s._v(" 时， "),a("code",[s._v("*")]),s._v(" 运算符都被替换成了先调用 "),a("code",[s._v("deref")]),s._v(" 方法再接着使用 "),a("code",[s._v("*")]),s._v(" 解引用的操作，且只会发生一次，不会对 "),a("code",[s._v("*")]),s._v(" 操作符无限递归替换，解引用出上面 "),a("code",[s._v("i32")]),s._v(" 类型的值就停止了，这个值与示例 15-9 中 "),a("code",[s._v("assert_eq!")]),s._v(" 的 "),a("code",[s._v("5")]),s._v(" 相匹配。")]),s._v(" "),a("h3",{attrs:{id:"函数和方法的隐式解引用强制多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数和方法的隐式解引用强制多态"}},[s._v("#")]),s._v(" 函数和方法的隐式解引用强制多态")]),s._v(" "),a("p",[a("strong",[s._v("解引用强制多态")]),s._v("（"),a("em",[s._v("deref coercions")]),s._v("）是 Rust 在函数或方法传参上的一种便利。其将实现了 "),a("code",[s._v("Deref")]),s._v(" 的类型的引用转换为原始类型通过 "),a("code",[s._v("Deref")]),s._v(" 所能够转换的类型的引用。当这种特定类型的引用作为实参传递给和形参类型不同的函数或方法时，解引用强制多态将自动发生。这时会有一系列的 "),a("code",[s._v("deref")]),s._v(" 方法被调用，把我们提供的类型转换成了参数所需的类型。")]),s._v(" "),a("p",[s._v("解引用强制多态的加入使得 Rust 程序员编写函数和方法调用时无需增加过多显式使用 "),a("code",[s._v("&")]),s._v(" 和 "),a("code",[s._v("*")]),s._v(" 的引用和解引用。这个功能也使得我们可以编写更多同时作用于引用或智能指针的代码。")]),s._v(" "),a("p",[s._v("作为展示解引用强制多态的实例，让我们使用示例 15-8 中定义的 "),a("code",[s._v("MyBox<T>")]),s._v("，以及示例 15-10 中增加的 "),a("code",[s._v("Deref")]),s._v(" 实现。示例 15-11 展示了一个有着字符串 slice 参数的函数定义：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, {}!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-11："),a("code",[s._v("hello")]),s._v(" 函数有着 "),a("code",[s._v("&str")]),s._v(" 类型的参数 "),a("code",[s._v("name")])])]),s._v(" "),a("p",[s._v("可以使用字符串 slice 作为参数调用 "),a("code",[s._v("hello")]),s._v(" 函数，比如 "),a("code",[s._v('hello("Rust");')]),s._v("。解引用强制多态使得用 "),a("code",[s._v("MyBox<String>")]),s._v(" 类型值的引用调用 "),a("code",[s._v("hello")]),s._v(" 成为可能，如示例 15-12 所示：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deref")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Target")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("deref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, {}!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Rust"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-12：因为解引用强制多态，使用 "),a("code",[s._v("MyBox<String>")]),s._v(" 的引用调用 "),a("code",[s._v("hello")]),s._v(" 是可行的")])]),s._v(" "),a("p",[s._v("这里使用 "),a("code",[s._v("&m")]),s._v(" 调用 "),a("code",[s._v("hello")]),s._v(" 函数，其为 "),a("code",[s._v("MyBox<String>")]),s._v(" 值的引用。因为示例 15-10 中在 "),a("code",[s._v("MyBox<T>")]),s._v(" 上实现了 "),a("code",[s._v("Deref")]),s._v(" trait，Rust 可以通过 "),a("code",[s._v("deref")]),s._v(" 调用将 "),a("code",[s._v("&MyBox<String>")]),s._v(" 变为 "),a("code",[s._v("&String")]),s._v("。标准库中提供了 "),a("code",[s._v("String")]),s._v(" 上的 "),a("code",[s._v("Deref")]),s._v(" 实现，其会返回字符串 slice，这可以在 "),a("code",[s._v("Deref")]),s._v(" 的 API 文档中看到。Rust 再次调用 "),a("code",[s._v("deref")]),s._v(" 将 "),a("code",[s._v("&String")]),s._v(" 变为 "),a("code",[s._v("&str")]),s._v("，这就符合 "),a("code",[s._v("hello")]),s._v(" 函数的定义了。")]),s._v(" "),a("p",[s._v("如果 Rust 没有实现解引用强制多态，为了使用 "),a("code",[s._v("&MyBox<String>")]),s._v(" 类型的值调用 "),a("code",[s._v("hello")]),s._v("，则不得不编写示例 15-13 中的代码来代替示例 15-12：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[s._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deref")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Target")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#\n#     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("deref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n#     "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, {}!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n#\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Rust"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-13：如果 Rust 没有解引用强制多态则必须编写的代码")])]),s._v(" "),a("p",[a("code",[s._v("(*m)")]),s._v(" 将 "),a("code",[s._v("MyBox<String>")]),s._v(" 解引用为 "),a("code",[s._v("String")]),s._v("。接着 "),a("code",[s._v("&")]),s._v(" 和 "),a("code",[s._v("[..]")]),s._v(" 获取了整个 "),a("code",[s._v("String")]),s._v(" 的字符串 slice 来匹配 "),a("code",[s._v("hello")]),s._v(" 的签名。没有解引用强制多态所有这些符号混在一起将更难以读写和理解。解引用强制多态使得 Rust 自动的帮我们处理这些转换。")]),s._v(" "),a("p",[s._v("当所涉及到的类型定义了 "),a("code",[s._v("Deref")]),s._v(" trait，Rust 会分析这些类型并使用任意多次 "),a("code",[s._v("Deref::deref")]),s._v(" 调用以获得匹配参数的类型。这些解析都发生在编译时，所以利用解引用强制多态并没有运行时惩罚！")]),s._v(" "),a("h3",{attrs:{id:"解引用强制多态如何与可变性交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解引用强制多态如何与可变性交互"}},[s._v("#")]),s._v(" 解引用强制多态如何与可变性交互")]),s._v(" "),a("p",[s._v("类似于如何使用 "),a("code",[s._v("Deref")]),s._v(" trait 重载不可变引用的 "),a("code",[s._v("*")]),s._v(" 运算符，Rust 提供了 "),a("code",[s._v("DerefMut")]),s._v(" trait 用于重载可变引用的 "),a("code",[s._v("*")]),s._v(" 运算符。")]),s._v(" "),a("p",[s._v("Rust 在发现类型和 trait 实现满足三种情况时会进行解引用强制多态：")]),s._v(" "),a("ul",[a("li",[s._v("当 "),a("code",[s._v("T: Deref<Target=U>")]),s._v(" 时从 "),a("code",[s._v("&T")]),s._v(" 到 "),a("code",[s._v("&U")]),s._v("。")]),s._v(" "),a("li",[s._v("当 "),a("code",[s._v("T: DerefMut<Target=U>")]),s._v(" 时从 "),a("code",[s._v("&mut T")]),s._v(" 到 "),a("code",[s._v("&mut U")]),s._v("。")]),s._v(" "),a("li",[s._v("当 "),a("code",[s._v("T: Deref<Target=U>")]),s._v(" 时从 "),a("code",[s._v("&mut T")]),s._v(" 到 "),a("code",[s._v("&U")]),s._v("。")])]),s._v(" "),a("p",[s._v("头两个情况除了可变性之外是相同的：第一种情况表明如果有一个 "),a("code",[s._v("&T")]),s._v("，而 "),a("code",[s._v("T")]),s._v(" 实现了返回 "),a("code",[s._v("U")]),s._v(" 类型的 "),a("code",[s._v("Deref")]),s._v("，则可以直接得到 "),a("code",[s._v("&U")]),s._v("。第二种情况表明对于可变引用也有着相同的行为。")]),s._v(" "),a("p",[s._v("第三个情况有些微妙：Rust 也会将可变引用强转为不可变引用。但是反之是 "),a("strong",[s._v("不可能")]),s._v(" 的：不可变引用永远也不能强转为可变引用。因为根据借用规则，如果有一个可变引用，其必须是这些数据的唯一引用（否则程序将无法编译）。将一个可变引用转换为不可变引用永远也不会打破借用规则。将不可变引用转换为可变引用则需要数据只能有一个不可变引用，而借用规则无法保证这一点。因此，Rust 无法假设将不可变引用转换为可变引用是可能的。")])])}),[],!1,null,null,null);t.default=e.exports}}]);