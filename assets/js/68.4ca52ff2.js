(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{417:function(t,e,a){"use strict";a.r(e);var r=a(42),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"将错误信息输出到标准错误而不是标准输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将错误信息输出到标准错误而不是标准输出"}},[t._v("#")]),t._v(" 将错误信息输出到标准错误而不是标准输出")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch12-06-writing-to-stderr-instead-of-stdout.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch12-06-writing-to-stderr-instead-of-stdout.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),a("p",[t._v("目前为止，我们将所有的输出都 "),a("code",[t._v("println!")]),t._v(" 到了终端。大部分终端都提供了两种输出："),a("strong",[t._v("标准输出")]),t._v("（"),a("em",[t._v("standard output")]),t._v("，"),a("code",[t._v("stdout")]),t._v("）对应一般信息，"),a("strong",[t._v("标准错误")]),t._v("（"),a("em",[t._v("standard error")]),t._v("，"),a("code",[t._v("stderr")]),t._v("）则用于错误信息。这种区别允许用户选择将程序正常输出定向到一个文件中并仍将错误信息打印到屏幕上。")]),t._v(" "),a("p",[t._v("但是 "),a("code",[t._v("println!")]),t._v(" 函数只能够打印到标准输出，所以我们必需使用其他方法来打印到标准错误。")]),t._v(" "),a("h3",{attrs:{id:"检查错误应该写入何处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查错误应该写入何处"}},[t._v("#")]),t._v(" 检查错误应该写入何处")]),t._v(" "),a("p",[t._v("首先，让我们观察一下目前 "),a("code",[t._v("minigrep")]),t._v(" 打印的所有内容是如何被写入标准输出的，包括那些应该被写入标准错误的错误信息。可以通过将标准输出流重定向到一个文件同时有意产生一个错误来做到这一点。我们没有重定向标准错误流，所以任何发送到标准错误的内容将会继续显示在屏幕上。")]),t._v(" "),a("p",[t._v("命令行程序被期望将错误信息发送到标准错误流，这样即便选择将标准输出流重定向到文件中时仍然能看到错误信息。目前我们的程序并不符合期望；相反我们将看到它将错误信息输出保存到了文件中。")]),t._v(" "),a("p",[t._v("我们通过 "),a("code",[t._v(">")]),t._v(" 和文件名 "),a("em",[t._v("output.txt")]),t._v(" 来运行程序，我们期望重定向标准输出流到该文件中。在这里，我们没有传递任何参数，所以会产生一个错误：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run > output.txt\n")])])]),a("p",[a("code",[t._v(">")]),t._v(" 语法告诉 shell 将标准输出的内容写入到 "),a("em",[t._v("output.txt")]),t._v(" 文件中而不是屏幕上。我们并没有看到期望的错误信息打印到屏幕上，所以这意味着它一定被写入了文件中。如下是 "),a("em",[t._v("output.txt")]),t._v(" 所包含的：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Problem parsing arguments: not enough arguments\n")])])]),a("p",[t._v("是的，错误信息被打印到了标准输出中。像这样的错误信息被打印到标准错误中将会有用得多，将使得只有成功运行所产生的输出才会写入文件。我们接下来就修改。")]),t._v(" "),a("h3",{attrs:{id:"将错误打印到标准错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将错误打印到标准错误"}},[t._v("#")]),t._v(" 将错误打印到标准错误")]),t._v(" "),a("p",[t._v("让我们如示例 12-24 所示的代码改变错误信息是如何被打印的。得益于本章早些时候的重构，所有打印错误信息的代码都位于 "),a("code",[t._v("main")]),t._v(" 一个函数中。标准库提供了 "),a("code",[t._v("eprintln!")]),t._v(" 宏来打印到标准错误流，所以将两个调用 "),a("code",[t._v("println!")]),t._v(" 打印错误信息的位置替换为 "),a("code",[t._v("eprintln!")]),t._v("：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('fn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args).unwrap_or_else(|err| {\n        eprintln!("Problem parsing arguments: {}", err);\n        process::exit(1);\n    });\n\n    if let Err(e) = minigrep::run(config) {\n        eprintln!("Application error: {}", e);\n\n        process::exit(1);\n    }\n}\n')])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 12-24：使用 "),a("code",[t._v("eprintln!")]),t._v(" 将错误信息写入标准错误而不是标准输出")])]),t._v(" "),a("p",[t._v("将 "),a("code",[t._v("println!")]),t._v(" 改为 "),a("code",[t._v("eprintln!")]),t._v(" 之后，让我们再次尝试用同样的方式运行程序，不使用任何参数并通过 "),a("code",[t._v(">")]),t._v(" 重定向标准输出：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run > output.txt\nProblem parsing arguments: not enough arguments\n")])])]),a("p",[t._v("现在我们看到了屏幕上的错误信息，同时 "),a("em",[t._v("output.txt")]),t._v(" 里什么也没有，这正是命令行程序所期望的行为。")]),t._v(" "),a("p",[t._v("如果使用不会造成错误的参数再次运行程序，不过仍然将标准输出重定向到一个文件，像这样：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run to poem.txt > output.txt\n")])])]),a("p",[t._v("我们并不会在终端看到任何输出，同时 "),a("code",[t._v("output.txt")]),t._v(" 将会包含其结果：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: output.txt")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Are you nobody, too?\nHow dreary to be somebody!\n")])])]),a("p",[t._v("这一部分展示了现在我们适当的使用了成功时产生的标准输出和错误时产生的标准错误。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("在这一章中，我们回顾了目前为止的一些主要章节并涉及了如何在 Rust 环境中进行常规的 I/O 操作。通过使用命令行参数、文件、环境变量和打印错误的 "),a("code",[t._v("eprintln!")]),t._v(" 宏，现在你已经准备好编写命令行程序了。通过结合前几章的知识，你的代码将会是组织良好的，并能有效的将数据存储到合适的数据结构中、更好的处理错误，并且还是经过良好测试的。")]),t._v(" "),a("p",[t._v("接下来，让我们探索一些 Rust 中受函数式编程语言影响的功能：闭包和迭代器。")])])}),[],!1,null,null,null);e.default=s.exports}}]);