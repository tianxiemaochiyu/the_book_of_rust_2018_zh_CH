(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{458:function(e,s,a){"use strict";a.r(s);var t=a(42),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"设计线程池接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计线程池接口"}},[e._v("#")]),e._v(" 设计线程池接口")]),e._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch20-03-designing-the-interface.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ch20-03-designing-the-interface.md"),a("OutboundLink")],1),e._v(" "),a("br"),e._v("\ncommit d06a6a181fd61704cbf7feb55bc61d518c6469f9")])]),e._v(" "),a("p",[e._v("让我们讨论一下线程池看起来怎样。库作者们经常会发现，当尝试设计一些代码时，首先编写客户端接口确实有助于指导代码设计。以期望的调用方式来构建 API 代码的结构，接着在这个结构之内实现功能，而不是先实现功能再设计公有 API。")]),e._v(" "),a("p",[e._v("类似于第十二章项目中使用的测试驱动开发。这里将要使用编译器驱动开发（Compiler Driven Development）。我们将编写调用所期望的函数的代码，接着依靠编译器告诉我们接下来需要修改什么。编译器错误信息会指导我们的实现。")]),e._v(" "),a("h3",{attrs:{id:"如果使用-thread-spawn-的代码结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果使用-thread-spawn-的代码结构"}},[e._v("#")]),e._v(" 如果使用 "),a("code",[e._v("thread::spawn")]),e._v(" 的代码结构")]),e._v(" "),a("p",[e._v("首先，让我们探索一下为每一个连接都创建一个线程看起来如何。这并不是最终方案，因为正如之前讲到的它会潜在的分配无限的线程，不过这是一个开始。列表 20-11 展示了 "),a("code",[e._v("main")]),e._v(" 的改变，它在 "),a("code",[e._v("for")]),e._v(" 循环中为每一个流分配了一个新线程进行处理：")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("Filename: src/main.rs")])]),e._v(" "),a("div",{staticClass:"language-rust,no_run extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# use std::thread;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n#\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:8080").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# fn handle_connection(mut stream: TcpStream) {}\n')])])]),a("p",[a("span",{staticClass:"caption"},[e._v("列表 20-11：为每一个流新建一个线程")])]),e._v(" "),a("p",[e._v("正如第十六章讲到的，"),a("code",[e._v("thread::spawn")]),e._v(" 会创建一个新线程并运行闭包中的代码。如果运行这段代码并在两个浏览器标签页中加载 "),a("code",[e._v("/sleep")]),e._v(" 和 "),a("code",[e._v("/")]),e._v("，确实会发现 "),a("code",[e._v("/")]),e._v(" 请求并没有等待 "),a("code",[e._v("/sleep")]),e._v(" 结束。不过正如之前提到的，这最终会使系统崩溃因为我们无限制的创建新线程。")]),e._v(" "),a("h3",{attrs:{id:"为-threadpool-创建一个类似的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为-threadpool-创建一个类似的接口"}},[e._v("#")]),e._v(" 为 "),a("code",[e._v("ThreadPool")]),e._v(" 创建一个类似的接口")]),e._v(" "),a("p",[e._v("我们期望线程池以类似且熟悉的方式工作，以便从线程切换到线程池并不会对运行于线程池中的代码做出较大的修改。列表 20-12 展示我们希望用来替换 "),a("code",[e._v("thread::spawn")]),e._v(" 的 "),a("code",[e._v("ThreadPool")]),e._v(" 结构体的假想接口：")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/main.rs")])]),e._v(" "),a("div",{staticClass:"language-rust,no_run extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# use std::thread;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# struct ThreadPool;\n# impl ThreadPool {\n#    fn new(size: u32) -> ThreadPool { ThreadPool }\n#    fn execute<F>(&self, f: F)\n#        where F: FnOnce() + Send + \'static {}\n# }\n#\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:8080").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# fn handle_connection(mut stream: TcpStream) {}\n')])])]),a("p",[a("span",{staticClass:"caption"},[e._v("列表 20-12：如何使用我们将要实现的 "),a("code",[e._v("ThreadPool")])])]),e._v(" "),a("p",[e._v("这里使用 "),a("code",[e._v("ThreadPool::new")]),e._v(" 来创建一个新的线程池，它有一个可配置的线程数的参数，在这里是四。这样在 "),a("code",[e._v("for")]),e._v(" 循环中，"),a("code",[e._v("pool.execute")]),e._v(" 将会以类似 "),a("code",[e._v("thread::spawn")]),e._v(" 的方式工作。")]),e._v(" "),a("h3",{attrs:{id:"采用编译器驱动开发来驱动-api-的编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#采用编译器驱动开发来驱动-api-的编译"}},[e._v("#")]),e._v(" 采用编译器驱动开发来驱动 API 的编译")]),e._v(" "),a("p",[e._v("继续并对列表 20-12 中的 "),a("em",[e._v("src/main.rs")]),e._v(" 做出修改，并利用编译器错误来驱动开发。下面是我们得到的第一个错误：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve. Use of undeclared type or module `ThreadPool`\n  --\x3e src\\main.rs:10:16\n   |\n10 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^^^^^^ Use of undeclared type or module\n   `ThreadPool`\n\nerror: aborting due to previous error\n")])])]),a("p",[e._v("好的，我们需要一个 "),a("code",[e._v("ThreadPool")]),e._v("。将 "),a("code",[e._v("hello")]),e._v(" crate 从二进制 crate 转换为库 crate 来存放 "),a("code",[e._v("ThreadPool")]),e._v(" 实现，因为线程池实现与我们的 web server 的特定工作相独立。一旦写完了线程池库，就可以在任何工作中使用这个功能，而不仅仅是处理网络请求。")]),e._v(" "),a("p",[e._v("创建 "),a("em",[e._v("src/lib.rs")]),e._v(" 文件，它包含了目前可用的最简单的 "),a("code",[e._v("ThreadPool")]),e._v(" 定义：")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/lib.rs")])]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("struct")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[e._v("ThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("接着创建一个新目录，"),a("em",[e._v("src/bin")]),e._v("，并将二进制 crate 根文件从 "),a("em",[e._v("src/main.rs")]),e._v(" 移动到 "),a("em",[e._v("src/bin/main.rs")]),e._v("。这使得库 crate 成为 "),a("em",[e._v("hello")]),e._v(" 目录的主要 crate；不过仍然可以使用 "),a("code",[e._v("cargo run")]),e._v(" 运行 "),a("em",[e._v("src/bin/main.rs")]),e._v(" 二进制文件。移动了 "),a("em",[e._v("main.rs")]),e._v(" 文件之后，修改文件开头加入如下代码来引入库 crate 并将 "),a("code",[e._v("ThreadPool")]),e._v(" 引入作用域：")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/bin/main.rs")])]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("extern crate hello;\nuse hello::ThreadPool;\n")])])]),a("p",[e._v("再次尝试运行来得到下一个需要解决的错误：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror: no associated item named `new` found for type `hello::ThreadPool` in the\ncurrent scope\n  --\x3e src\\main.rs:13:16\n   |\n13 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^^^^^^\n   |\n")])])]),a("p",[e._v("好的，下一步是为 "),a("code",[e._v("ThreadPool")]),e._v(" 创建一个叫做 "),a("code",[e._v("new")]),e._v(" 的关联函数。我们还知道 "),a("code",[e._v("new")]),e._v(" 需要有一个参数可以接受 "),a("code",[e._v("4")]),e._v("，而且 "),a("code",[e._v("new")]),e._v(" 应该返回 "),a("code",[e._v("ThreadPool")]),e._v(" 实例。让我们实现拥有此特征的最小化 "),a("code",[e._v("new")]),e._v(" 函数：")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件夹: src/lib.rs")])]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("struct")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[e._v("ThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("impl")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadPool")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fn")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[e._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("u32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("->")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadPool")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadPool")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("这里的 "),a("code",[e._v("size")]),e._v(" 参数是 "),a("code",[e._v("u32")]),e._v(" 类型，因为我们知道为负的线程数没有意义。"),a("code",[e._v("u32")]),e._v(" 是一个很好的默认值。一旦真正实现了 "),a("code",[e._v("new")]),e._v("，我们将考虑实现需要选择什么类型，目前我们仅仅处理编译器错误。")]),e._v(" "),a("p",[e._v("再次编译检查这段代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: unused variable: `size`, #[warn(unused_variables)] on by default\n --\x3e src/lib.rs:4:16\n  |\n4 |     pub fn new(size: u32) -> ThreadPool {\n  |                ^^^^\n\nerror: no method named `execute` found for type `hello::ThreadPool` in the\ncurrent scope\n  --\x3e src/main.rs:18:14\n   |\n18 |         pool.execute(|| {\n   |              ^^^^^^^\n")])])]),a("p",[e._v("好的，一个警告和一个错误。暂时先忽略警告，错误是因为并没有 "),a("code",[e._v("ThreadPool")]),e._v(" 上的 "),a("code",[e._v("execute")]),e._v(" 方法。让我们来定义一个，它应该能接受一个闭包。如果你还记得第十三章，闭包作为参数时可以使用三个不同的 trait："),a("code",[e._v("Fn")]),e._v("、"),a("code",[e._v("FnMut")]),e._v(" 和 "),a("code",[e._v("FnOnce")]),e._v("。那么应该用哪一种闭包呢？好吧，最终需要实现的类似于 "),a("code",[e._v("thread::spawn")]),e._v("；"),a("code",[e._v("thread::spawn")]),e._v(" 的签名在其参数中使用了何种 bound 呢？查看文档会发现：")]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fn")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[e._v("spawn")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("->")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("JoinHandle")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("where")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("FnOnce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("->")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("T")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Send")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[e._v("'static")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Send")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[e._v("'static")]),e._v("\n")])])]),a("p",[a("code",[e._v("F")]),e._v(" 是这里我们关心的参数；"),a("code",[e._v("T")]),e._v(" 与返回值有关所以我们并不关心。考虑到 "),a("code",[e._v("spawn")]),e._v(" 使用 "),a("code",[e._v("FnOnce")]),e._v(" 作为 "),a("code",[e._v("F")]),e._v(" 的 trait bound，这可能也是我们需要的，因为最终会将传递给 "),a("code",[e._v("execute")]),e._v(" 的参数传给 "),a("code",[e._v("spawn")]),e._v("。因为处理请求的线程只会执行闭包一次，这也进一步确认了 "),a("code",[e._v("FnOnce")]),e._v(" 是我们需要的 trait。")]),e._v(" "),a("p",[a("code",[e._v("F")]),e._v(" 还有 trait bound "),a("code",[e._v("Send")]),e._v(" 和生命周期绑定 "),a("code",[e._v("'static")]),e._v("，这对我们的情况也是有意义的：需要 "),a("code",[e._v("Send")]),e._v(" 来将闭包从一个线程转移到另一个线程，而 "),a("code",[e._v("'static")]),e._v(" 是因为并不知道线程会执行多久。让我们编写一个使用这些 bound 的泛型参数 "),a("code",[e._v("F")]),e._v(" 的 "),a("code",[e._v("ThreadPool")]),e._v(" 的 "),a("code",[e._v("execute")]),e._v(" 方法：")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/lib.rs")])]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[e._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("struct")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[e._v("ThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("impl")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadPool")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...snip...")]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fn")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[e._v("execute")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("F")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("where")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("FnOnce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Send")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[e._v("'static")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[a("code",[e._v("FnOnce")]),e._v(" trait 仍然需要之后的 "),a("code",[e._v("()")]),e._v("，因为这里的 "),a("code",[e._v("FnOnce")]),e._v(" 代表一个没有参数也没有返回值的闭包。正如函数的定义，返回值类型可以从签名中省略，不过即便没有参数也需要括号。")]),e._v(" "),a("p",[e._v("因为我们仍在努力使接口能够编译，这里增加了 "),a("code",[e._v("execute")]),e._v(" 方法的最小化实现，它没有做任何工作。再次进行检查：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: unused variable: `size`, #[warn(unused_variables)] on by default\n --\x3e src/lib.rs:4:16\n  |\n4 |     pub fn new(size: u32) -> ThreadPool {\n  |                ^^^^\n\nwarning: unused variable: `f`, #[warn(unused_variables)] on by default\n --\x3e src/lib.rs:8:30\n  |\n8 |     pub fn execute<F>(&self, f: F)\n  |                              ^\n")])])]),a("p",[e._v("现在就只有警告了！能够编译了！注意如果尝试 "),a("code",[e._v("cargo run")]),e._v(" 运行程序并在浏览器中发起请求，仍会在浏览器中出现在本章开始时那样的错误。这个库实际上还没有调用传递给 "),a("code",[e._v("execute")]),e._v(" 的闭包！")]),e._v(" "),a("blockquote",[a("p",[e._v("一个你可能听说过的关于像 Haskell 和 Rust 这样有严格编译器的语言的说法是“如果代码能够编译，它就能工作”。这是一个提醒大家的好时机，这只是一个说法和一种有时存在的感觉，实际上并不是完全正确的。我们的项目可以编译，不过它绝对没有做任何工作！如果构建一个真实且功能完整的项目，则需花费大量的时间来开始编写单元测试来检查代码能否编译"),a("strong",[e._v("并且")]),e._v("拥有期望的行为。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);