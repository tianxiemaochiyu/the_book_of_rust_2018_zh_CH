(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{512:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"控制流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制流"}},[t._v("#")]),t._v(" 控制流")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch03-05-control-flow.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch03-05-control-flow.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit af34ac954a6bd7fc4a8bbcc5c9685e23c5af87da")])]),t._v(" "),a("p",[t._v("根据条件是否为真来决定是否执行某些代码，以及根据条件是否为真来重复运行一段代码是大部分编程语言的基本组成部分。Rust 代码中最常见的用来控制执行流的结构是 "),a("code",[t._v("if")]),t._v(" 表达式和循环。")]),t._v(" "),a("h3",{attrs:{id:"if-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-表达式"}},[t._v("#")]),t._v(" "),a("code",[t._v("if")]),t._v(" 表达式")]),t._v(" "),a("p",[a("code",[t._v("if")]),t._v(" 表达式允许根据条件执行不同的代码分支。你提供一个条件并表示 “如果条件满足，运行这段代码；如果条件不满足，不运行这段代码。”")]),t._v(" "),a("p",[t._v("在 "),a("em",[t._v("projects")]),t._v(" 目录新建一个叫做 "),a("em",[t._v("branches")]),t._v(" 的项目，来学习 "),a("code",[t._v("if")]),t._v(" 表达式。在 "),a("em",[t._v("src/main.rs")]),t._v(" 文件中，输入如下内容：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"condition was true"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"condition was false"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),t._v(" "),a("p",[t._v("所有的 "),a("code",[t._v("if")]),t._v(" 表达式都以 "),a("code",[t._v("if")]),t._v(" 关键字开头，其后跟一个条件。在这个例子中，条件检查变量 "),a("code",[t._v("number")]),t._v(" 的值是否小于 5。在条件为真时希望执行的代码块位于紧跟条件之后的大括号中。"),a("code",[t._v("if")]),t._v(" 表达式中与条件关联的代码块有时被叫做 "),a("em",[t._v("arms")]),t._v("，就像第二章 "),a("RouterLink",{attrs:{to:"/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number"}},[t._v("“比较猜测的数字和秘密数字”")]),t._v(" 部分中讨论到的 "),a("code",[t._v("match")]),t._v(" 表达式中的分支一样。")],1),t._v(" "),a("p",[t._v("也可以包含一个可选的 "),a("code",[t._v("else")]),t._v(" 表达式来提供一个在条件为假时应当执行的代码块，这里我们就这么做了。如果不提供 "),a("code",[t._v("else")]),t._v(" 表达式并且条件为假时，程序会直接忽略 "),a("code",[t._v("if")]),t._v(" 代码块并继续执行下面的代码。")]),t._v(" "),a("p",[t._v("尝试运行代码，应该能看到如下输出：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\ncondition was true\n")])])]),a("p",[t._v("尝试改变 "),a("code",[t._v("number")]),t._v(" 的值使条件为 "),a("code",[t._v("false")]),t._v(" 时看看会发生什么：")]),t._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let number = 7;\n")])])]),a("p",[t._v("再次运行程序并查看输出：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\ncondition was false\n")])])]),a("p",[t._v("另外值得注意的是代码中的条件 "),a("strong",[t._v("必须")]),t._v(" 是 "),a("code",[t._v("bool")]),t._v(" 值。如果条件不是 "),a("code",[t._v("bool")]),t._v(" 值，我们将得到一个错误。例如，尝试运行以下代码：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('fn main() {\n    let number = 3;\n\n    if number {\n        println!("number was three");\n    }\n}\n')])])]),a("p",[t._v("这里 "),a("code",[t._v("if")]),t._v(" 条件的值是 "),a("code",[t._v("3")]),t._v("，Rust 抛出了一个错误：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("error[E0308]: mismatched types\n --\x3e src/main.rs:4:8\n  |\n4 |     if number {\n  |        ^^^^^^ expected bool, found integer\n  |\n  = note: expected type `bool`\n             found type `{integer}`\n")])])]),a("p",[t._v("这个错误表明 Rust 期望一个 "),a("code",[t._v("bool")]),t._v(" 却得到了一个整数。不像 Ruby 或 JavaScript 这样的语言，Rust 并不会尝试自动地将非布尔值转换为布尔值。必须总是显式地使用布尔值作为 "),a("code",[t._v("if")]),t._v(" 的条件。例如，如果想要 "),a("code",[t._v("if")]),t._v(" 代码块只在一个数字不等于 "),a("code",[t._v("0")]),t._v(" 时执行，可以把 "),a("code",[t._v("if")]),t._v(" 表达式修改成下面这样：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number was something other than zero"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("运行代码会打印出 "),a("code",[t._v("number was something other than zero")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"使用-else-if-处理多重条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-else-if-处理多重条件"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("else if")]),t._v(" 处理多重条件")]),t._v(" "),a("p",[t._v("可以将 "),a("code",[t._v("else if")]),t._v(" 表达式与 "),a("code",[t._v("if")]),t._v(" 和 "),a("code",[t._v("else")]),t._v(" 组合来实现多重条件。例如：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number is divisible by 4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number is divisible by 3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number is divisible by 2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number is not divisible by 4, 3, or 2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个程序有四个可能的执行路径。运行后应该能看到如下输出：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\nnumber is divisible by 3\n")])])]),a("p",[t._v("当执行这个程序时，它按顺序检查每个 "),a("code",[t._v("if")]),t._v(" 表达式并执行第一个条件为真的代码块。注意即使 6 可以被 2 整除，也不会输出 "),a("code",[t._v("number is divisible by 2")]),t._v("，更不会输出 "),a("code",[t._v("else")]),t._v(" 块中的 "),a("code",[t._v("number is not divisible by 4, 3, or 2")]),t._v("。原因是 Rust 只会执行第一个条件为真的代码块，并且一旦它找到一个以后，甚至都不会检查剩下的条件了。")]),t._v(" "),a("p",[t._v("使用过多的 "),a("code",[t._v("else if")]),t._v(" 表达式会使代码显得杂乱无章，所以如果有多于一个 "),a("code",[t._v("else if")]),t._v(" 表达式，最好重构代码。为此，第六章会介绍一个强大的 Rust 分支结构（branching construct），叫做 "),a("code",[t._v("match")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"在-let-语句中使用-if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-let-语句中使用-if"}},[t._v("#")]),t._v(" 在 "),a("code",[t._v("let")]),t._v(" 语句中使用 "),a("code",[t._v("if")])]),t._v(" "),a("p",[t._v("因为 "),a("code",[t._v("if")]),t._v(" 是一个表达式，我们可以在 "),a("code",[t._v("let")]),t._v(" 语句的右侧使用它，例如在示例 3-2 中：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" condition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" condition "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The value of number is: {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 3-2：将 "),a("code",[t._v("if")]),t._v(" 表达式的返回值赋给一个变量")])]),t._v(" "),a("p",[a("code",[t._v("number")]),t._v(" 变量将会绑定到表示 "),a("code",[t._v("if")]),t._v(" 表达式结果的值上。运行这段代码看看会出现什么：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/branches`\nThe value of number is: 5\n")])])]),a("p",[t._v("记住，代码块的值是其最后一个表达式的值，而数字本身就是一个表达式。在这个例子中，整个 "),a("code",[t._v("if")]),t._v(" 表达式的值取决于哪个代码块被执行。这意味着 "),a("code",[t._v("if")]),t._v(" 的每个分支的可能的返回值都必须是相同类型；在示例 3-2 中，"),a("code",[t._v("if")]),t._v(" 分支和 "),a("code",[t._v("else")]),t._v(" 分支的结果都是 "),a("code",[t._v("i32")]),t._v(" 整型。如果它们的类型不匹配，如下面这个例子，则会出现一个错误：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('fn main() {\n    let condition = true;\n\n    let number = if condition {\n        5\n    } else {\n        "six"\n    };\n\n    println!("The value of number is: {}", number);\n}\n')])])]),a("p",[t._v("当编译这段代码时，会得到一个错误。"),a("code",[t._v("if")]),t._v(" 和 "),a("code",[t._v("else")]),t._v(" 分支的值类型是不相容的，同时 Rust 也准确地指出在程序中的何处发现的这个问题：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('error[E0308]: if and else have incompatible types\n --\x3e src/main.rs:4:18\n  |\n4 |       let number = if condition {\n  |  __________________^\n5 | |         5\n6 | |     } else {\n7 | |         "six"\n8 | |     };\n  | |_____^ expected integer, found &str\n  |\n  = note: expected type `{integer}`\n             found type `&str`\n')])])]),a("p",[a("code",[t._v("if")]),t._v(" 代码块中的表达式返回一个整数，而 "),a("code",[t._v("else")]),t._v(" 代码块中的表达式返回一个字符串。这不可行，因为变量必须只有一个类型。Rust 需要在编译时就确切的知道 "),a("code",[t._v("number")]),t._v(" 变量的类型，这样它就可以在编译时验证在每处使用的 "),a("code",[t._v("number")]),t._v(" 变量的类型是有效的。Rust 并不能够在 "),a("code",[t._v("number")]),t._v(" 的类型只能在运行时确定的情况下工作；这样会使编译器变得更复杂而且只能为代码提供更少的保障，因为它不得不记录所有变量的多种可能的类型。")]),t._v(" "),a("h3",{attrs:{id:"使用循环重复执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用循环重复执行"}},[t._v("#")]),t._v(" 使用循环重复执行")]),t._v(" "),a("p",[t._v("多次执行同一段代码是很常用的，Rust 为此提供了多种 "),a("strong",[t._v("循环")]),t._v("（"),a("em",[t._v("loops")]),t._v("）。一个循环执行循环体中的代码直到结尾并紧接着回到开头继续执行。为了实验一下循环，让我们新建一个叫做 "),a("em",[t._v("loops")]),t._v(" 的项目。")]),t._v(" "),a("p",[t._v("Rust 有三种循环："),a("code",[t._v("loop")]),t._v("、"),a("code",[t._v("while")]),t._v(" 和 "),a("code",[t._v("for")]),t._v("。我们每一个都试试。")]),t._v(" "),a("h4",{attrs:{id:"使用-loop-重复执行代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-loop-重复执行代码"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("loop")]),t._v(" 重复执行代码")]),t._v(" "),a("p",[a("code",[t._v("loop")]),t._v(" 关键字告诉 Rust 一遍又一遍地执行一段代码直到你明确要求停止。")]),t._v(" "),a("p",[t._v("作为一个例子，将 "),a("em",[t._v("loops")]),t._v(" 目录中的 "),a("em",[t._v("src/main.rs")]),t._v(" 文件修改为如下：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('fn main() {\n    loop {\n        println!("again!");\n    }\n}\n')])])]),a("p",[t._v("当运行这个程序时，我们会看到连续的反复打印 "),a("code",[t._v("again!")]),t._v("，直到我们手动停止程序。大部分终端都支持一个快捷键，"),a("span",{staticClass:"keystroke"},[t._v("ctrl-c")]),t._v("，来终止一个陷入无限循环的程序。尝试一下：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29 secs\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n")])])]),a("p",[t._v("符号 "),a("code",[t._v("^C")]),t._v(" 代表你在这按下了"),a("span",{staticClass:"keystroke"},[t._v("ctrl-c")]),t._v("。在 "),a("code",[t._v("^C")]),t._v(" 之后你可能看到也可能看不到 "),a("code",[t._v("again!")]),t._v(" ，这取决于在接收到终止信号时代码执行到了循环的何处。")]),t._v(" "),a("p",[t._v("幸运的是，Rust 提供了另一种更可靠的退出循环的方式。可以使用 "),a("code",[t._v("break")]),t._v(" 关键字来告诉程序何时停止循环。回忆一下在第二章猜猜看游戏的 "),a("RouterLink",{attrs:{to:"/ch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess"}},[t._v("“猜测正确后退出”")]),t._v(" 部分使用过它来在用户猜对数字赢得游戏后退出程序。")],1),t._v(" "),a("h4",{attrs:{id:"从循环返回"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从循环返回"}},[t._v("#")]),t._v(" 从循环返回")]),t._v(" "),a("p",[a("code",[t._v("loop")]),t._v(" 的一个用例是重试可能会失败的操作，比如检查线程是否完成了任务。然而你可能会需要将操作的结果传递给其它的代码。如果将返回值加入你用来停止循环的 "),a("code",[t._v("break")]),t._v(" 表达式，它会被停止的循环返回：")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The result is {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在循环之前，我们声明了一个名为 "),a("code",[t._v("counter")]),t._v(" 的变量并初始化为 "),a("code",[t._v("0")]),t._v("。接着声明了一个名为 "),a("code",[t._v("result")]),t._v(" 来存放循环的返回值。在循环的每一次迭代中，我们将 "),a("code",[t._v("counter")]),t._v(" 变量加 "),a("code",[t._v("1")]),t._v("，接着检查计数是否等于 "),a("code",[t._v("10")]),t._v("。当相等时，使用 "),a("code",[t._v("break")]),t._v(" 关键字返回值 "),a("code",[t._v("counter * 2")]),t._v("。循环之后，我们通过分号结束赋值给 "),a("code",[t._v("result")]),t._v(" 的语句。最后打印出 "),a("code",[t._v("result")]),t._v(" 的值，也就是 20。")]),t._v(" "),a("h4",{attrs:{id:"while-条件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-条件循环"}},[t._v("#")]),t._v(" "),a("code",[t._v("while")]),t._v(" 条件循环")]),t._v(" "),a("p",[t._v("在程序中计算循环的条件也很常见。当条件为真，执行循环。当条件不再为真，调用 "),a("code",[t._v("break")]),t._v(" 停止循环。这个循环类型可以通过组合 "),a("code",[t._v("loop")]),t._v("、"),a("code",[t._v("if")]),t._v("、"),a("code",[t._v("else")]),t._v(" 和 "),a("code",[t._v("break")]),t._v(" 来实现；如果你喜欢的话，现在就可以在程序中试试。")]),t._v(" "),a("p",[t._v("然而，这个模式太常用了，Rust 为此内置了一个语言结构，它被称为 "),a("code",[t._v("while")]),t._v(" 循环。示例 3-3 使用了 "),a("code",[t._v("while")]),t._v("：程序循环三次，每次数字都减一。接着，在循环结束后，打印出另一个信息并退出。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{}!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LIFTOFF!!!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 3-3: 当条件为真时，使用 "),a("code",[t._v("while")]),t._v(" 循环运行代码")])]),t._v(" "),a("p",[t._v("这种结构消除了很多使用 "),a("code",[t._v("loop")]),t._v("、"),a("code",[t._v("if")]),t._v("、"),a("code",[t._v("else")]),t._v(" 和 "),a("code",[t._v("break")]),t._v(" 时所必须的嵌套，这样更加清晰。当条件为真就执行，否则退出循环。")]),t._v(" "),a("h4",{attrs:{id:"使用-for-遍历集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-for-遍历集合"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("for")]),t._v(" 遍历集合")]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("while")]),t._v(" 结构来遍历集合中的元素，比如数组。例如，看看示例 3-4。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the value is: {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 3-4：使用 "),a("code",[t._v("while")]),t._v(" 循环遍历集合中的元素")])]),t._v(" "),a("p",[t._v("这里，代码对数组中的元素进行计数。它从索引 "),a("code",[t._v("0")]),t._v(" 开始，并接着循环直到遇到数组的最后一个索引（这时，"),a("code",[t._v("index < 5")]),t._v(" 不再为真）。运行这段代码会打印出数组中的每一个元素：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n")])])]),a("p",[t._v("数组中的所有五个元素都如期被打印出来。尽管 "),a("code",[t._v("index")]),t._v(" 在某一时刻会到达值 "),a("code",[t._v("5")]),t._v("，不过循环在其尝试从数组获取第六个值（会越界）之前就停止了。")]),t._v(" "),a("p",[t._v("但这个过程很容易出错；如果索引长度不正确会导致程序 panic。这也使程序更慢，因为编译器增加了运行时代码来对每次循环的每个元素进行条件检查。")]),t._v(" "),a("p",[t._v("作为更简洁的替代方案，可以使用 "),a("code",[t._v("for")]),t._v(" 循环来对一个集合的每个元素执行一些代码。"),a("code",[t._v("for")]),t._v(" 循环看起来如示例 3-5 所示：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the value is: {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 3-5：使用 "),a("code",[t._v("for")]),t._v(" 循环遍历集合中的元素")])]),t._v(" "),a("p",[t._v("当运行这段代码时，将看到与示例 3-4 一样的输出。更为重要的是，我们增强了代码安全性，并消除了可能由于超出数组的结尾或遍历长度不够而缺少一些元素而导致的 bug。")]),t._v(" "),a("p",[t._v("例如，在示例 3-4 的代码中，如果从数组 "),a("code",[t._v("a")]),t._v(" 中移除一个元素但忘记将条件更新为 "),a("code",[t._v("while index < 4")]),t._v("，代码将会 panic。使用 "),a("code",[t._v("for")]),t._v(" 循环的话，就不需要惦记着在改变数组元素个数时修改其他的代码了。")]),t._v(" "),a("p",[a("code",[t._v("for")]),t._v(" 循环的安全性和简洁性使得它成为 Rust 中使用最多的循环结构。即使是在想要循环执行代码特定次数时，例如示例 3-3 中使用 "),a("code",[t._v("while")]),t._v(" 循环的倒计时例子，大部分 Rustacean 也会使用 "),a("code",[t._v("for")]),t._v(" 循环。这么做的方式是使用 "),a("code",[t._v("Range")]),t._v("，它是标准库提供的类型，用来生成从一个数字开始到另一个数字之前结束的所有数字的序列。")]),t._v(" "),a("p",[t._v("下面是一个使用 "),a("code",[t._v("for")]),t._v(" 循环来倒计时的例子，它还使用了一个我们还未讲到的方法，"),a("code",[t._v("rev")]),t._v("，用来反转 range：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{}!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LIFTOFF!!!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这段代码看起来更帅气不是吗？")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("你做到了！这是一个大章节：你学习了变量、标量和复合数据类型、函数、注释、 "),a("code",[t._v("if")]),t._v(" 表达式和循环！如果你想要实践本章讨论的概念，尝试构建如下程序：")]),t._v(" "),a("ul",[a("li",[t._v("相互转换摄氏与华氏温度。")]),t._v(" "),a("li",[t._v("生成 n 阶斐波那契数列。")]),t._v(" "),a("li",[t._v("打印圣诞颂歌 “The Twelve Days of Christmas” 的歌词，并利用歌曲中的重复部分（编写循环）。")])]),t._v(" "),a("p",[t._v("当你准备好继续的时候，让我们讨论一个其他语言中 "),a("strong",[t._v("并不")]),t._v(" 常见的概念：所有权（ownership）。")])])}),[],!1,null,null,null);s.default=e.exports}}]);