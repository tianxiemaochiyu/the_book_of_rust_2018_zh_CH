(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{380:function(t,e,r){"use strict";r.r(e);var s=r(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"使用结构体组织相关联的数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用结构体组织相关联的数据"}},[t._v("#")]),t._v(" 使用结构体组织相关联的数据")]),t._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch05-00-structs.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch05-00-structs.md"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),r("p",[r("em",[t._v("struct")]),t._v("，或者 "),r("em",[t._v("structure")]),t._v("，是一个自定义数据类型，允许你命名和包装多个相关的值，从而形成一个有意义的组合。如果你熟悉一门面向对象语言，"),r("em",[t._v("struct")]),t._v(" 就像对象中的数据属性。在本章中，我们会对比元组与结构体的异同，演示结构体的用法，并讨论如何在结构体上定义方法和关联函数来指定与结构体数据相关的行为。你可以在程序中基于结构体和枚举（"),r("em",[t._v("enum")]),t._v("）（在第六章介绍）创建新类型，以充分利用 Rust 的编译时类型检查。")])])}),[],!1,null,null,null);e.default=n.exports}}]);