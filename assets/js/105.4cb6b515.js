(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{455:function(e,t,a){"use strict";a.r(t);var _=a(42),v=Object(_.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏"}},[e._v("#")]),e._v(" 宏")]),e._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch19-06-macros.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ch19-06-macros.md"),a("OutboundLink")],1),e._v(" "),a("br"),e._v("\ncommit 7ddc46460f09a5cd9bd2a620565bdc20b3315ea9")])]),e._v(" "),a("p",[e._v("我们已经在本书中使用过像 "),a("code",[e._v("println!")]),e._v(" 这样的宏了，不过还没完全探索什么是宏以及它是如何工作的。"),a("strong",[e._v("宏")]),e._v("（"),a("em",[e._v("Macro")]),e._v("）指的是 Rust 中一系列的功能："),a("strong",[e._v("声明")]),e._v("（"),a("em",[e._v("Declarative")]),e._v("）宏，使用 "),a("code",[e._v("macro_rules!")]),e._v("，和三种 "),a("strong",[e._v("过程")]),e._v("（"),a("em",[e._v("Procedural")]),e._v("）宏：")]),e._v(" "),a("ul",[a("li",[e._v("自定义 "),a("code",[e._v("#[derive]")]),e._v(" 宏在结构体和枚举上指定通过 "),a("code",[e._v("derive")]),e._v(" 属性添加的代码")]),e._v(" "),a("li",[e._v("类属性（Attribute）宏定义可用于任意项的自定义属性")]),e._v(" "),a("li",[e._v("类函数宏看起来像函数不过作用于作为参数传递的 token。")])]),e._v(" "),a("p",[e._v("我们会依次讨论每一种宏，不过首要的是，为什么已经有了函数还需要宏呢？")]),e._v(" "),a("h3",{attrs:{id:"宏和函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏和函数的区别"}},[e._v("#")]),e._v(" 宏和函数的区别")]),e._v(" "),a("p",[e._v("从根本上来说，宏是一种为写其他代码而写代码的方式，即所谓的 "),a("strong",[e._v("元编程")]),e._v("（"),a("em",[e._v("metaprogramming")]),e._v("）。在附录 C 中会探讨 "),a("code",[e._v("derive")]),e._v(" 属性，其生成各种 trait 的实现。我们也在本书中使用过 "),a("code",[e._v("println!")]),e._v(" 宏和 "),a("code",[e._v("vec!")]),e._v(" 宏。所有的这些宏以 "),a("strong",[e._v("展开")]),e._v(" 的方式来生成比你所手写出的更多的代码。")]),e._v(" "),a("p",[e._v("元编程对于减少大量编写和维护的代码是非常有用的，它也扮演了函数的角色。但宏有一些函数所没有的附加能力。")]),e._v(" "),a("p",[e._v("一个函数标签必须声明函数参数个数和类型。相比之下，宏只接受一个可变参数：用一个参数调用 "),a("code",[e._v('println!("hello")')]),e._v(" 或用两个参数调用 "),a("code",[e._v('println!("hello {}", name)')]),e._v(" 。而且，宏可以在编译器翻译代码前展开，例如，宏可以在一个给定类型上实现 trait 。而函数则不行，因为函数是在运行时被调用，同时 trait 需要在编译时实现。")]),e._v(" "),a("p",[e._v("实现一个宏而不是函数的消极面是宏定义要比函数定义更复杂，因为你正在编写生成 Rust 代码的 Rust 代码。由于这样的间接性，宏定义通常要比函数定义更难阅读、理解以及维护。")]),e._v(" "),a("p",[e._v("宏和函数的最后一个重要的区别是：在调用宏 "),a("strong",[e._v("之前")]),e._v(" 必须定义并将其引入作用域，而函数则可以在任何地方定义和调用。")]),e._v(" "),a("h3",{attrs:{id:"使用-macro-rules-的声明宏用于通用元编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-macro-rules-的声明宏用于通用元编程"}},[e._v("#")]),e._v(" 使用 "),a("code",[e._v("macro_rules!")]),e._v(" 的声明宏用于通用元编程")]),e._v(" "),a("p",[e._v("Rust 最常用的宏形式是 "),a("strong",[e._v("声明宏")]),e._v("（"),a("em",[e._v("declarative macros")]),e._v("）。它们有时也被称为 “macros by example”、“"),a("code",[e._v("macro_rules!")]),e._v(" 宏” 或者就是 “macros”。其核心概念是，声明宏允许我们编写一些类似 Rust "),a("code",[e._v("match")]),e._v(" 表达式的代码。正如在第六章讨论的那样，"),a("code",[e._v("match")]),e._v(" 表达式是控制结构，其接收一个表达式，与表达式的结果进行模式匹配，然后根据模式匹配执行相关代码。宏也将一个值和包含相关代码的模式进行比较；此种情况下，该值是传递给宏的 Rust 源代码字面值，模式用于和传递给宏的源代码进行比较，同时每个模式的相关代码则用于替换传递给宏的代码。所有这一切都发生于编译时。")]),e._v(" "),a("p",[e._v("可以使用 "),a("code",[e._v("macro_rules!")]),e._v(" 来定义宏。让我们通过查看 "),a("code",[e._v("vec!")]),e._v(" 宏定义来探索如何使用 "),a("code",[e._v("macro_rules!")]),e._v(" 结构。第八章讲述了如何使用 "),a("code",[e._v("vec!")]),e._v(" 宏来生成一个给定值的 vector。例如，下面的宏用三个整数创建一个 vector：")]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Vec")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("u32")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("vec!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("也可以使用 "),a("code",[e._v("vec!")]),e._v(" 宏来构造两个整数的 vector 或五个字符串 slice 的 vector 。但却无法使用函数做相同的事情，因为我们无法预先知道参数值的数量和类型。")]),e._v(" "),a("p",[e._v("在示例 19-28 中展示了一个 "),a("code",[e._v("vec!")]),e._v(" 稍微简化的定义。")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/lib.rs")])]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[e._v("#[macro_export]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("macro_rules!")]),e._v(" vec "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token fragment-specifier punctuation"}},[e._v("expr")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("mut")]),e._v(" temp_vec "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Vec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n                temp_vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("\n            temp_vec\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[e._v("示例 19-28: 一个 "),a("code",[e._v("vec!")]),e._v(" 宏定义的简化版本")])]),e._v(" "),a("blockquote",[a("p",[e._v("注意：标准库中实际定义的 "),a("code",[e._v("vec!")]),e._v(" 包括预分配适当量的内存的代码。这部分为代码优化，为了让示例简化，此处并没有包含在内。")])]),e._v(" "),a("p",[e._v("无论何时导入定义了宏的包，"),a("code",[e._v("#[macro_export]")]),e._v(" 注解说明宏应该是可用的。 如果没有该注解，这个宏不能被引入作用域。")]),e._v(" "),a("p",[e._v("接着使用 "),a("code",[e._v("macro_rules!")]),e._v(" 和宏名称开始宏定义，且所定义的宏并 "),a("em",[e._v("不带")]),e._v(" 感叹号。名字后跟大括号表示宏定义体，在该例中宏名称是 "),a("code",[e._v("vec")]),e._v(" 。")]),e._v(" "),a("p",[a("code",[e._v("vec!")]),e._v(" 宏的结构和 "),a("code",[e._v("match")]),e._v(" 表达式的结构类似。此处有一个单边模式 "),a("code",[e._v("( $( $x:expr ),* )")]),e._v(" ，后跟 "),a("code",[e._v("=>")]),e._v(" 以及和模式相关的代码块。如果模式匹配，该相关代码块将被执行。假设这是这个宏中唯一的模式，则只有这一种有效匹配，其他任何匹配都是错误的。更复杂的宏会有多个单边模式。")]),e._v(" "),a("p",[e._v("宏定义中有效模式语法和在第十八章提及的模式语法是不同的，因为宏模式所匹配的是 Rust 代码结构而不是值。回过头来检查下示例 19-28 中模式片段什么意思。对于全部的宏模式语法，请查阅"),a("a",{attrs:{href:"https://doc.rust-lang.org/reference/macros.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("首先，一对括号包含了全部模式。接下来是后跟一对括号的美元符号（ "),a("code",[e._v("$")]),e._v(" ），其通过替代代码捕获了符合括号内模式的值。"),a("code",[e._v("$()")]),e._v(" 内则是 "),a("code",[e._v("$x:expr")]),e._v(" ，其匹配 Rust 的任意表达式或给定 "),a("code",[e._v("$x")]),e._v(" 名字的表达式。")]),e._v(" "),a("p",[a("code",[e._v("$()")]),e._v(" 之后的逗号说明一个逗号分隔符可以有选择的出现代码之后，这段代码与在 "),a("code",[e._v("$()")]),e._v(" 中所捕获的代码相匹配。紧随逗号之后的 "),a("code",[e._v("*")]),e._v(" 说明该模式匹配零个或多个 "),a("code",[e._v("*")]),e._v(" 之前的任何模式。")]),e._v(" "),a("p",[e._v("当以 "),a("code",[e._v("vec![1, 2, 3];")]),e._v(" 调用宏时，"),a("code",[e._v("$x")]),e._v(" 模式与三个表达式 "),a("code",[e._v("1")]),e._v("、"),a("code",[e._v("2")]),e._v(" 和 "),a("code",[e._v("3")]),e._v(" 进行了三次匹配。")]),e._v(" "),a("p",[e._v("现在让我们来看看这个出现在与此单边模式相关的代码块中的模式：在 "),a("code",[e._v("$()*")]),e._v(" 部分中所生成的 "),a("code",[e._v("temp_vec.push()")]),e._v(" 为在匹配到模式中的 "),a("code",[e._v("$()")]),e._v(" 每一部分而生成。"),a("code",[e._v("$x")]),e._v(" 由每个与之相匹配的表达式所替换。当以 "),a("code",[e._v("vec![1, 2, 3];")]),e._v(" 调用该宏时，替换该宏调用所生成的代码会是下面这样：")]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let mut temp_vec = Vec::new();\ntemp_vec.push(1);\ntemp_vec.push(2);\ntemp_vec.push(3);\ntemp_vec\n")])])]),a("p",[e._v("我们已经定义了一个宏，其可以接收任意数量和类型的参数，同时可以生成能够创建包含指定元素的 vector 的代码。")]),e._v(" "),a("p",[a("code",[e._v("macro_rules!")]),e._v(" 中有一些奇怪的地方。在将来，会有第二种采用 "),a("code",[e._v("macro")]),e._v(" 关键字的声明宏，其工作方式类似但修复了这些极端情况。在此之后，"),a("code",[e._v("macro_rules!")]),e._v(" 实际上就过时（deprecated）了。在此基础之上，同时鉴于大多数 Rust 程序员 "),a("strong",[e._v("使用")]),e._v(" 宏而非 "),a("strong",[e._v("编写")]),e._v(" 宏的事实，此处不再深入探讨 "),a("code",[e._v("macro_rules!")]),e._v("。请查阅在线文档或其他资源，如 "),a("a",{attrs:{href:"https://danielkeep.github.io/tlborm/book/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("“The Little Book of Rust Macros”"),a("OutboundLink")],1),e._v(" 来更多地了解如何写宏。")]),e._v(" "),a("h3",{attrs:{id:"用于从属性生成代码的过程宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用于从属性生成代码的过程宏"}},[e._v("#")]),e._v(" 用于从属性生成代码的过程宏")]),e._v(" "),a("p",[e._v("第二种形式的宏被称为 "),a("strong",[e._v("过程宏")]),e._v("（"),a("em",[e._v("procedural macros")]),e._v("），因为它们更像函数（一种过程类型）。过程宏接收 Rust 代码作为输入，在这些代码上进行操作，然后产生另一些代码作为输出，而非像声明式宏那样匹配对应模式然后以另一部分代码替换当前代码。")]),e._v(" "),a("p",[e._v("有三种类型的过程宏（自定义 derive，类属性和类函数），不过它们的工作方式都类似。")]),e._v(" "),a("p",[e._v("当创建过程宏时，其定义必须位于一种特殊类型的属于它们自己的 crate 中。这么做出于复杂的技术原因，将来我们希望能够消除这些限制。使用这些宏需采用类似示例 19-29 所示的代码形式，其中 "),a("code",[e._v("some_attribute")]),e._v(" 是一个使用特定宏的占位符。")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/lib.rs")])]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("use proc_macro;\n\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[e._v("示例 19-29: 一个使用过程宏的例子")])]),e._v(" "),a("p",[e._v("过程宏包含一个函数，这也是其得名的原因：“过程” 是 “函数” 的同义词。那么为何不叫 “函数宏” 呢？好吧，有一个过程宏是 “类函数” 的，叫成函数会产生混乱。无论如何，定义过程宏的函数接受一个 "),a("code",[e._v("TokenStream")]),e._v(" 作为输入并产生一个 "),a("code",[e._v("TokenStream")]),e._v(" 作为输出。这也就是宏的核心：宏所处理的源代码组成了输入 "),a("code",[e._v("TokenStream")]),e._v("，同时宏生成的代码是输出 "),a("code",[e._v("TokenStream")]),e._v("。最后，函数上有一个属性；这个属性表明过程宏的类型。在同一 crate 中可以有多种的过程宏。")]),e._v(" "),a("p",[e._v("考虑到这些宏是如此类似，我们会从自定义派生宏开始。接着会解释与其他形式宏的微小区别。")]),e._v(" "),a("h3",{attrs:{id:"如何编写自定义-derive-宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何编写自定义-derive-宏"}},[e._v("#")]),e._v(" 如何编写自定义 "),a("code",[e._v("derive")]),e._v(" 宏")]),e._v(" "),a("p",[e._v("让我们创建一个 "),a("code",[e._v("hello_macro")]),e._v(" crate，其包含名为 "),a("code",[e._v("HelloMacro")]),e._v(" 的 trait 和关联函数 "),a("code",[e._v("hello_macro")]),e._v("。不同于让 crate 的用户为其每一个类型实现 "),a("code",[e._v("HelloMacro")]),e._v(" trait，我们将会提供一个过程式宏以便用户可以使用 "),a("code",[e._v("#[derive(HelloMacro)]")]),e._v(" 注解他们的类型来得到 "),a("code",[e._v("hello_macro")]),e._v(" 函数的默认实现。该默认实现会打印 "),a("code",[e._v("Hello, Macro! My name is TypeName!")]),e._v("，其中 "),a("code",[e._v("TypeName")]),e._v(" 为定义了 trait 的类型名。换言之，我们会创建一个 crate，使程序员能够写类似示例 19-30 中的代码。")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/main.rs")])]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("use hello_macro::HelloMacro;\nuse hello_macro_derive::HelloMacro;\n\n#[derive(HelloMacro)]\nstruct Pancakes;\n\nfn main() {\n    Pancakes::hello_macro();\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[e._v("示例 19-30: crate 用户所写的能够使用过程式宏的代码")])]),e._v(" "),a("p",[e._v("运行该代码将会打印 "),a("code",[e._v("Hello, Macro! My name is Pancakes!")]),e._v(" 第一步是像下面这样新建一个库 crate：")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cargo new hello_macro --lib\n")])])]),a("p",[e._v("接下来，会定义 "),a("code",[e._v("HelloMacro")]),e._v(" trait 以及其关联函数：")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: src/lib.rs")])]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("trait")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HelloMacro")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fn")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[e._v("hello_macro")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("现在有了一个包含函数的 trait 。此时，crate 用户可以实现该 trait 以达到其期望的功能，像这样：")]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('use hello_macro::HelloMacro;\n\nstruct Pancakes;\n\nimpl HelloMacro for Pancakes {\n    fn hello_macro() {\n        println!("Hello, Macro! My name is Pancakes!");\n    }\n}\n\nfn main() {\n    Pancakes::hello_macro();\n}\n')])])]),a("p",[e._v("然而，他们需要为每一个他们想使用 "),a("code",[e._v("hello_macro")]),e._v(" 的类型编写实现的代码块。我们希望为其节约这些工作。")]),e._v(" "),a("p",[e._v("另外，我们也无法为 "),a("code",[e._v("hello_macro")]),e._v(" 函数提供一个能够打印实现了该 trait 的类型的名字的默认实现：Rust 没有反射的能力，因此其无法在运行时获取类型名。我们需要一个在编译时生成代码的宏。")]),e._v(" "),a("p",[e._v("下一步是定义过程式宏。在编写本部分时，过程式宏必须在其自己的 crate 内。该限制最终可能被取消。构造 crate 和其中宏的惯例如下：对于一个 "),a("code",[e._v("foo")]),e._v(" 的包来说，一个自定义的派生过程宏的包被称为 "),a("code",[e._v("foo_derive")]),e._v(" 。在 "),a("code",[e._v("hello_macro")]),e._v(" 项目中新建名为 "),a("code",[e._v("hello_macro_derive")]),e._v(" 的包。")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cargo new hello_macro_derive --lib\n")])])]),a("p",[e._v("由于两个 crate 紧密相关，因此在 "),a("code",[e._v("hello_macro")]),e._v(" 包的目录下创建过程式宏的 crate。如果改变在 "),a("code",[e._v("hello_macro")]),e._v(" 中定义的 trait ，同时也必须改变在 "),a("code",[e._v("hello_macro_derive")]),e._v(" 中实现的过程式宏。这两个包需要分别发布，编程人员如果使用这些包，则需要同时添加这两个依赖并将其引入作用域。我们也可以只用 "),a("code",[e._v("hello_macro")]),e._v(" 包而将 "),a("code",[e._v("hello_macro_derive")]),e._v(" 作为一个依赖，并重新导出过程式宏的代码。但我们组织项目的方式使编程人员使用 "),a("code",[e._v("hello_macro")]),e._v(" 成为可能，即使他们无需 "),a("code",[e._v("derive")]),e._v(" 的功能。")]),e._v(" "),a("p",[e._v("需要将 "),a("code",[e._v("hello_macro_derive")]),e._v(" 声明为一个过程宏的 crate。同时也需要 "),a("code",[e._v("syn")]),e._v(" 和 "),a("code",[e._v("quote")]),e._v(" crate 中的功能，正如注释中所说，需要将其加到依赖中。为 "),a("code",[e._v("hello_macro_derive")]),e._v(" 将下面的代码加入到 "),a("em",[e._v("Cargo.toml")]),e._v(" 文件中。")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: hello_macro_derive/Cargo.toml")])]),e._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[e._v("lib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[e._v("proc-macro")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[e._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[e._v("syn")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0.14.4"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[e._v("quote")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0.6.3"')]),e._v("\n")])])]),a("p",[e._v("为定义一个过程式宏，请将示例 19-31 中的代码放在 "),a("code",[e._v("hello_macro_derive")]),e._v(" crate 的 "),a("em",[e._v("src/lib.rs")]),e._v(" 文件里面。注意这段代码在我们添加 "),a("code",[e._v("impl_hello_macro")]),e._v(" 函数的定义之前是无法编译的。")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: hello_macro_derive/src/lib.rs")])]),e._v(" "),a("blockquote",[a("p",[e._v("在 Rust 1.31.0 时，"),a("code",[e._v("extern crate")]),e._v(" 仍是必须的，请查看 "),a("br"),e._v("\nhttps://github.com/rust-lang/rust/issues/54418 "),a("br"),e._v("\nhttps://github.com/rust-lang/rust/pull/54658 "),a("br"),e._v("\nhttps://github.com/rust-lang/rust/issues/55599")])]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("extern crate proc_macro;\n\nuse crate::proc_macro::TokenStream;\nuse quote::quote;\nuse syn;\n\n#[proc_macro_derive(HelloMacro)]\npub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n    // 构建 Rust 代码所代表的语法树\n    // 以便可以进行操作\n    let ast = syn::parse(input).unwrap();\n\n    // 构建 trait 实现\n    impl_hello_macro(&ast)\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[e._v("示例 19-31: 大多数过程式宏处理 Rust 代码时所需的代码")])]),e._v(" "),a("p",[e._v("注意 "),a("code",[e._v("hello_macro_derive")]),e._v(" 函数中代码分割的方式，它负责解析 "),a("code",[e._v("TokenStream")]),e._v("，而 "),a("code",[e._v("impl_hello_macro")]),e._v(" 函数则负责转换语法树：这让编写一个过程式宏更加方便。外部函数中的代码（在这里是 "),a("code",[e._v("hello_macro_derive")]),e._v("）几乎在所有你能看到或创建的过程宏 crate 中都一样。内部函数（在这里是 "),a("code",[e._v("impl_hello_macro")]),e._v("）的函数体中所指定的代码则依过程宏的目的而各有不同。")]),e._v(" "),a("p",[e._v("现在，我们已经引入了三个新的 crate："),a("code",[e._v("proc_macro")]),e._v(" 、 "),a("a",{attrs:{href:"https://crates.io/crates/syn",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("syn")]),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://crates.io/crates/quote",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("quote")]),a("OutboundLink")],1),e._v(" 。Rust 自带 "),a("code",[e._v("proc_macro")]),e._v(" crate，因此无需将其加到 "),a("em",[e._v("Cargo.toml")]),e._v(" 文件的依赖中。"),a("code",[e._v("proc_macro")]),e._v(" crate 是编译器用来读取和操作我们 Rust 代码的 API。")]),e._v(" "),a("p",[a("code",[e._v("syn")]),e._v(" crate 将字符串中的 Rust 代码解析成为一个可以操作的数据结构。"),a("code",[e._v("quote")]),e._v(" 则将 "),a("code",[e._v("syn")]),e._v(" 解析的数据结构反过来传入到 Rust 代码中。这些 crate 让解析任何我们所要处理的 Rust 代码变得更简单：为 Rust 编写整个的解析器并不是一件简单的工作。")]),e._v(" "),a("p",[e._v("当用户在一个类型上指定 "),a("code",[e._v("#[derive(HelloMacro)]")]),e._v(" 时，"),a("code",[e._v("hello_macro_derive")]),e._v("  函数将会被调用。原因在于我们已经使用 "),a("code",[e._v("proc_macro_derive")]),e._v(" 及其指定名称对 "),a("code",[e._v("hello_macro_derive")]),e._v(" 函数进行了注解："),a("code",[e._v("HelloMacro")]),e._v(" ，其匹配到 trait 名，这是大多数过程宏遵循的习惯。")]),e._v(" "),a("p",[e._v("该函数首先将来自 "),a("code",[e._v("TokenStream")]),e._v(" 的 "),a("code",[e._v("input")]),e._v(" 转换为一个我们可以解释和操作的数据结构。这正是 "),a("code",[e._v("syn")]),e._v(" 派上用场的地方。"),a("code",[e._v("syn")]),e._v(" 中的 "),a("code",[e._v("parse_derive_input")]),e._v(" 函数获取一个 "),a("code",[e._v("TokenStream")]),e._v(" 并返回一个表示解析出 Rust 代码的 "),a("code",[e._v("DeriveInput")]),e._v(" 结构体。示例 19-32 展示了从字符串 "),a("code",[e._v("struct Pancakes;")]),e._v(" 中解析出来的 "),a("code",[e._v("DeriveInput")]),e._v(" 结构体的相关部分：")]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('DeriveInput {\n    // --snip--\n\n    ident: Ident {\n        ident: "Pancakes",\n        span: #0 bytes(95..103)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: Some(\n                Semi\n            )\n        }\n    )\n}\n')])])]),a("p",[a("span",{staticClass:"caption"},[e._v("示例 19-32: 解析示例 19-30 中带有宏属性的代码时得到的 "),a("code",[e._v("DeriveInput")]),e._v(" 实例")])]),e._v(" "),a("p",[e._v("该结构体的字段展示了我们解析的 Rust 代码是一个类单元结构体，其 "),a("code",[e._v("ident")]),e._v("（ identifier，表示名字）为 "),a("code",[e._v("Pancakes")]),e._v("。该结构体里面有更多字段描述了所有类型的 Rust 代码，查阅 "),a("a",{attrs:{href:"https://docs.rs/syn/0.14.4/syn/struct.DeriveInput.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("syn")]),e._v(" 中 "),a("code",[e._v("DeriveInput")]),e._v(" 的文档"),a("OutboundLink")],1),e._v(" 以获取更多信息。")]),e._v(" "),a("p",[e._v("此时，尚未定义 "),a("code",[e._v("impl_hello_macro")]),e._v(" 函数，其用于构建所要包含在内的 Rust 新代码。但在此之前，注意其输出也是 "),a("code",[e._v("TokenStream")]),e._v("。所返回的 "),a("code",[e._v("TokenStream")]),e._v(" 会被加到我们的 crate 用户所写的代码中，因此，当用户编译他们的 crate 时，他们会获取到我们所提供的额外功能。")]),e._v(" "),a("p",[e._v("你可能也注意到了，当调用 "),a("code",[e._v("parse_derive_input")]),e._v(" 或 "),a("code",[e._v("parse")]),e._v(" 失败时。在错误时 panic 对过程宏来说是必须的，因为 "),a("code",[e._v("proc_macro_derive")]),e._v(" 函数必须返回 "),a("code",[e._v("TokenStream")]),e._v(" 而不是 "),a("code",[e._v("Result")]),e._v("，以此来符合过程宏的 API。这里选择用 "),a("code",[e._v("unwrap")]),e._v(" 来简化了这个例子；在生产代码中，则应该通过 "),a("code",[e._v("panic!")]),e._v(" 或 "),a("code",[e._v("expect")]),e._v(" 来提供关于发生何种错误的更加明确的错误信息。")]),e._v(" "),a("p",[e._v("现在我们有了将注解的 Rust 代码从 "),a("code",[e._v("TokenStream")]),e._v(" 转换为 "),a("code",[e._v("DeriveInput")]),e._v(" 实例的代码，让我们来创建在注解类型上实现 "),a("code",[e._v("HelloMacro")]),e._v(" trait 的代码，如示例 19-33 所示。")]),e._v(" "),a("p",[a("span",{staticClass:"filename"},[e._v("文件名: hello_macro_derive/src/lib.rs")])]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('fn impl_hello_macro(ast: &syn::DeriveInput) -> TokenStream {\n    let name = &ast.ident;\n    let gen = quote! {\n        impl HelloMacro for #name {\n            fn hello_macro() {\n                println!("Hello, Macro! My name is {}", stringify!(#name));\n            }\n        }\n    };\n    gen.into()\n}\n')])])]),a("p",[a("span",{staticClass:"caption"},[e._v("示例 19-33: 使用解析过的 Rust 代码实现 "),a("code",[e._v("HelloMacro")]),e._v(" trait")])]),e._v(" "),a("p",[e._v("我们得到一个包含以 "),a("code",[e._v("ast.ident")]),e._v(" 作为注解类型名字（标识符）的 "),a("code",[e._v("Ident")]),e._v(" 结构体实例。示例 19-32 中的结构体表明当 "),a("code",[e._v("impl_hello_macro")]),e._v(" 函数运行于示例 19-30 中的代码上时 "),a("code",[e._v("ident")]),e._v(" 字段的值是 "),a("code",[e._v('"Pancakes"')]),e._v("。因此，示例 19-33 中 "),a("code",[e._v("name")]),e._v(" 变量会包含一个 "),a("code",[e._v("Ident")]),e._v(" 结构体的实例，当打印时，会是字符串 "),a("code",[e._v('"Pancakes"')]),e._v("，也就是示例 19-30 中结构体的名称。")]),e._v(" "),a("p",[a("code",[e._v("quote!")]),e._v(" 宏让我们可以编写希望返回的 Rust 代码。"),a("code",[e._v("quote!")]),e._v(" 宏执行的直接结果并不是编译器所期望的并需要转换为 "),a("code",[e._v("TokenStream")]),e._v("。为此需要调用 "),a("code",[e._v("into")]),e._v(" 方法，它会消费这个中间表示（intermediate representation，IR）并返回所需的 "),a("code",[e._v("TokenStream")]),e._v(" 类型值。")]),e._v(" "),a("p",[e._v("这个宏也提供了一些非常酷的模板机制；我们可以写 "),a("code",[e._v("#name")]),e._v(" ，然后 "),a("code",[e._v("quote!")]),e._v(" 会以名为 "),a("code",[e._v("name")]),e._v(" 的变量值来替换它。你甚至可以做一些类似常用宏那样的重复代码的工作。查阅 "),a("a",{attrs:{href:"https://docs.rs/quote",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("quote")]),e._v(" crate 的文档"),a("OutboundLink")],1),e._v(" 来获取详尽的介绍。")]),e._v(" "),a("p",[e._v("我们期望我们的过程式宏能够为通过 "),a("code",[e._v("#name")]),e._v(" 获取到的用户注解类型生成 "),a("code",[e._v("HelloMacro")]),e._v(" trait 的实现。该 trait 的实现有一个函数 "),a("code",[e._v("hello_macro")]),e._v(" ，其函数体包括了我们期望提供的功能：打印 "),a("code",[e._v("Hello, Macro! My name is")]),e._v(" 和注解的类型名。")]),e._v(" "),a("p",[e._v("此处所使用的 "),a("code",[e._v("stringify!")]),e._v(" 为 Rust 内置宏。其接收一个 Rust 表达式，如 "),a("code",[e._v("1 + 2")]),e._v(" ， 然后在编译时将表达式转换为一个字符串常量，如 "),a("code",[e._v('"1 + 2"')]),e._v(" 。这与 "),a("code",[e._v("format!")]),e._v(" 或 "),a("code",[e._v("println!")]),e._v(" 是不同的，它计算表达式并将结果转换为 "),a("code",[e._v("String")]),e._v(" 。有一种可能的情况是，所输入的 "),a("code",[e._v("#name")]),e._v(" 可能是一个需要打印的表达式，因此我们用 "),a("code",[e._v("stringify!")]),e._v(" 。 "),a("code",[e._v("stringify!")]),e._v(" 编译时也保留了一份将 "),a("code",[e._v("#name")]),e._v(" 转换为字符串之后的内存分配。")]),e._v(" "),a("p",[e._v("此时，"),a("code",[e._v("cargo build")]),e._v(" 应该都能成功编译 "),a("code",[e._v("hello_macro")]),e._v(" 和 "),a("code",[e._v("hello_macro_derive")]),e._v(" 。我们将这些 crate 连接到示例 19-38 的代码中来看看过程宏的行为！在 "),a("em",[e._v("projects")]),e._v(" 目录下用 "),a("code",[e._v("cargo new pancakes")]),e._v(" 命令新建一个二进制项目。需要将 "),a("code",[e._v("hello_macro")]),e._v(" 和 "),a("code",[e._v("hello_macro_derive")]),e._v(" 作为依赖加到 "),a("code",[e._v("pancakes")]),e._v(" 包的 "),a("em",[e._v("Cargo.toml")]),e._v("  文件中去。如果你正将 "),a("code",[e._v("hello_macro")]),e._v(" 和 "),a("code",[e._v("hello_macro_derive")]),e._v(" 的版本发布到 "),a("a",{attrs:{href:"https://crates.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("crates.io"),a("OutboundLink")],1),e._v(" 上，其应为正规依赖；如果不是，则可以像下面这样将其指定为 "),a("code",[e._v("path")]),e._v(" 依赖：")]),e._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[e._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[e._v("hello_macro")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key property"}},[e._v("path")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"../hello_macro"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[e._v("hello_macro_derive")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key property"}},[e._v("path")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"../hello_macro/hello_macro_derive"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("把示例 19-38 中的代码放在 "),a("em",[e._v("src/main.rs")]),e._v(" ，然后执行 "),a("code",[e._v("cargo run")]),e._v("：其应该打印 "),a("code",[e._v("Hello, Macro! My name is Pancakes!")]),e._v("。其包含了该过程宏中 "),a("code",[e._v("HelloMacro")]),e._v(" trait 的实现，而无需 "),a("code",[e._v("pancakes")]),e._v(" crate 实现它；"),a("code",[e._v("#[derive(HelloMacro)]")]),e._v(" 增加了该 trait 实现。")]),e._v(" "),a("p",[e._v("接下来，让我们探索一下其他类型的过程宏与自定义派生宏有何区别。")]),e._v(" "),a("h3",{attrs:{id:"类属性宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类属性宏"}},[e._v("#")]),e._v(" 类属性宏")]),e._v(" "),a("p",[e._v("类属性宏与自定义派生宏相似，不同于为 "),a("code",[e._v("derive")]),e._v(" 属性生成代码，它们允许你创建新的属性。它们也更为灵活；"),a("code",[e._v("derive")]),e._v(" 只能用于结构体和枚举；属性还可以用于其它的项，比如函数。作为一个使用类属性宏的例子，可以创建一个名为 "),a("code",[e._v("route")]),e._v(" 的属性用于注解 web 应用程序框架（web application framework）的函数：")]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('#[route(GET, "/")]\nfn index() {\n')])])]),a("p",[a("code",[e._v("#[route]")]),e._v(" 属性将由框架本身定义为一个过程宏。其宏定义的函数签名看起来像这样：")]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {\n")])])]),a("p",[e._v("这里有两个 "),a("code",[e._v("TokenStream")]),e._v(" 类型的参数；第一个用于属性内容本身，也就是 "),a("code",[e._v('GET, "/"')]),e._v(" 部分。第二个是属性所标记的项，在本例中，是 "),a("code",[e._v("fn index() {}")]),e._v(" 和剩下的函数体。")]),e._v(" "),a("p",[e._v("除此之外，类属性宏与自定义派生宏工作方式一致：创建 "),a("code",[e._v("proc-macro")]),e._v(" crate 类型的 crate 并实现希望生成代码的函数！")]),e._v(" "),a("h3",{attrs:{id:"类函数宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类函数宏"}},[e._v("#")]),e._v(" 类函数宏")]),e._v(" "),a("p",[e._v("类函数宏定义看起来像函数调用的宏。类似于 "),a("code",[e._v("macro_rules!")]),e._v("，它们比函数更灵活；例如，可以接受未知数量的参数。然而 "),a("code",[e._v("macro_rules!")]),e._v(" 宏只能使用之前 "),a("a",{attrs:{href:"#declarative-macros-with-macro_rules-for-general-metaprogramming"}},[e._v("“使用 "),a("code",[e._v("macro_rules!")]),e._v(" 的声明宏用于通用元编程”")]),e._v(" 介绍的类匹配的语法定义。类函数宏获取 "),a("code",[e._v("TokenStream")]),e._v(" 参数，其定义使用 Rust 代码操纵 "),a("code",[e._v("TokenStream")]),e._v("，就像另两种过程宏一样。一个类函数宏例子是可以像这样被调用的 "),a("code",[e._v("sql!")]),e._v(" 宏：")]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let sql = sql!(SELECT * FROM posts WHERE id=1);\n")])])]),a("p",[e._v("这个宏会解析其中的 SQL 语句并检查其是否是句法正确的，这是比 "),a("code",[e._v("macro_rules!")]),e._v(" 可以做到的更为复杂的处理。"),a("code",[e._v("sql!")]),e._v(" 宏应该被定义为如此：")]),e._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream {\n")])])]),a("p",[e._v("这类似于自定义派生宏的签名：获取括号中的 token，并返回希望生成的代码。")]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("好的！现在我们学习了 Rust 并不常用但在特定情况下你可能用得着的功能。我们介绍了很多复杂的主题，这样若你在错误信息提示或阅读他人代码时遇到他们，至少可以说之前已经见过这些概念和语法了。你可以使用本章作为一个解决方案的参考。")]),e._v(" "),a("p",[e._v("接下来，我们将再开始一个项目，将本书所学的所有内容付与实践！")])])}),[],!1,null,null,null);t.default=v.exports}}]);