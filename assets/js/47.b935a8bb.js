(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{526:function(t,n,s){"use strict";s.r(n);var a=s(4),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"定义模块来控制作用域与私有性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义模块来控制作用域与私有性"}},[t._v("#")]),t._v(" 定义模块来控制作用域与私有性")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch07-02-defining-modules-to-control-scope-and-privacy.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch07-02-defining-modules-to-control-scope-and-privacy.md"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("\ncommit 34b089627cca09a73ce92a052222304bff0056e3")])]),t._v(" "),s("p",[t._v("在本节，我们将讨论模块和其它一些关于模块系统的部分，如允许你命名项的 "),s("em",[t._v("路径")]),t._v("（"),s("em",[t._v("paths")]),t._v("）；用来将路径引入作用域的 "),s("code",[t._v("use")]),t._v(" 关键字；以及使项变为公有的 "),s("code",[t._v("pub")]),t._v(" 关键字。我们还将讨论 "),s("code",[t._v("as")]),t._v(" 关键字、外部包和 glob 运算符。现在，让我们把注意力放在模块上！")]),t._v(" "),s("p",[s("em",[t._v("模块")]),t._v(" 让我们可以将一个 crate 中的代码进行分组，以提高可读性与重用性。模块还可以控制项的 "),s("em",[t._v("私有性")]),t._v("，即项是可以被外部代码使用的（"),s("em",[t._v("public")]),t._v("），还是作为一个内部实现的内容，不能被外部代码使用（"),s("em",[t._v("private")]),t._v("）。")]),t._v(" "),s("p",[t._v("在餐饮业，餐馆中会有一些地方被称之为 "),s("em",[t._v("前台")]),t._v("（"),s("em",[t._v("front of house")]),t._v("），还有另外一些地方被称之为 "),s("em",[t._v("后台")]),t._v("（"),s("em",[t._v("back of house")]),t._v("）。前台是招待顾客的地方，在这里，店主可以为顾客安排座位，服务员接受顾客下单和付款，调酒师会制作饮品。后台则是由厨师工作的厨房，洗碗工的工作地点，以及经理做行政工作的地方组成。")]),t._v(" "),s("p",[t._v("我们可以将函数放置到嵌套的模块中，来使我们的 crate 结构与实际的餐厅结构相同。通过执行 "),s("code",[t._v("cargo new --lib restaurant")]),t._v("，来创建一个新的名为 "),s("code",[t._v("restaurant")]),t._v(" 的库。然后将示例 7-1 中所罗列出来的代码放入 "),s("em",[t._v("src/lib.rs")]),t._v(" 中，来定义一些模块和函数。")]),t._v(" "),s("p",[t._v("Filename: src/lib.rs")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("front_of_house")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("hosting")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_to_waitlist")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("seat_at_table")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("serving")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("take_order")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("server_order")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("take_payment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("span",{staticClass:"caption"},[t._v("示例 7-1：一个包含了其他内置了函数的模块的 "),s("code",[t._v("front_of_house")]),t._v(" 模块")])]),t._v(" "),s("p",[t._v("我们定义一个模块，是以 "),s("code",[t._v("mod")]),t._v(" 关键字为起始，然后指定模块的名字（本例中叫做 "),s("code",[t._v("front_of_house")]),t._v("），并且用花括号包围模块的主体。在模块内，我们还可以定义其他的模块，就像本例中的 "),s("code",[t._v("hosting")]),t._v(" 和 "),s("code",[t._v("serving")]),t._v(" 模块。模块还可以保存一些定义的其他项，比如结构体、枚举、常量、特性、或者函数。")]),t._v(" "),s("p",[t._v("通过使用模块，我们可以将相关的定义分组到一起，并指出他们为什么相关。程序员可以通过使用这段代码，更加容易地找到他们想要的定义，因为他们可以基于分组来对代码进行导航，而不需要阅读所有的定义。程序员向这段代码中添加一个新的功能时，他们也会知道代码应该放置在何处，可以保持程序的组织性。")]),t._v(" "),s("p",[t._v("在前面我们提到了，"),s("code",[t._v("src/main.rs")]),t._v(" 和 "),s("code",[t._v("src/lib.rs")]),t._v(" 叫做 crate 根。之所以这样叫它们是因为这两个文件的内容都分别在 crate 模块结构的根组成了一个名为 "),s("code",[t._v("crate")]),t._v(" 的模块，该结构被称为 "),s("em",[t._v("模块树")]),t._v("（"),s("em",[t._v("module tree")]),t._v("）。")]),t._v(" "),s("p",[t._v("示例 7-2 展示了示例 7-1 中的模块树的结构。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("crate\n └── front_of_house\n     ├── hosting\n     │   ├── add_to_waitlist\n     │   └── seat_at_table\n     └── serving\n         ├── take_order\n         ├── serve_order\n         └── take_payment\n")])])]),s("p",[s("span",{staticClass:"caption"},[t._v("示例 7-2: 示例 7-1 中代码的模块树")])]),t._v(" "),s("p",[t._v("这个树展示了一些模块是如何被嵌入到另一个模块的（例如，"),s("code",[t._v("hosting")]),t._v(" 嵌套在 "),s("code",[t._v("front_of_house")]),t._v(" 中）。这个树还展示了一些模块是互为 "),s("em",[t._v("兄弟")]),t._v("（"),s("em",[t._v("siblings")]),t._v("） 的，这意味着它们定义在同一模块中（"),s("code",[t._v("hosting")]),t._v(" 和 "),s("code",[t._v("serving")]),t._v(" 被一起定义在 "),s("code",[t._v("front_of_house")]),t._v(" 中）。继续沿用家庭关系的比喻，如果一个模块 A 被包含在模块 B 中，我们将模块 A 称为模块 B 的 "),s("em",[t._v("子")]),t._v("（"),s("em",[t._v("child")]),t._v("），模块 B 则是模块 A 的 "),s("em",[t._v("父")]),t._v("（"),s("em",[t._v("parent")]),t._v("）。注意，整个模块树都植根于名为 "),s("code",[t._v("crate")]),t._v(" 的隐式模块下。")]),t._v(" "),s("p",[t._v("这个模块树可能会令你想起电脑上文件系统的目录树；这是一个非常恰当的比喻！就像文件系统的目录，你可以使用模块来组织你的代码。并且，就像目录中的文件，我们需要一种方法来找到模块。")])])}),[],!1,null,null,null);n.default=e.exports}}]);