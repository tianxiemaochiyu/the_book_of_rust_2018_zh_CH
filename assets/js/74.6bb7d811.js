(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{553:function(t,r,e){"use strict";e.r(r);var s=e(4),_=Object(s.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"rust-中的函数式语言功能：迭代器与闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rust-中的函数式语言功能：迭代器与闭包"}},[t._v("#")]),t._v(" Rust 中的函数式语言功能：迭代器与闭包")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch13-00-functional-features.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch13-00-functional-features.md"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),e("p",[t._v("Rust 的设计灵感来源于很多现存的语言和技术。其中一个显著的影响就是 "),e("strong",[t._v("函数式编程")]),t._v("（"),e("em",[t._v("functional programming")]),t._v("）。函数式编程风格通常包含将函数作为参数值或其他函数的返回值、将函数赋值给变量以供之后执行等等。")]),t._v(" "),e("p",[t._v("本章我们不会讨论函数式编程是或不是什么的问题，而是展示 Rust 的一些在功能上与其他被认为是函数式语言类似的特性。")]),t._v(" "),e("p",[t._v("更具体的，我们将要涉及：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("闭包")]),t._v("（"),e("em",[t._v("Closures")]),t._v("），一个可以储存在变量里的类似函数的结构")]),t._v(" "),e("li",[e("strong",[t._v("迭代器")]),t._v("（"),e("em",[t._v("Iterators")]),t._v("），一种处理元素序列的方式")]),t._v(" "),e("li",[t._v("如何使用这些功能来改进第十二章的 I/O 项目。")]),t._v(" "),e("li",[t._v("这两个功能的性能。（"),e("strong",[t._v("剧透警告：")]),t._v(" 他们的速度超乎你的想象！）")])]),t._v(" "),e("p",[t._v("还有其它受函数式风格影响的 Rust 功能，比如模式匹配和枚举，这些已经在其他章节中讲到过了。掌握闭包和迭代器则是编写符合语言风格的高性能 Rust 代码的重要一环，所以我们将专门用一整章来讲解他们。")])])}),[],!1,null,null,null);r.default=_.exports}}]);