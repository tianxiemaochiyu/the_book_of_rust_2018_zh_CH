(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{520:function(t,e,a){"use strict";a.r(e);var r=a(4),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"枚举和模式匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举和模式匹配"}},[t._v("#")]),t._v(" 枚举和模式匹配")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch06-00-enums.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch06-00-enums.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit a5a03d8f61a5b2c2111b21031a3f526ef60844dd")])]),t._v(" "),a("p",[t._v("本章介绍 "),a("strong",[t._v("枚举")]),t._v("（"),a("em",[t._v("enumerations")]),t._v("），也被称作 "),a("em",[t._v("enums")]),t._v("。枚举允许你通过列举可能的 "),a("strong",[t._v("成员")]),t._v("（"),a("em",[t._v("variants")]),t._v("） 来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，我们会探索一个特别有用的枚举，叫做 "),a("code",[t._v("Option")]),t._v("，它代表一个值要么是某个值要么什么都不是。然后会讲到在 "),a("code",[t._v("match")]),t._v(" 表达式中用模式匹配，针对不同的枚举值编写相应要执行的代码。最后会介绍 "),a("code",[t._v("if let")]),t._v("，另一个简洁方便处理代码中枚举的结构。")]),t._v(" "),a("p",[t._v("枚举是一个很多语言都有的功能，不过不同语言中其功能各不相同。Rust 的枚举与 F#、OCaml 和 Haskell 这样的函数式编程语言中的 "),a("strong",[t._v("代数数据类型")]),t._v("（"),a("em",[t._v("algebraic data types")]),t._v("）最为相似。")])])}),[],!1,null,null,null);e.default=n.exports}}]);