(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{411:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"测试的组织结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试的组织结构"}},[t._v("#")]),t._v(" 测试的组织结构")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch11-03-test-organization.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch11-03-test-organization.md"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("\ncommit 4badf9a8574c12794795b05954baf5adc579fa90")])]),t._v(" "),e("p",[t._v("本章一开始就提到，测试是一个复杂的概念，而且不同的开发者也采用不同的技术和组织。Rust 社区倾向于根据测试的两个主要分类来考虑问题："),e("strong",[t._v("单元测试")]),t._v("（"),e("em",[t._v("unit tests")]),t._v("）与 "),e("strong",[t._v("集成测试")]),t._v("（"),e("em",[t._v("integration tests")]),t._v("）。单元测试倾向于更小而更集中，在隔离的环境中一次测试一个模块，或者是测试私有接口。而集成测试对于你的库来说则完全是外部的。它们与其他外部代码一样，通过相同的方式使用你的代码，只测试公有接口而且每个测试都有可能会测试多个模块。")]),t._v(" "),e("p",[t._v("为了保证你的库能够按照你的预期运行，从独立和整体的角度编写这两类测试都是非常重要的。")]),t._v(" "),e("h3",{attrs:{id:"单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),e("p",[t._v("单元测试的目的是在与其他部分隔离的环境中测试每一个单元的代码，以便于快速而准确的某个单元的代码功能是否符合预期。单元测试与他们要测试的代码共同存放在位于 "),e("em",[t._v("src")]),t._v(" 目录下相同的文件中。规范是在每个文件中创建包含测试函数的 "),e("code",[t._v("tests")]),t._v(" 模块，并使用 "),e("code",[t._v("cfg(test)")]),t._v(" 标注模块。")]),t._v(" "),e("h4",{attrs:{id:"测试模块和-cfg-test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试模块和-cfg-test"}},[t._v("#")]),t._v(" 测试模块和 "),e("code",[t._v("#[cfg(test)]")])]),t._v(" "),e("p",[t._v("测试模块的 "),e("code",[t._v("#[cfg(test)]")]),t._v(" 注解告诉 Rust 只在执行 "),e("code",[t._v("cargo test")]),t._v(" 时才编译和运行测试代码，而在运行 "),e("code",[t._v("cargo build")]),t._v(" 时不这么做。这在只希望构建库的时候可以节省编译时间，并且因为它们并没有包含测试，所以能减少编译产生的文件的大小。与之对应的集成测试因为位于另一个文件夹，所以它们并不需要 "),e("code",[t._v("#[cfg(test)]")]),t._v(" 注解。然而单元测试位于与源码相同的文件中，所以你需要使用 "),e("code",[t._v("#[cfg(test)]")]),t._v(" 来指定他们不应该被包含进编译结果中。")]),t._v(" "),e("p",[t._v("回忆本章第一部分新建的 "),e("code",[t._v("adder")]),t._v(" 项目吗，Cargo 为我们生成了如下代码：")]),t._v(" "),e("p",[e("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("it_works")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("上述代码就是自动生成的测试模块。"),e("code",[t._v("cfg")]),t._v(" 属性代表 "),e("em",[t._v("configuration")]),t._v(" ，它告诉 Rust 其之后的项只应该被包含进特定配置选项中。在这个例子中，配置选项是 "),e("code",[t._v("test")]),t._v("，即 Rust 所提供的用于编译和运行测试的配置选项。通过使用 "),e("code",[t._v("cfg")]),t._v(" 属性，Cargo 只会在我们主动使用 "),e("code",[t._v("cargo test")]),t._v(" 运行测试时才编译测试代码。需要编译的不仅仅有标注为 "),e("code",[t._v("#[test]")]),t._v(" 的函数之外，还包括测试模块中可能存在的帮助函数。")]),t._v(" "),e("h4",{attrs:{id:"测试私有函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试私有函数"}},[t._v("#")]),t._v(" 测试私有函数")]),t._v(" "),e("p",[t._v("测试社区中一直存在关于是否应该对私有函数直接进行测试的论战，而在其他语言中想要测试私有函数是一件困难的，甚至是不可能的事。不过无论你坚持哪种测试意识形态，Rust 的私有性规则确实允许你测试私有函数。考虑示例 11-12 中带有私有函数 "),e("code",[t._v("internal_adder")]),t._v(" 的代码：")]),t._v(" "),e("p",[e("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[t._v("# "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("internal_adder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("internal_adder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("internal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("internal_adder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("span",{staticClass:"caption"},[t._v("示例 11-12：测试私有函数")])]),t._v(" "),e("p",[t._v("注意 "),e("code",[t._v("internal_adder")]),t._v(" 函数并没有标记为 "),e("code",[t._v("pub")]),t._v("，不过因为测试也不过是 Rust 代码同时 "),e("code",[t._v("tests")]),t._v(" 也仅仅是另一个模块，我们完全可以在测试中导入和调用 "),e("code",[t._v("internal_adder")]),t._v("。如果你并不认为应该测试私有函数，Rust 也不会强迫你这么做。")]),t._v(" "),e("h3",{attrs:{id:"集成测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集成测试"}},[t._v("#")]),t._v(" 集成测试")]),t._v(" "),e("p",[t._v("在 Rust 中，集成测试对于你需要测试的库来说完全是外部的。同其他使用库的代码一样使用库文件，也就是说它们只能调用一部分库中的公有 API 。集成测试的目的是测试库的多个部分能否一起正常工作。一些单独能正确运行的代码单元集成在一起也可能会出现问题，所以集成测试的覆盖率也是很重要的。为了创建集成测试，你需要先创建一个 "),e("em",[t._v("tests")]),t._v(" 目录。")]),t._v(" "),e("h4",{attrs:{id:"tests-目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tests-目录"}},[t._v("#")]),t._v(" "),e("em",[t._v("tests")]),t._v(" 目录")]),t._v(" "),e("p",[t._v("为了编写集成测试，需要在项目根目录创建一个 "),e("em",[t._v("tests")]),t._v(" 目录，与 "),e("em",[t._v("src")]),t._v(" 同级。Cargo 知道如何去寻找这个目录中的集成测试文件。接着可以随意在这个目录中创建任意多的测试文件，Cargo 会将每一个文件当作单独的 crate 来编译。")]),t._v(" "),e("p",[t._v("让我们来创建一个集成测试。保留示例 11-12 中 "),e("em",[t._v("src/lib.rs")]),t._v(" 的代码。创建一个 "),e("em",[t._v("tests")]),t._v(" 目录，新建一个文件 "),e("em",[t._v("tests/integration_test.rs")]),t._v("，并输入示例 11-13 中的代码。")]),t._v(" "),e("p",[e("span",{staticClass:"filename"},[t._v("文件名: tests/integration_test.rs")])]),t._v(" "),e("div",{staticClass:"language-rust,ignore extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("use adder;\n\n#[test]\nfn it_adds_two() {\n    assert_eq!(4, adder::add_two(2));\n}\n")])])]),e("p",[e("span",{staticClass:"caption"},[t._v("示例 11-13：一个 "),e("code",[t._v("adder")]),t._v(" crate 中函数的集成测试")])]),t._v(" "),e("p",[t._v("与单元测试不同，我们需要在文件顶部添加 "),e("code",[t._v("use adder")]),t._v("。这是因为每一个 "),e("code",[t._v("tests")]),t._v(" 目录中的测试文件都是完全独立的 crate，所以需要在每一个文件中导入库。")]),t._v(" "),e("p",[t._v("并不需要将 "),e("em",[t._v("tests/integration_test.rs")]),t._v(" 中的任何代码标注为 "),e("code",[t._v("#[cfg(test)]")]),t._v("。 "),e("code",[t._v("tests")]),t._v(" 文件夹在 Cargo 中是一个特殊的文件夹， Cargo 只会在运行 "),e("code",[t._v("cargo test")]),t._v(" 时编译这个目录中的文件。现在就运行 "),e("code",[t._v("cargo test")]),t._v(" 试试：")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running target/debug/deps/adder-abcabcabc\n\nrunning 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/integration_test-ce99bcc2479f4607\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),e("p",[t._v("现在有了三个部分的输出：单元测试、集成测试和文档测试。第一部分单元测试与我们之前见过的一样：每个单元测试一行（示例 11-12 中有一个叫做 "),e("code",[t._v("internal")]),t._v(" 的测试），接着是一个单元测试的摘要行。")]),t._v(" "),e("p",[t._v("集成测试部分以行 "),e("code",[t._v("Running target/debug/deps/integration-test-ce99bcc2479f4607")]),t._v("（在输出最后的哈希值可能不同）开头。接下来每一行是一个集成测试中的测试函数，以及一个位于 "),e("code",[t._v("Doc-tests adder")]),t._v(" 部分之前的集成测试的摘要行。")]),t._v(" "),e("p",[t._v("我们已经知道，单元测试函数越多，单元测试部分的结果行就会越多。同样的，在集成文件中增加的测试函数越多，也会在对应的测试结果部分增加越多的结果行。每一个集成测试文件有对应的测试结果部分，所以如果在 "),e("em",[t._v("tests")]),t._v(" 目录中增加更多文件，测试结果中就会有更多集成测试结果部分。")]),t._v(" "),e("p",[t._v("我们仍然可以通过指定测试函数的名称作为 "),e("code",[t._v("cargo test")]),t._v(" 的参数来运行特定集成测试。也可以使用 "),e("code",[t._v("cargo test")]),t._v(" 的 "),e("code",[t._v("--test")]),t._v(" 后跟文件的名称来运行某个特定集成测试文件中的所有测试：")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ cargo test --test integration_test\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running target/debug/integration_test-952a27e0126bb565\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),e("p",[t._v("这个命令只运行了 "),e("em",[t._v("tests")]),t._v(" 目录中我们指定的文件 "),e("code",[t._v("integration_test.rs")]),t._v(" 中的测试。")]),t._v(" "),e("h4",{attrs:{id:"集成测试中的子模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集成测试中的子模块"}},[t._v("#")]),t._v(" 集成测试中的子模块")]),t._v(" "),e("p",[t._v("随着集成测试的增加，你可能希望在 "),e("code",[t._v("tests")]),t._v(" 目录增加更多文件以便更好的组织他们，例如根据测试的功能来将测试分组。正如我们之前提到的，每一个 "),e("em",[t._v("tests")]),t._v(" 目录中的文件都被编译为单独的 crate。")]),t._v(" "),e("p",[t._v("将每个集成测试文件当作其自己的 crate 来对待，这更有助于创建单独的作用域，这种单独的作用域能提供更类似与最终使用者使用 crate 的环境。然而，正如你在第七章中学习的如何将代码分为模块和文件的知识，"),e("em",[t._v("tests")]),t._v(" 目录中的文件不能像 "),e("em",[t._v("src")]),t._v(" 中的文件那样共享相同的行为。")]),t._v(" "),e("p",[t._v("当你有一些在多个集成测试文件都会用到的帮助函数，而你尝试按照第七章 “将模块移动到其他文件” 部分的步骤将他们提取到一个通用的模块中时， "),e("em",[t._v("tests")]),t._v(" 目录中不同文件的行为就会显得很明显。例如，如果我们可以创建 一个"),e("em",[t._v("tests/common.rs")]),t._v(" 文件并创建一个名叫 "),e("code",[t._v("setup")]),t._v(" 的函数，我们希望这个函数能被多个测试文件的测试函数调用：")]),t._v(" "),e("p",[e("span",{staticClass:"filename"},[t._v("文件名: tests/common.rs")])]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("setup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编写特定库测试所需的代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("如果再次运行测试，将会在测试结果中看到一个新的对应 "),e("em",[t._v("common.rs")]),t._v(" 文件的测试结果部分，即便这个文件并没有包含任何测试函数，也没有任何地方调用了 "),e("code",[t._v("setup")]),t._v(" 函数：")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("running 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/common-b8b07b6f1be2db70\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/integration_test-d993c68b431d39df\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),e("p",[t._v("我们并不想要"),e("code",[t._v("common")]),t._v(" 出现在测试结果中显示 "),e("code",[t._v("running 0 tests")]),t._v(" 。我们只是希望其能被其他多个集成测试文件中调用罢了。")]),t._v(" "),e("p",[t._v("为了不让 "),e("code",[t._v("common")]),t._v(" 出现在测试输出中，我们将创建 "),e("em",[t._v("tests/common/mod.rs")]),t._v(" ，而不是创建 "),e("em",[t._v("tests/common.rs")]),t._v(" 。这是一种 Rust 的命名规范，这样命名告诉 Rust 不要将 "),e("code",[t._v("common")]),t._v(" 看作一个集成测试文件。将 "),e("code",[t._v("setup")]),t._v(" 函数代码移动到 "),e("em",[t._v("tests/common/mod.rs")]),t._v(" 并删除 "),e("em",[t._v("tests/common.rs")]),t._v(" 文件之后，测试输出中将不会出现这一部分。"),e("em",[t._v("tests")]),t._v(" 目录中的子目录不会被作为单独的 crate 编译或作为一个测试结果部分出现在测试输出中。")]),t._v(" "),e("p",[t._v("一旦拥有了 "),e("em",[t._v("tests/common/mod.rs")]),t._v("，就可以将其作为模块以便在任何集成测试文件中使用。这里是一个 "),e("em",[t._v("tests/integration_test.rs")]),t._v(" 中调用 "),e("code",[t._v("setup")]),t._v(" 函数的 "),e("code",[t._v("it_adds_two")]),t._v(" 测试的例子：")]),t._v(" "),e("p",[e("span",{staticClass:"filename"},[t._v("文件名: tests/integration_test.rs")])]),t._v(" "),e("div",{staticClass:"language-rust,ignore extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("use adder;\n\nmod common;\n\n#[test]\nfn it_adds_two() {\n    common::setup();\n    assert_eq!(4, adder::add_two(2));\n}\n")])])]),e("p",[t._v("注意 "),e("code",[t._v("mod common;")]),t._v(" 声明与示例 7-25 中展示的模块声明相同。接着在测试函数中就可以调用 "),e("code",[t._v("common::setup()")]),t._v(" 了。")]),t._v(" "),e("h4",{attrs:{id:"二进制-crate-的集成测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制-crate-的集成测试"}},[t._v("#")]),t._v(" 二进制 crate 的集成测试")]),t._v(" "),e("p",[t._v("如果项目是二进制 crate 并且只包含 "),e("em",[t._v("src/main.rs")]),t._v(" 而没有 "),e("em",[t._v("src/lib.rs")]),t._v("，这样就不可能在 "),e("em",[t._v("tests")]),t._v(" 目录创建集成测试并使用 "),e("code",[t._v("extern crate")]),t._v(" 导入 "),e("em",[t._v("src/main.rs")]),t._v(" 中定义的函数。只有库 crate 才会向其他 crate 暴露了可供调用和使用的函数；二进制 crate 只意在单独运行。")]),t._v(" "),e("p",[t._v("为什么 Rust 二进制项目的结构明确采用 "),e("em",[t._v("src/main.rs")]),t._v(" 调用 "),e("em",[t._v("src/lib.rs")]),t._v(" 中的逻辑的方式？因为通过这种结构，集成测试 "),e("strong",[t._v("就可以")]),t._v(" 通过 "),e("code",[t._v("extern crate")]),t._v(" 测试库 crate 中的主要功能了，而如果这些重要的功能没有问题的话，"),e("em",[t._v("src/main.rs")]),t._v(" 中的少量代码也就会正常工作且不需要测试。")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("Rust 的测试功能提供了一个确保即使你改变了函数的实现方式，也能继续以期望的方式运行的途径。单元测试独立地验证库的不同部分，也能够测试私有函数实现细节。集成测试则检查多个部分是否能结合起来正确地工作，并像其他外部代码那样测试库的公有 API。即使 Rust 的类型系统和所有权规则可以帮助避免一些 bug，不过测试对于减少代码中不符合期望行为的逻辑 bug 仍然是很重要的。")]),t._v(" "),e("p",[t._v("让我们将本章和其他之前章节所学的知识组合起来，在下一章一起编写一个项目！")])])}),[],!1,null,null,null);s.default=n.exports}}]);