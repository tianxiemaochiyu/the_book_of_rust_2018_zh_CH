(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{528:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"使用-use-关键字将名称引入作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-use-关键字将名称引入作用域"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("use")]),t._v(" 关键字将名称引入作用域")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch07-04-bringing-paths-into-scope-with-the-use-keyword.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch07-04-bringing-paths-into-scope-with-the-use-keyword.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit 6d3e76820418f2d2bb203233c61d90390b5690f1")])]),t._v(" "),a("p",[t._v("到目前为止，似乎我们编写的用于调用函数的路径都很冗长且重复，并不方便。例如，示例 7-7 中，无论我们选择 "),a("code",[t._v("add_to_waitlist")]),t._v(" 函数的绝对路径还是相对路径，每次我们想要调用 "),a("code",[t._v("add_to_waitlist")]),t._v(" 时，都必须指定"),a("code",[t._v("front_of_house")]),t._v(" 和 "),a("code",[t._v("hosting")]),t._v("。幸运的是，有一种方法可以简化这个过程。我们可以一次性将路径引入作用域，然后使用 "),a("code",[t._v("use")]),t._v(" 关键字调用该路径中的项，就如同它们是本地项一样。")]),t._v(" "),a("p",[t._v("在示例 7-11 中，我们将 "),a("code",[t._v("crate::front_of_house::hosting")]),t._v(" 模块引入了 "),a("code",[t._v("eat_at_restaurant")]),t._v(" 函数的作用域，而我们只需要指定 "),a("code",[t._v("hosting::add_to_waitlist")]),t._v(" 即可在 "),a("code",[t._v("eat_at_restaurant")]),t._v(" 中调用 "),a("code",[t._v("add_to_waitlist")]),t._v(" 函数。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("front_of_house")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("hosting")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("front_of_house"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("eat_at_restaurant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-11: 使用 "),a("code",[t._v("use")]),t._v(" 将模块引入作用域")])]),t._v(" "),a("p",[t._v("在作用域中增加 "),a("code",[t._v("use")]),t._v(" 和路径类似于在文件系统中创建软连接（符号连接，symbolic link）。通过在 crate 根增加 "),a("code",[t._v("use crate::front_of_house::hosting")]),t._v("，现在 "),a("code",[t._v("hosting")]),t._v(" 在作用域中就是有效的名称了，如同 "),a("code",[t._v("hosting")]),t._v(" 模块被定义于 crate 根一样。通过 "),a("code",[t._v("use")]),t._v(" 引入作用域的路径也会检查私有性，同其它路径一样。")]),t._v(" "),a("p",[t._v("你还可以使用 "),a("code",[t._v("use")]),t._v(" 和相对路径来将一个项引入作用域。示例 7-12 展示了如何指定相对路径来取得与示例 7-11 中一样的行为。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("front_of_house")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("hosting")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("front_of_house"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("eat_at_restaurant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-12: 使用 "),a("code",[t._v("use")]),t._v(" 和相对路径将模块引入作用域")])]),t._v(" "),a("h3",{attrs:{id:"创建惯用的-use-路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建惯用的-use-路径"}},[t._v("#")]),t._v(" 创建惯用的 "),a("code",[t._v("use")]),t._v(" 路径")]),t._v(" "),a("p",[t._v("在示例 7-11 中，你可能会比较疑惑，为什么我们是指定 "),a("code",[t._v("use crate::front_of_house::hosting")]),t._v(" ，然后在 "),a("code",[t._v("eat_at_restaurant")]),t._v(" 中调用 "),a("code",[t._v("hosting::add_to_waitlist")]),t._v(" ，而不是通过指定一直到 "),a("code",[t._v("add_to_waitlist")]),t._v(" 函数的 "),a("code",[t._v("use")]),t._v(" 路径来得到相同的结果，如示例 7-13 所示。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("front_of_house")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("hosting")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("front_of_house"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("add_to_waitlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("eat_at_restaurant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-13: 使用 "),a("code",[t._v("use")]),t._v(" 将 "),a("code",[t._v("add_to_waitlist")]),t._v(" 函数引入作用域，这并不符合习惯")])]),t._v(" "),a("p",[t._v("虽然示例 7-11 和 7-13 都完成了相同的任务，但示例 7-11 是使用 "),a("code",[t._v("use")]),t._v(" 将函数引入作用域的习惯用法。要想使用 "),a("code",[t._v("use")]),t._v(" 将函数的父模块引入作用域，我们必须在调用函数时指定父模块，这样可以清晰地表明函数不是在本地定义的，同时使完整路径的重复度最小化。示例 7-13 中的代码不清楚 "),a("code",[t._v("add_to_waitlist")]),t._v(" 是在哪里被定义的。")]),t._v(" "),a("p",[t._v("另一方面，使用 "),a("code",[t._v("use")]),t._v(" 引入结构体、枚举和其他项时，习惯是指定它们的完整路径。示例 7-14 展示了将 "),a("code",[t._v("HashMap")]),t._v(" 结构体引入二进制 crate 作用域的习惯用法。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("collections"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-14: 将 "),a("code",[t._v("HashMap")]),t._v(" 引入作用域的习惯用法")])]),t._v(" "),a("p",[t._v("这种习惯用法背后没有什么硬性要求：它只是一种惯例，人们已经习惯了以这种方式阅读和编写 Rust 代码。")]),t._v(" "),a("p",[t._v("这个习惯用法有一个例外，那就是我们想使用 "),a("code",[t._v("use")]),t._v(" 语句将两个具有相同名称的项带入作用域，因为 Rust 不允许这样做。示例 7-15 展示了如何将两个具有相同名称但不同父模块的 "),a("code",[t._v("Result")]),t._v(" 类型引入作用域，以及如何引用它们。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("function1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n#     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("function2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n#     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-15: 使用父模块将两个具有相同名称的类型引入同一作用域")])]),t._v(" "),a("p",[t._v("如你所见，使用父模块可以区分这两个 "),a("code",[t._v("Result")]),t._v(" 类型。如果我们是指定 "),a("code",[t._v("use std::fmt::Result")]),t._v(" 和 "),a("code",[t._v("use std::io::Result")]),t._v("，我们将在同一作用域拥有了两个 "),a("code",[t._v("Result")]),t._v(" 类型，当我们使用 "),a("code",[t._v("Result")]),t._v(" 时，Rust 则不知道我们要用的是哪个。")]),t._v(" "),a("h3",{attrs:{id:"使用-as-关键字提供新的名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-as-关键字提供新的名称"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("as")]),t._v(" 关键字提供新的名称")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("use")]),t._v(" 将两个同名类型引入同一作用域这个问题还有另一个解决办法：在这个类型的路径后面，我们使用 "),a("code",[t._v("as")]),t._v(" 指定一个新的本地名称或者别名。示例 7-16 展示了另一个编写示例 7-15 中代码的方法，通过 "),a("code",[t._v("as")]),t._v(" 重命名其中一个 "),a("code",[t._v("Result")]),t._v(" 类型。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IoResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("function1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n#     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("function2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IoResult")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n#     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-16: 使用 "),a("code",[t._v("as")]),t._v(" 关键字重命名引入作用域的类型")])]),t._v(" "),a("p",[t._v("在第二个 "),a("code",[t._v("use")]),t._v(" 语句中，我们选择 "),a("code",[t._v("IoResult")]),t._v(" 作为 "),a("code",[t._v("std::io::Result")]),t._v(" 的新名称，它与从 "),a("code",[t._v("std::fmt")]),t._v(" 引入作用域的 "),a("code",[t._v("Result")]),t._v(" 并不冲突。示例 7-15 和示例 7-16 都是惯用的，如何选择都取决于你!")]),t._v(" "),a("h3",{attrs:{id:"使用-pub-use-重导出名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-pub-use-重导出名称"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("pub use")]),t._v(" 重导出名称")]),t._v(" "),a("p",[t._v("当使用 "),a("code",[t._v("use")]),t._v(" 关键字将名称导入作用域时，在新作用域中可用的名称是私有的。如果为了让调用你编写的代码的代码能够像在自己的作用域内引用这些类型，可以结合 "),a("code",[t._v("pub")]),t._v(" 和 "),a("code",[t._v("use")]),t._v("。这个技术被称为 “"),a("em",[t._v("重导出")]),t._v("（"),a("em",[t._v("re-exporting")]),t._v("）”，因为这样做将项引入作用域并同时使其可供其他代码引入自己的作用域。")]),t._v(" "),a("p",[t._v("示例 7-17 展示了将示例 7-11 中使用 "),a("code",[t._v("use")]),t._v(" 的根模块变为 "),a("code",[t._v("pub use")]),t._v(" 的版本的代码。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("front_of_house")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("hosting")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("front_of_house"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("eat_at_restaurant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hosting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_to_waitlist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-17: 通过 "),a("code",[t._v("pub use")]),t._v(" 使名称可引入任何代码的作用域中")])]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("pub use")]),t._v("，现在可以通过新路径 "),a("code",[t._v("hosting::add_to_waitlist")]),t._v(" 来调用 "),a("code",[t._v("add_to_waitlist")]),t._v(" 函数。如果没有指定 "),a("code",[t._v("pub use")]),t._v("，"),a("code",[t._v("eat_at_restaurant")]),t._v(" 函数可以在其作用域中调用 "),a("code",[t._v("hosting::add_to_waitlist")]),t._v("，但外部代码则不允许使用这个新路径。")]),t._v(" "),a("p",[t._v("当你的代码的内部结构与调用你的代码的程序员的思考领域不同时，重导出会很有用。例如，在这个餐馆的比喻中，经营餐馆的人会想到“前台”和“后台”。但顾客在光顾一家餐馆时，可能不会以这些术语来考虑餐馆的各个部分。使用 "),a("code",[t._v("pub use")]),t._v("，我们可以使用一种结构编写代码，却将不同的结构形式暴露出来。这样做使我们的库井井有条，方便开发这个库的程序员和调用这个库的程序员之间组织起来。")]),t._v(" "),a("h3",{attrs:{id:"使用外部包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用外部包"}},[t._v("#")]),t._v(" 使用外部包")]),t._v(" "),a("p",[t._v("在第二章中我们编写了一个猜猜看游戏。那个项目使用了一个外部包，"),a("code",[t._v("rand")]),t._v("，来生成随机数。为了在项目中使用 "),a("code",[t._v("rand")]),t._v("，在 "),a("em",[t._v("Cargo.toml")]),t._v(" 中加入了如下行：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: Cargo.toml")])]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("rand")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.5.5"')]),t._v("\n")])])]),a("p",[t._v("在 "),a("em",[t._v("Cargo.toml")]),t._v(" 中加入 "),a("code",[t._v("rand")]),t._v(" 依赖告诉了 Cargo 要从 "),a("a",{attrs:{href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("crates.io"),a("OutboundLink")],1),t._v(" 下载 "),a("code",[t._v("rand")]),t._v(" 和其依赖，并使其可在项目代码中使用。")]),t._v(" "),a("p",[t._v("接着，为了将 "),a("code",[t._v("rand")]),t._v(" 定义引入项目包的作用域，我们加入一行 "),a("code",[t._v("use")]),t._v(" 起始的包名，它以 "),a("code",[t._v("rand")]),t._v(" 包名开头并列出了需要引入作用域的项。回忆一下第二章的 “生成一个随机数” 部分，我们曾将 "),a("code",[t._v("Rng")]),t._v(" trait 引入作用域并调用了 "),a("code",[t._v("rand::thread_rng")]),t._v(" 函数：")]),t._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("use rand::Rng;\n\nfn main() {\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n}\n")])])]),a("p",[a("a",{attrs:{href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("crates.io"),a("OutboundLink")],1),t._v(" 上有很多 Rust 社区成员发布的包，将其引入你自己的项目都需要一道相同的步骤：在 "),a("em",[t._v("Cargo.toml")]),t._v(" 列出它们并通过 "),a("code",[t._v("use")]),t._v(" 将其中定义的项引入项目包的作用域中。")]),t._v(" "),a("p",[t._v("注意标准库（"),a("code",[t._v("std")]),t._v("）对于你的包来说也是外部 crate。因为标准库随 Rust 语言一同分发，无需修改 "),a("em",[t._v("Cargo.toml")]),t._v(" 来引入 "),a("code",[t._v("std")]),t._v("，不过需要通过 "),a("code",[t._v("use")]),t._v(" 将标准库中定义的项引入项目包的作用域中来引用它们，比如我们使用的 "),a("code",[t._v("HashMap")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("collections"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这是一个以标准库 crate 名 "),a("code",[t._v("std")]),t._v(" 开头的绝对路径。")]),t._v(" "),a("h3",{attrs:{id:"嵌套路径来消除大量的-use-行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套路径来消除大量的-use-行"}},[t._v("#")]),t._v(" 嵌套路径来消除大量的 "),a("code",[t._v("use")]),t._v(" 行")]),t._v(" "),a("p",[t._v("当需要引入很多定义于相同包或相同模块的项时，为每一项单独列出一行会占用源码很大的空间。例如猜猜看章节示例 2-4 中有两行 "),a("code",[t._v("use")]),t._v(" 语句都从 "),a("code",[t._v("std")]),t._v(" 引入项到作用域：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("cmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ---snip---")]),t._v("\n")])])]),a("p",[t._v("相反，我们可以使用嵌套路径将相同的项在一行中引入作用域。这么做需要指定路径的相同部分，接着是两个冒号，接着是大括号中的各自不同的路径部分，如示例 7-18 所示。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("cmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ---snip---")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-18: 指定嵌套的路径在一行中将多个带有相同前缀的项引入作用域")])]),t._v(" "),a("p",[t._v("在较大的程序中，使用嵌套路径从相同包或模块中引入很多项，可以显著减少所需的独立 "),a("code",[t._v("use")]),t._v(" 语句的数量！")]),t._v(" "),a("p",[t._v("我们可以在路径的任何层级使用嵌套路径，这在组合两个共享子路径的 "),a("code",[t._v("use")]),t._v(" 语句时非常有用。例如，示例 7-19 中展示了两个 "),a("code",[t._v("use")]),t._v(" 语句：一个将 "),a("code",[t._v("std::io")]),t._v(" 引入作用域，另一个将 "),a("code",[t._v("std::io::Write")]),t._v(" 引入作用域：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-19: 通过两行 "),a("code",[t._v("use")]),t._v(" 语句引入两个路径，其中一个是另一个的子路径")])]),t._v(" "),a("p",[t._v("两个路径的相同部分是 "),a("code",[t._v("std::io")]),t._v("，这正是第一个路径。为了在一行 "),a("code",[t._v("use")]),t._v(" 语句中引入这两个路径，可以在嵌套路径中使用 "),a("code",[t._v("self")]),t._v("，如示例 7-20 所示。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 7-20: 将示例 7-19 中部分重复的路径合并为一个 "),a("code",[t._v("use")]),t._v(" 语句")])]),t._v(" "),a("p",[t._v("这一行便将 "),a("code",[t._v("std::io")]),t._v(" 和 "),a("code",[t._v("std::io::Write")]),t._v(" 同时引入作用域。")]),t._v(" "),a("h3",{attrs:{id:"通过-glob-运算符将所有的公有定义引入作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-glob-运算符将所有的公有定义引入作用域"}},[t._v("#")]),t._v(" 通过 glob 运算符将所有的公有定义引入作用域")]),t._v(" "),a("p",[t._v("如果希望将一个路径下 "),a("strong",[t._v("所有")]),t._v(" 公有项引入作用域，可以指定路径后跟 "),a("code",[t._v("*")]),t._v("，glob 运算符：")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("collections"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这个 "),a("code",[t._v("use")]),t._v(" 语句将 "),a("code",[t._v("std::collections")]),t._v(" 中定义的所有公有项引入当前作用域。使用 glob 运算符时请多加小心！Glob 会使得我们难以推导作用域中有什么名称和它们是在何处定义的。")]),t._v(" "),a("p",[t._v("glob 运算符经常用于测试模块 "),a("code",[t._v("tests")]),t._v(" 中，这时会将所有内容引入作用域；我们将在第十一章 “如何编写测试” 部分讲解。glob 运算符有时也用于 prelude 模式；查看 "),a("a",{attrs:{href:"https://doc.rust-lang.org/std/prelude/index.html#other-preludes",target:"_blank",rel:"noopener noreferrer"}},[t._v("标准库中的文档"),a("OutboundLink")],1),t._v(" 了解这个模式的更多细节。")])])}),[],!1,null,null,null);s.default=e.exports}}]);