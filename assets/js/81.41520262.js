(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{428:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"使用box-t-指向堆上的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用box-t-指向堆上的数据"}},[s._v("#")]),s._v(" 使用"),a("code",[s._v("Box <T>")]),s._v("指向堆上的数据")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch15-01-box.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("ch15-01-box.md"),a("OutboundLink")],1),s._v(" > "),a("br"),s._v("\ncommit a203290c640a378453261948b3fee4c4c6eb3d0f")])]),s._v(" "),a("p",[s._v("最简单直接的智能指针是 "),a("em",[s._v("box")]),s._v("，其类型是 "),a("code",[s._v("Box<T>")]),s._v("。 box 允许你将一个值放在堆上而不是栈上。留在栈上的则是指向堆数据的指针。如果你想回顾一下栈与堆的区别请参考第四章。")]),s._v(" "),a("p",[s._v("除了数据被储存在堆上而不是栈上之外，box 没有性能损失。不过也没有很多额外的功能。它们多用于如下场景：")]),s._v(" "),a("ul",[a("li",[s._v("当有一个在编译时未知大小的类型，而又想要在需要确切大小的上下文中使用这个类型值的时候")]),s._v(" "),a("li",[s._v("当有大量数据并希望在确保数据不被拷贝的情况下转移所有权的时候")]),s._v(" "),a("li",[s._v("当希望拥有一个值并只关心它的类型是否实现了特定 trait 而不是其具体类型的时候")])]),s._v(" "),a("p",[s._v("我们会在 “box 允许创建递归类型” 部分展示第一种场景。在第二种情况中，转移大量数据的所有权可能会花费很长的时间，因为数据在栈上进行了拷贝。为了改善这种情况下的性能，可以通过 box 将这些数据储存在堆上。接着，只有少量的指针数据在栈上被拷贝。第三种情况被称为 "),a("strong",[s._v("trait 对象")]),s._v("（"),a("em",[s._v("trait object")]),s._v("），第十七章刚好有一整个部分 “为使用不同类型的值而设计的 trait 对象” 专门讲解这个主题。所以这里所学的内容会在第十七章再次用上！")]),s._v(" "),a("h3",{attrs:{id:"使用-box-t-在堆上储存数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-box-t-在堆上储存数据"}},[s._v("#")]),s._v(" 使用 "),a("code",[s._v("Box<T>")]),s._v(" 在堆上储存数据")]),s._v(" "),a("p",[s._v("在讨论 "),a("code",[s._v("Box<T>")]),s._v(" 的用例之前，让我们熟悉一下语法以及如何与储存在 "),a("code",[s._v("Box<T>")]),s._v(" 中的值进行交互。")]),s._v(" "),a("p",[s._v("示例 15-1 展示了如何使用 box 在堆上储存一个 "),a("code",[s._v("i32")]),s._v("：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-1：使用 box 在堆上储存一个 "),a("code",[s._v("i32")]),s._v(" 值")])]),s._v(" "),a("p",[s._v("这里定义了变量 "),a("code",[s._v("b")]),s._v("，其值是一个指向被分配在堆上的值 "),a("code",[s._v("5")]),s._v(" 的 "),a("code",[s._v("Box")]),s._v("。这个程序会打印出 "),a("code",[s._v("b = 5")]),s._v("；在这个例子中，我们可以像数据是储存在栈上的那样访问 box 中的数据。正如任何拥有数据所有权的值那样，当像 "),a("code",[s._v("b")]),s._v(" 这样的 box 在 "),a("code",[s._v("main")]),s._v(" 的末尾离开作用域时，它将被释放。这个释放过程作用于 box 本身（位于栈上）和它所指向的数据（位于堆上）。")]),s._v(" "),a("p",[s._v("将一个单独的值存放在堆上并不是很有意义，所以像示例 15-1 这样单独使用 box 并不常见。将像单个 "),a("code",[s._v("i32")]),s._v(" 这样的值储存在栈上，也就是其默认存放的地方在大部分使用场景中更为合适。让我们看看一个不使用 box 时无法定义的类型的例子。")]),s._v(" "),a("h3",{attrs:{id:"box-允许创建递归类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#box-允许创建递归类型"}},[s._v("#")]),s._v(" Box 允许创建递归类型")]),s._v(" "),a("p",[s._v("Rust 需要在编译时知道类型占用多少空间。一种无法在编译时知道大小的类型是 "),a("strong",[s._v("递归类型")]),s._v("（"),a("em",[s._v("recursive type")]),s._v("），其值的一部分可以是相同类型的另一个值。这种值的嵌套理论上可以无限的进行下去，所以 Rust 不知道递归类型需要多少空间。不过 box 有一个已知的大小，所以通过在循环类型定义中插入 box，就可以创建递归类型了。")]),s._v(" "),a("p",[s._v("让我们探索一下 "),a("em",[s._v("cons list")]),s._v("，一个函数式编程语言中的常见类型，来展示这个（递归类型）概念。除了递归之外，我们将要定义的 cons list 类型是很直白的，所以这个例子中的概念，在任何遇到更为复杂的涉及到递归类型的场景时都很实用。")]),s._v(" "),a("h4",{attrs:{id:"cons-list-的更多内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cons-list-的更多内容"}},[s._v("#")]),s._v(" cons list 的更多内容")]),s._v(" "),a("p",[a("em",[s._v("cons list")]),s._v(" 是一个来源于 Lisp 编程语言及其方言的数据结构。在 Lisp 中，"),a("code",[s._v("cons")]),s._v(' 函数（“construct function" 的缩写）利用两个参数来构造一个新的列表，他们通常是一个单独的值和另一个列表。')]),s._v(" "),a("p",[s._v("cons 函数的概念涉及到更常见的函数式编程术语；“将 "),a("em",[s._v("x")]),s._v(" 与 "),a("em",[s._v("y")]),s._v(" 连接” 通常意味着构建一个新的容器而将 "),a("em",[s._v("x")]),s._v(" 的元素放在新容器的开头，其后则是容器 "),a("em",[s._v("y")]),s._v(" 的元素。")]),s._v(" "),a("p",[s._v("cons list 的每一项都包含两个元素：当前项的值和下一项。其最后一项值包含一个叫做 "),a("code",[s._v("Nil")]),s._v(" 的值且没有下一项。cons list 通过递归调用 "),a("code",[s._v("cons")]),s._v(" 函数产生。代表递归的终止条件（base case）的规范名称是 "),a("code",[s._v("Nil")]),s._v("，它宣布列表的终止。注意这不同于第六章中的 “null” 或 “nil” 的概念，他们代表无效或缺失的值。")]),s._v(" "),a("p",[s._v("注意虽然函数式编程语言经常使用 cons list，但是它并不是一个 Rust 中常见的类型。大部分在 Rust 中需要列表的时候，"),a("code",[s._v("Vec<T>")]),s._v(" 是一个更好的选择。其他更为复杂的递归数据类型 "),a("strong",[s._v("确实")]),s._v(" 在 Rust 的很多场景中很有用，不过通过以 cons list 作为开始，我们可以探索如何使用 box 毫不费力的定义一个递归数据类型。")]),s._v(" "),a("p",[s._v("示例 15-2 包含一个 cons list 的枚举定义。注意这还不能编译因为这个类型没有已知的大小，之后我们会展示：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum List {\n    Cons(i32, List),\n    Nil,\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-2：第一次尝试定义一个代表 "),a("code",[s._v("i32")]),s._v(" 值的 cons list 数据结构的枚举")])]),s._v(" "),a("blockquote",[a("p",[s._v("注意：出于示例的需要我们选择实现一个只存放 "),a("code",[s._v("i32")]),s._v(" 值的 cons list。也可以用泛型，正如第十章讲到的，来定义一个可以存放任何类型值的 cons list 类型。")])]),s._v(" "),a("p",[s._v("使用这个 cons list 来储存列表 "),a("code",[s._v("1, 2, 3")]),s._v(" 将看起来如示例 15-3 所示：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("use crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Cons(2, Cons(3, Nil)));\n}\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-3：使用 "),a("code",[s._v("List")]),s._v(" 枚举储存列表 "),a("code",[s._v("1, 2, 3")])])]),s._v(" "),a("p",[s._v("第一个 "),a("code",[s._v("Cons")]),s._v(" 储存了 "),a("code",[s._v("1")]),s._v(" 和另一个 "),a("code",[s._v("List")]),s._v(" 值。这个 "),a("code",[s._v("List")]),s._v(" 是另一个包含 "),a("code",[s._v("2")]),s._v(" 的 "),a("code",[s._v("Cons")]),s._v(" 值和下一个 "),a("code",[s._v("List")]),s._v(" 值。接着又有另一个存放了 "),a("code",[s._v("3")]),s._v(" 的 "),a("code",[s._v("Cons")]),s._v(" 值和最后一个值为 "),a("code",[s._v("Nil")]),s._v(" 的 "),a("code",[s._v("List")]),s._v("，非递归成员代表了列表的结尾。")]),s._v(" "),a("p",[s._v("如果尝试编译示例 15-3 的代码，会得到如示例 15-4 所示的错误：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("error[E0072]: recursive type `List` has infinite size\n --\x3e src/main.rs:1:1\n  |\n1 | enum List {\n  | ^^^^^^^^^ recursive type has infinite size\n2 |     Cons(i32, List),\n  |               ----- recursive without indirection\n  |\n  = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to\n  make `List` representable\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-4：尝试定义一个递归枚举时得到的错误")])]),s._v(" "),a("p",[s._v("这个错误表明这个类型 “有无限的大小”。其原因是 "),a("code",[s._v("List")]),s._v(" 的一个成员被定义为是递归的：它直接存放了另一个相同类型的值。这意味着 Rust 无法计算为了存放 "),a("code",[s._v("List")]),s._v(" 值到底需要多少空间。让我们一点一点来看：首先了解一下 Rust 如何决定需要多少空间来存放一个非递归类型。")]),s._v(" "),a("h3",{attrs:{id:"计算非递归类型的大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算非递归类型的大小"}},[s._v("#")]),s._v(" 计算非递归类型的大小")]),s._v(" "),a("p",[s._v("回忆一下第六章讨论枚举定义时示例 6-2 中定义的 "),a("code",[s._v("Message")]),s._v(" 枚举：")]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Message")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Quit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Move")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ChangeColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("当 Rust 需要知道要为 "),a("code",[s._v("Message")]),s._v(" 值分配多少空间时，它可以检查每一个成员并发现 "),a("code",[s._v("Message::Quit")]),s._v(" 并不需要任何空间，"),a("code",[s._v("Message::Move")]),s._v(" 需要足够储存两个 "),a("code",[s._v("i32")]),s._v(" 值的空间，依此类推。因此，"),a("code",[s._v("Message")]),s._v(" 值所需的空间等于储存其最大成员的空间大小。")]),s._v(" "),a("p",[s._v("与此相对当 Rust 编译器检查像示例 15-2 中的 "),a("code",[s._v("List")]),s._v(" 这样的递归类型时会发生什么呢。编译器尝试计算出储存一个 "),a("code",[s._v("List")]),s._v(" 枚举需要多少内存，并开始检查 "),a("code",[s._v("Cons")]),s._v(" 成员，那么 "),a("code",[s._v("Cons")]),s._v(" 需要的空间等于 "),a("code",[s._v("i32")]),s._v(" 的大小加上 "),a("code",[s._v("List")]),s._v(" 的大小。为了计算 "),a("code",[s._v("List")]),s._v(" 需要多少内存，它检查其成员，从 "),a("code",[s._v("Cons")]),s._v(" 成员开始。"),a("code",[s._v("Cons")]),s._v("成员储存了一个 "),a("code",[s._v("i32")]),s._v(" 值和一个"),a("code",[s._v("List")]),s._v("值，这样的计算将无限进行下去，如图 15-1 所示：")]),s._v(" "),a("img",{staticClass:"center",staticStyle:{width:"50%"},attrs:{alt:"An infinite Cons list",src:"img/trpl15-01.svg"}}),s._v(" "),a("p",[a("span",{staticClass:"caption"},[s._v("图 15-1：一个包含无限个 "),a("code",[s._v("Cons")]),s._v(" 成员的无限 "),a("code",[s._v("List")])])]),s._v(" "),a("h3",{attrs:{id:"使用-box-t-给递归类型一个已知的大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-box-t-给递归类型一个已知的大小"}},[s._v("#")]),s._v(" 使用 "),a("code",[s._v("Box<T>")]),s._v(" 给递归类型一个已知的大小")]),s._v(" "),a("p",[s._v("Rust 无法计算出要为定义为递归的类型分配多少空间，所以编译器给出了示例 15-4 中的错误。这个错误也包括了有用的建议：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to\n  make `List` representable\n")])])]),a("p",[s._v("在建议中，“indirection” 意味着不同于直接储存一个值，我们将间接的储存一个指向值的指针。")]),s._v(" "),a("p",[s._v("因为 "),a("code",[s._v("Box<T>")]),s._v(" 是一个指针，我们总是知道它需要多少空间：指针的大小并不会根据其指向的数据量而改变。这意味着可以将 "),a("code",[s._v("Box")]),s._v(" 放入 "),a("code",[s._v("Cons")]),s._v(" 成员中而不是直接存放另一个 "),a("code",[s._v("List")]),s._v(" 值。"),a("code",[s._v("Box")]),s._v(" 会指向另一个位于堆上的 "),a("code",[s._v("List")]),s._v(" 值，而不是存放在 "),a("code",[s._v("Cons")]),s._v(" 成员中。从概念上讲，我们仍然有一个通过在其中 “存放” 其他列表创建的列表，不过现在实现这个概念的方式更像是一个项挨着另一项，而不是一项包含另一项。")]),s._v(" "),a("p",[s._v("我们可以修改示例 15-2 中 "),a("code",[s._v("List")]),s._v(" 枚举的定义和示例 15-3 中对 "),a("code",[s._v("List")]),s._v(" 的应用，如示例 15-65 所示，这是可以编译的：")]),s._v(" "),a("p",[a("span",{staticClass:"filename"},[s._v("文件名: src/main.rs")])]),s._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("List")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("crate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[s._v("示例 15-5：为了拥有已知大小而使用 "),a("code",[s._v("Box<T>")]),s._v(" 的 "),a("code",[s._v("List")]),s._v(" 定义")])]),s._v(" "),a("p",[a("code",[s._v("Cons")]),s._v(" 成员将会需要一个 "),a("code",[s._v("i32")]),s._v(" 的大小加上储存 box 指针数据的空间。"),a("code",[s._v("Nil")]),s._v(" 成员不储存值，所以它比 "),a("code",[s._v("Cons")]),s._v(" 成员需要更少的空间。现在我们知道了任何 "),a("code",[s._v("List")]),s._v(" 值最多需要一个 "),a("code",[s._v("i32")]),s._v(" 加上 box 指针数据的大小。通过使用 box ，打破了这无限递归的连锁，这样编译器就能够计算出储存 "),a("code",[s._v("List")]),s._v(" 值需要的大小了。图 15-2 展示了现在 "),a("code",[s._v("Cons")]),s._v(" 成员看起来像什么：")]),s._v(" "),a("img",{staticClass:"center",attrs:{alt:"A finite Cons list",src:"img/trpl15-02.svg"}}),s._v(" "),a("p",[a("span",{staticClass:"caption"},[s._v("图 15-2：因为 "),a("code",[s._v("Cons")]),s._v(" 存放一个 "),a("code",[s._v("Box")]),s._v(" 所以 "),a("code",[s._v("List")]),s._v(" 不是无限大小的了")])]),s._v(" "),a("p",[s._v("box 只提供了间接存储和堆分配；他们并没有任何其他特殊的功能，比如我们将会见到的其他智能指针。它们也没有这些特殊功能带来的性能损失，所以他们可以用于像 cons list 这样间接存储是唯一所需功能的场景。我们还将在第十七章看到 box 的更多应用场景。")]),s._v(" "),a("p",[a("code",[s._v("Box<T>")]),s._v(" 类型是一个智能指针，因为它实现了 "),a("code",[s._v("Deref")]),s._v(" trait，它允许 "),a("code",[s._v("Box<T>")]),s._v(" 值被当作引用对待。当 "),a("code",[s._v("Box<T>")]),s._v(" 值离开作用域时，由于 "),a("code",[s._v("Box<T>")]),s._v(" 类型 "),a("code",[s._v("Drop")]),s._v(" trait 的实现，box 所指向的堆数据也会被清除。让我们更详细的探索一下这两个 trait。这两个 trait 对于在本章余下讨论的其他智能指针所提供的功能中，将会更为重要。")])])}),[],!1,null,null,null);t.default=e.exports}}]);