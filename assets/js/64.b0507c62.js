(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{544:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"如何编写测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何编写测试"}},[t._v("#")]),t._v(" 如何编写测试")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch11-01-writing-tests.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch11-01-writing-tests.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit cc6a1ef2614aa94003566027b285b249ccf961fa")])]),t._v(" "),a("p",[t._v("Rust 中的测试函数是用来验证非测试代码是否按照期望的方式运行的。测试函数体通常执行如下三种操作：")]),t._v(" "),a("ol",[a("li",[t._v("设置任何所需的数据或状态")]),t._v(" "),a("li",[t._v("运行需要测试的代码")]),t._v(" "),a("li",[t._v("断言其结果是我们所期望的")])]),t._v(" "),a("p",[t._v("让我们看看 Rust 提供的专门用来编写测试的功能："),a("code",[t._v("test")]),t._v(" 属性、一些宏和 "),a("code",[t._v("should_panic")]),t._v(" 属性。")]),t._v(" "),a("h3",{attrs:{id:"测试函数剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试函数剖析"}},[t._v("#")]),t._v(" 测试函数剖析")]),t._v(" "),a("p",[t._v("作为最简单例子，Rust 中的测试就是一个带有 "),a("code",[t._v("test")]),t._v(" 属性注解的函数。属性（attribute）是关于 Rust 代码片段的元数据；第五章中结构体中用到的 "),a("code",[t._v("derive")]),t._v(" 属性就是一个例子。为了将一个函数变成测试函数，需要在 "),a("code",[t._v("fn")]),t._v(" 行之前加上 "),a("code",[t._v("#[test]")]),t._v("。当使用 "),a("code",[t._v("cargo test")]),t._v(" 命令运行测试时，Rust 会构建一个测试执行程序用来调用标记了 "),a("code",[t._v("test")]),t._v(" 属性的函数，并报告每一个测试是通过还是失败。")]),t._v(" "),a("p",[t._v("第七章当使用 Cargo 新建一个库项目时，它会自动为我们生成一个测试模块和一个测试函数。这有助于我们开始编写测试，因为这样每次开始新项目时不必去查找测试函数的具体结构和语法了。当然你也可以额外增加任意多的测试函数以及测试模块！")]),t._v(" "),a("p",[t._v("我们会通过实验那些自动生成的测试模版而不是实际编写测试代码来探索测试如何工作的一些方面。接着，我们会写一些真正的测试，调用我们编写的代码并断言他们的行为的正确性。")]),t._v(" "),a("p",[t._v("让我们创建一个新的库项目 "),a("code",[t._v("adder")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo new adder --lib\n     Created library `adder` project\n$ cd adder\n")])])]),a("p",[t._v("adder 库中 "),a("code",[t._v("src/lib.rs")]),t._v(" 的内容应该看起来如示例 11-1 所示：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("it_works")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-1：由 "),a("code",[t._v("cargo new")]),t._v(" 自动生成的测试模块和函数")])]),t._v(" "),a("p",[t._v("现在让我们暂时忽略 "),a("code",[t._v("tests")]),t._v(" 模块和 "),a("code",[t._v("#[cfg(test)]")]),t._v(" 注解，并只关注函数来了解其如何工作。注意 "),a("code",[t._v("fn")]),t._v(" 行之前的 "),a("code",[t._v("#[test]")]),t._v("：这个属性表明这是一个测试函数，这样测试执行者就知道将其作为测试处理。因为也可以在 "),a("code",[t._v("tests")]),t._v(" 模块中拥有非测试的函数来帮助我们建立通用场景或进行常见操作，所以需要使用 "),a("code",[t._v("#[test]")]),t._v(" 属性标明哪些函数是测试。")]),t._v(" "),a("p",[t._v("函数体通过使用 "),a("code",[t._v("assert_eq!")]),t._v(" 宏来断言 2 加 2 等于 4。一个典型的测试的格式，就是像这个例子中的断言一样。接下来运行就可以看到测试通过。")]),t._v(" "),a("p",[a("code",[t._v("cargo test")]),t._v(" 命令会运行项目中所有的测试，如示例 11-2 所示：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.22 secs\n     Running target/debug/deps/adder-ce99bcc2479f4607\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-2：运行自动生成测试的输出")])]),t._v(" "),a("p",[t._v("Cargo 编译并运行了测试。在 "),a("code",[t._v("Compiling")]),t._v("、"),a("code",[t._v("Finished")]),t._v(" 和 "),a("code",[t._v("Running")]),t._v(" 这几行之后，可以看到 "),a("code",[t._v("running 1 test")]),t._v(" 这一行。下一行显示了生成的测试函数的名称，它是 "),a("code",[t._v("it_works")]),t._v("，以及测试的运行结果，"),a("code",[t._v("ok")]),t._v("。接着可以看到全体测试运行结果的摘要："),a("code",[t._v("test result: ok.")]),t._v(" 意味着所有测试都通过了。"),a("code",[t._v("1 passed; 0 failed")]),t._v(" 表示通过或失败的测试数量。")]),t._v(" "),a("p",[t._v("因为之前我们并没有将任何测试标记为忽略，所以摘要中会显示 "),a("code",[t._v("0 ignored")]),t._v("。我们也没有过滤需要运行的测试，所以摘要中会显示"),a("code",[t._v("0 filtered out")]),t._v("。在下一部分 "),a("RouterLink",{attrs:{to:"/ch11-02-running-tests.html#controlling-how-tests-are-run"}},[t._v("“控制测试如何运行”")]),t._v(" 会讨论忽略和过滤测试。")],1),t._v(" "),a("p",[a("code",[t._v("0 measured")]),t._v(" 统计是针对性能测试的。性能测试（benchmark tests）在编写本书时，仍只能用于 Rust 开发版（nightly Rust）。请查看 "),a("a",{attrs:{href:"https://doc.rust-lang.org/unstable-book/library-features/test.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("性能测试的文档"),a("OutboundLink")],1),t._v(" 了解更多。")]),t._v(" "),a("p",[t._v("测试输出中的以 "),a("code",[t._v("Doc-tests adder")]),t._v(" 开头的这一部分是所有文档测试的结果。我们现在并没有任何文档测试，不过 Rust 会编译任何在 API 文档中的代码示例。这个功能帮助我们使文档和代码保持同步！在第十四章的 "),a("RouterLink",{attrs:{to:"/ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests"}},[t._v("“文档注释作为测试”")]),t._v(" 部分会讲到如何编写文档测试。现在我们将忽略 "),a("code",[t._v("Doc-tests")]),t._v(" 部分的输出。")],1),t._v(" "),a("p",[t._v("让我们改变测试的名称并看看这如何改变测试的输出。给 "),a("code",[t._v("it_works")]),t._v(" 函数起个不同的名字，比如 "),a("code",[t._v("exploration")]),t._v("，像这样：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("exploration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("并再次运行 "),a("code",[t._v("cargo test")]),t._v("。现在输出中将出现 "),a("code",[t._v("exploration")]),t._v(" 而不是 "),a("code",[t._v("it_works")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::exploration ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("让我们增加另一个测试，不过这一次是一个会失败的测试！当测试函数中出现 panic 时测试就失败了。每一个测试都在一个新线程中运行，当主线程发现测试线程异常了，就将对应测试标记为失败。第九章讲到了最简单的造成 panic 的方法：调用 "),a("code",[t._v("panic!")]),t._v(" 宏。写入新测试 "),a("code",[t._v("another")]),t._v(" 后， "),a("code",[t._v("src/lib.rs")]),t._v(" 现在看起来如示例 11-3 所示：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust,panics extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# fn main() {}\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn exploration() {\n        assert_eq!(2 + 2, 4);\n    }\n\n    #[test]\n    fn another() {\n        panic!("Make this test fail");\n    }\n}\n')])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-3：增加第二个因调用了 "),a("code",[t._v("panic!")]),t._v(" 而失败的测试")])]),t._v(" "),a("p",[t._v("再次 "),a("code",[t._v("cargo test")]),t._v(" 运行测试。输出应该看起来像示例 11-4，它表明 "),a("code",[t._v("exploration")]),t._v(" 测试通过了而 "),a("code",[t._v("another")]),t._v(" 失败了：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 2 tests\ntest tests::exploration ... ok\ntest tests::another ... FAILED\n\nfailures:\n\n---- tests::another stdout ----\nthread 'tests::another' panicked at 'Make this test fail', src/lib.rs:10:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nfailures:\n    tests::another\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-4：一个测试通过和一个测试失败的测试结果")])]),t._v(" "),a("p",[a("code",[t._v("test tests::another")]),t._v(" 这一行是 "),a("code",[t._v("FAILED")]),t._v(" 而不是 "),a("code",[t._v("ok")]),t._v(" 了。在单独测试结果和摘要之间多了两个新的部分：第一个部分显示了测试失败的详细原因。在这个例子中，"),a("code",[t._v("another")]),t._v(" 因为在"),a("em",[t._v("src/lib.rs")]),t._v(" 的第 10 行 "),a("code",[t._v("panicked at 'Make this test fail'")]),t._v(" 而失败。下一部分列出了所有失败的测试，这在有很多测试和很多失败测试的详细输出时很有帮助。我们可以通过使用失败测试的名称来只运行这个测试，以便调试；下一部分 "),a("RouterLink",{attrs:{to:"/ch11-02-running-tests.html#controlling-how-tests-are-run"}},[t._v("“控制测试如何运行”")]),t._v(" 会讲到更多运行测试的方法。")],1),t._v(" "),a("p",[t._v("最后是摘要行：总体上讲，测试结果是 "),a("code",[t._v("FAILED")]),t._v("。有一个测试通过和一个测试失败。")]),t._v(" "),a("p",[t._v("现在我们见过不同场景中测试结果是什么样子的了，再来看看除 "),a("code",[t._v("panic!")]),t._v(" 之外的一些在测试中有帮助的宏吧。")]),t._v(" "),a("h3",{attrs:{id:"使用-assert-宏来检查结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-assert-宏来检查结果"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("assert!")]),t._v(" 宏来检查结果")]),t._v(" "),a("p",[a("code",[t._v("assert!")]),t._v(" 宏由标准库提供，在希望确保测试中一些条件为 "),a("code",[t._v("true")]),t._v(" 时非常有用。需要向 "),a("code",[t._v("assert!")]),t._v(" 宏提供一个求值为布尔值的参数。如果值是 "),a("code",[t._v("true")]),t._v("，"),a("code",[t._v("assert!")]),t._v(" 什么也不做，同时测试会通过。如果值为 "),a("code",[t._v("false")]),t._v("，"),a("code",[t._v("assert!")]),t._v(" 调用 "),a("code",[t._v("panic!")]),t._v(" 宏，这会导致测试失败。"),a("code",[t._v("assert!")]),t._v(" 宏帮助我们检查代码是否以期望的方式运行。")]),t._v(" "),a("p",[t._v("回忆一下第五章中，示例 5-15 中有一个 "),a("code",[t._v("Rectangle")]),t._v(" 结构体和一个 "),a("code",[t._v("can_hold")]),t._v(" 方法，在示例 11-5 中再次使用他们。将他们放进 "),a("em",[t._v("src/lib.rs")]),t._v(" 并使用 "),a("code",[t._v("assert!")]),t._v(" 宏编写一些测试。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Rectangle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("can_hold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-5：第五章中 "),a("code",[t._v("Rectangle")]),t._v(" 结构体和其 "),a("code",[t._v("can_hold")]),t._v(" 方法")])]),t._v(" "),a("p",[a("code",[t._v("can_hold")]),t._v(" 方法返回一个布尔值，这意味着它完美符合 "),a("code",[t._v("assert!")]),t._v(" 宏的使用场景。在示例 11-6 中，让我们编写一个 "),a("code",[t._v("can_hold")]),t._v(" 方法的测试来作为练习，这里创建一个长为 8 宽为 7 的 "),a("code",[t._v("Rectangle")]),t._v(" 实例，并假设它可以放得下另一个长为 5 宽为 1 的 "),a("code",[t._v("Rectangle")]),t._v(" 实例：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("larger_can_hold_smaller")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" larger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" smaller "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("larger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("can_hold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("smaller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-6：一个 "),a("code",[t._v("can_hold")]),t._v(" 的测试，检查一个较大的矩形确实能放得下一个较小的矩形")])]),t._v(" "),a("p",[t._v("注意在 "),a("code",[t._v("tests")]),t._v(" 模块中新增加了一行："),a("code",[t._v("use super::*;")]),t._v("。"),a("code",[t._v("tests")]),t._v(" 是一个普通的模块，它遵循第七章 "),a("RouterLink",{attrs:{to:"/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html"}},[t._v("“路径用于引用模块树中的项”")]),t._v(" 部分介绍的可见性规则。因为这是一个内部模块，要测试外部模块中的代码，需要将其引入到内部模块的作用域中。这里选择使用 glob 全局导入，以便在 "),a("code",[t._v("tests")]),t._v(" 模块中使用所有在外部模块定义的内容。")],1),t._v(" "),a("p",[t._v("我们将测试命名为 "),a("code",[t._v("larger_can_hold_smaller")]),t._v("，并创建所需的两个 "),a("code",[t._v("Rectangle")]),t._v(" 实例。接着调用 "),a("code",[t._v("assert!")]),t._v(" 宏并传递 "),a("code",[t._v("larger.can_hold(&smaller)")]),t._v(" 调用的结果作为参数。这个表达式预期会返回 "),a("code",[t._v("true")]),t._v("，所以测试应该通过。让我们拭目以待！")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::larger_can_hold_smaller ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("它确实通过了！再来增加另一个测试，这一回断言一个更小的矩形不能放下一个更大的矩形：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("larger_can_hold_smaller")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("smaller_cannot_hold_larger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" larger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" smaller "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("smaller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("can_hold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("larger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("因为这里 "),a("code",[t._v("can_hold")]),t._v(" 函数的正确结果是 "),a("code",[t._v("false")]),t._v(" ，我们需要将这个结果取反后传递给 "),a("code",[t._v("assert!")]),t._v(" 宏。因此 "),a("code",[t._v("can_hold")]),t._v(" 返回 "),a("code",[t._v("false")]),t._v(" 时测试就会通过：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 2 tests\ntest tests::smaller_cannot_hold_larger ... ok\ntest tests::larger_can_hold_smaller ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("两个通过的测试！现在让我们看看如果引入一个 bug 的话测试结果会发生什么。将 "),a("code",[t._v("can_hold")]),t._v(" 方法中比较长度时本应使用大于号的地方改成小于号：")]),t._v(" "),a("div",{staticClass:"language-rust,not_desired_behavior extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# fn main() {}\n# #[derive(Debug)]\n# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n// --snip--\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width < other.width && self.height > other.height\n    }\n}\n")])])]),a("p",[t._v("现在运行测试会产生：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 2 tests\ntest tests::smaller_cannot_hold_larger ... ok\ntest tests::larger_can_hold_smaller ... FAILED\n\nfailures:\n\n---- tests::larger_can_hold_smaller stdout ----\nthread 'tests::larger_can_hold_smaller' panicked at 'assertion failed:\nlarger.can_hold(&smaller)', src/lib.rs:22:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nfailures:\n    tests::larger_can_hold_smaller\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("我们的测试捕获了 bug！因为 "),a("code",[t._v("larger.length")]),t._v(" 是 8 而 "),a("code",[t._v("smaller.length")]),t._v(" 是 5，"),a("code",[t._v("can_hold")]),t._v(" 中的长度比较现在因为 8 不小于 5 而返回 "),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"使用-assert-eq-和-assert-ne-宏来测试相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-assert-eq-和-assert-ne-宏来测试相等"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("assert_eq!")]),t._v(" 和 "),a("code",[t._v("assert_ne!")]),t._v(" 宏来测试相等")]),t._v(" "),a("p",[t._v("测试功能的一个常用方法是将需要测试代码的值与期望值做比较，并检查是否相等。可以通过向 "),a("code",[t._v("assert!")]),t._v(" 宏传递一个使用 "),a("code",[t._v("==")]),t._v(" 运算符的表达式来做到。不过这个操作实在是太常见了，以至于标准库提供了一对宏来更方便的处理这些操作 —— "),a("code",[t._v("assert_eq!")]),t._v(" 和 "),a("code",[t._v("assert_ne!")]),t._v("。这两个宏分别比较两个值是相等还是不相等。当断言失败时他们也会打印出这两个值具体是什么，以便于观察测试 "),a("strong",[t._v("为什么")]),t._v(" 失败，而 "),a("code",[t._v("assert!")]),t._v(" 只会打印出它从 "),a("code",[t._v("==")]),t._v(" 表达式中得到了 "),a("code",[t._v("false")]),t._v(" 值，而不是导致 "),a("code",[t._v("false")]),t._v(" 的两个值。")]),t._v(" "),a("p",[t._v("示例 11-7 中，让我们编写一个对其参数加二并返回结果的函数 "),a("code",[t._v("add_two")]),t._v("。接着使用 "),a("code",[t._v("assert_eq!")]),t._v(" 宏测试这个函数。")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_two")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("it_adds_two")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_two")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-7：使用 "),a("code",[t._v("assert_eq!")]),t._v(" 宏测试 "),a("code",[t._v("add_two")]),t._v(" 函数")])]),t._v(" "),a("p",[t._v("测试通过了！")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("传递给 "),a("code",[t._v("assert_eq!")]),t._v(" 宏的第一个参数 "),a("code",[t._v("4")]),t._v(" ，等于调用 "),a("code",[t._v("add_two(2)")]),t._v(" 的结果。测试中的这一行 "),a("code",[t._v("test tests::it_adds_two ... ok")]),t._v(" 中 "),a("code",[t._v("ok")]),t._v(" 表明测试通过！")]),t._v(" "),a("p",[t._v("在代码中引入一个 bug 来看看使用 "),a("code",[t._v("assert_eq!")]),t._v(" 的测试失败是什么样的。修改 "),a("code",[t._v("add_two")]),t._v(" 函数的实现使其加 3：")]),t._v(" "),a("div",{staticClass:"language-rust,not_desired_behavior extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# fn main() {}\npub fn add_two(a: i32) -> i32 {\n    a + 3\n}\n")])])]),a("p",[t._v("再次运行测试：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::it_adds_two ... FAILED\n\nfailures:\n\n---- tests::it_adds_two stdout ----\nthread 'tests::it_adds_two' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', src/lib.rs:11:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nfailures:\n    tests::it_adds_two\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("测试捕获到了 bug！"),a("code",[t._v("it_adds_two")]),t._v(" 测试失败，显示信息 "),a("code",[t._v("assertion failed: `(left == right)`")]),t._v(" 并表明 "),a("code",[t._v("left")]),t._v(" 是 "),a("code",[t._v("4")]),t._v(" 而 "),a("code",[t._v("right")]),t._v(" 是 "),a("code",[t._v("5")]),t._v("。这个信息有助于我们开始调试：它说 "),a("code",[t._v("assert_eq!")]),t._v(" 的 "),a("code",[t._v("left")]),t._v(" 参数是 "),a("code",[t._v("4")]),t._v("，而 "),a("code",[t._v("right")]),t._v(" 参数，也就是 "),a("code",[t._v("add_two(2)")]),t._v(" 的结果，是 "),a("code",[t._v("5")]),t._v("。")]),t._v(" "),a("p",[t._v("需要注意的是，在一些语言和测试框架中，断言两个值相等的函数的参数叫做 "),a("code",[t._v("expected")]),t._v(" 和 "),a("code",[t._v("actual")]),t._v("，而且指定参数的顺序是很关键的。然而在 Rust 中，他们则叫做 "),a("code",[t._v("left")]),t._v(" 和 "),a("code",[t._v("right")]),t._v("，同时指定期望的值和被测试代码产生的值的顺序并不重要。这个测试中的断言也可以写成 "),a("code",[t._v("assert_eq!(add_two(2), 4)")]),t._v("，这时失败信息会变成 "),a("code",[t._v("assertion failed: `(left == right)`")]),t._v(" 其中 "),a("code",[t._v("left")]),t._v(" 是 "),a("code",[t._v("5")]),t._v(" 而 "),a("code",[t._v("right")]),t._v(" 是 "),a("code",[t._v("4")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("assert_ne!")]),t._v(" 宏在传递给它的两个值不相等时通过，而在相等时失败。在代码按预期运行，我们不确定值 "),a("strong",[t._v("会")]),t._v(" 是什么，不过能确定值绝对 "),a("strong",[t._v("不会")]),t._v(" 是什么的时候，这个宏最有用处。例如，如果一个函数保证会以某种方式改变其输出，不过这种改变方式是由运行测试时是星期几来决定的，这时最好的断言可能就是函数的输出不等于其输入。")]),t._v(" "),a("p",[a("code",[t._v("assert_eq!")]),t._v(" 和 "),a("code",[t._v("assert_ne!")]),t._v(" 宏在底层分别使用了 "),a("code",[t._v("==")]),t._v(" 和 "),a("code",[t._v("!=")]),t._v("。当断言失败时，这些宏会使用调试格式打印出其参数，这意味着被比较的值必需实现了 "),a("code",[t._v("PartialEq")]),t._v(" 和 "),a("code",[t._v("Debug")]),t._v(" trait。所有的基本类型和大部分标准库类型都实现了这些 trait。对于自定义的结构体和枚举，需要实现 "),a("code",[t._v("PartialEq")]),t._v(" 才能断言他们的值是否相等。需要实现 "),a("code",[t._v("Debug")]),t._v(" 才能在断言失败时打印他们的值。因为这两个 trait 都是派生 trait，如第五章示例 5-12 所提到的，通常可以直接在结构体或枚举上添加 "),a("code",[t._v("#[derive(PartialEq, Debug)]")]),t._v(" 注解。附录 C "),a("RouterLink",{attrs:{to:"/appendix-03-derivable-traits.html"}},[t._v("“可派生 trait”")]),t._v(" 中有更多关于这些和其他派生 trait 的详细信息。")],1),t._v(" "),a("h3",{attrs:{id:"自定义失败信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义失败信息"}},[t._v("#")]),t._v(" 自定义失败信息")]),t._v(" "),a("p",[t._v("你也可以向 "),a("code",[t._v("assert!")]),t._v("、"),a("code",[t._v("assert_eq!")]),t._v(" 和 "),a("code",[t._v("assert_ne!")]),t._v(" 宏传递一个可选的失败信息参数，可以在测试失败时将自定义失败信息一同打印出来。任何在 "),a("code",[t._v("assert!")]),t._v(" 的一个必需参数和 "),a("code",[t._v("assert_eq!")]),t._v(" 和 "),a("code",[t._v("assert_ne!")]),t._v(" 的两个必需参数之后指定的参数都会传递给 "),a("code",[t._v("format!")]),t._v(" 宏（在第八章的 "),a("RouterLink",{attrs:{to:"/ch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro"}},[t._v("“使用 "),a("code",[t._v("+")]),t._v(" 运算符或 "),a("code",[t._v("format!")]),t._v(" 宏拼接字符串”")]),t._v(" 部分讨论过），所以可以传递一个包含 "),a("code",[t._v("{}")]),t._v(" 占位符的格式字符串和需要放入占位符的值。自定义信息有助于记录断言的意义；当测试失败时就能更好的理解代码出了什么问题。")],1),t._v(" "),a("p",[t._v("例如，比如说有一个根据人名进行问候的函数，而我们希望测试将传递给函数的人名显示在输出中：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("greeting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("format!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello {}!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("greeting_contains_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greeting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Carol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Carol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个程序的需求还没有被确定，因此问候文本开头的 "),a("code",[t._v("Hello")]),t._v(" 文本很可能会改变。然而我们并不想在需求改变时不得不更新测试，所以相比检查 "),a("code",[t._v("greeting")]),t._v(" 函数返回的确切值，我们将仅仅断言输出的文本中包含输入参数。")]),t._v(" "),a("p",[t._v("让我们通过将 "),a("code",[t._v("greeting")]),t._v(" 改为不包含 "),a("code",[t._v("name")]),t._v(" 来在代码中引入一个 bug 来测试失败时是怎样的：")]),t._v(" "),a("div",{staticClass:"language-rust,not_desired_behavior extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# fn main() {}\npub fn greeting(name: &str) -> String {\n    String::from("Hello!")\n}\n')])])]),a("p",[t._v("运行测试会产生：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::greeting_contains_name ... FAILED\n\nfailures:\n\n---- tests::greeting_contains_name stdout ----\nthread 'tests::greeting_contains_name' panicked at 'assertion failed:\nresult.contains(\"Carol\")', src/lib.rs:12:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nfailures:\n    tests::greeting_contains_name\n")])])]),a("p",[t._v("结果仅仅告诉了我们断言失败了和失败的行号。一个更有用的失败信息应该打印出 "),a("code",[t._v("greeting")]),t._v(" 函数的值。让我们为测试函数增加一个自定义失败信息参数：带占位符的格式字符串，以及 "),a("code",[t._v("greeting")]),t._v(" 函数的值：")]),t._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#[test]\nfn greeting_contains_name() {\n    let result = greeting("Carol");\n    assert!(\n        result.contains("Carol"),\n        "Greeting did not contain name, value was `{}`", result\n    );\n}\n')])])]),a("p",[t._v("现在如果再次运行测试，将会看到更有价值的信息：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("---- tests::greeting_contains_name stdout ----\nthread 'tests::greeting_contains_name' panicked at 'Greeting did not\ncontain name, value was `Hello!`', src/lib.rs:12:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n")])])]),a("p",[t._v("可以在测试输出中看到所取得的确切的值，这会帮助我们理解真正发生了什么，而不是期望发生什么。")]),t._v(" "),a("h3",{attrs:{id:"使用-should-panic-检查-panic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-should-panic-检查-panic"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("should_panic")]),t._v(" 检查 panic")]),t._v(" "),a("p",[t._v("除了检查代码是否返回期望的正确的值之外，检查代码是否按照期望处理错误也是很重要的。例如，考虑第九章示例 9-10 创建的 "),a("code",[t._v("Guess")]),t._v(" 类型。其他使用 "),a("code",[t._v("Guess")]),t._v(" 的代码都是基于 "),a("code",[t._v("Guess")]),t._v(" 实例仅有的值范围在 1 到 100 的前提。可以编写一个测试来确保创建一个超出范围的值的 "),a("code",[t._v("Guess")]),t._v(" 实例会 panic。")]),t._v(" "),a("p",[t._v("可以通过对函数增加另一个属性 "),a("code",[t._v("should_panic")]),t._v(" 来实现这些。这个属性在函数中的代码 panic 时会通过，而在其中的代码没有 panic 时失败。")]),t._v(" "),a("p",[t._v("示例 11-8 展示了一个检查 "),a("code",[t._v("Guess::new")]),t._v(" 是否按照我们的期望出错的测试：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("panic!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Guess value must be between 1 and 100, got {}."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            value\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[should_panic]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("greater_than_100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-8：测试会造成 "),a("code",[t._v("panic!")]),t._v(" 的条件")])]),t._v(" "),a("p",[a("code",[t._v("#[should_panic]")]),t._v(" 属性位于 "),a("code",[t._v("#[test]")]),t._v(" 之后，对应的测试函数之前。让我们看看测试通过时它是什么样子：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::greater_than_100 ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("看起来不错！现在在代码中引入 bug，移除 "),a("code",[t._v("new")]),t._v(" 函数在值大于 100 时会 panic 的条件：")]),t._v(" "),a("div",{staticClass:"language-rust,not_desired_behavior extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# fn main() {}\n# pub struct Guess {\n#     value: i32,\n# }\n#\n// --snip--\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1  {\n            panic!("Guess value must be between 1 and 100, got {}.", value);\n        }\n\n        Guess {\n            value\n        }\n    }\n}\n')])])]),a("p",[t._v("如果运行示例 11-8 的测试，它会失败：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::greater_than_100 ... FAILED\n\nfailures:\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("这回并没有得到非常有用的信息，不过一旦我们观察测试函数，会发现它标注了 "),a("code",[t._v("#[should_panic]")]),t._v("。这个错误意味着代码中测试函数 "),a("code",[t._v("Guess::new(200)")]),t._v(" 并没有产生 panic。")]),t._v(" "),a("p",[t._v("然而 "),a("code",[t._v("should_panic")]),t._v(" 测试结果可能会非常含糊不清，因为它只是告诉我们代码并没有产生 panic。"),a("code",[t._v("should_panic")]),t._v(" 甚至在一些不是我们期望的原因而导致 panic 时也会通过。为了使 "),a("code",[t._v("should_panic")]),t._v(" 测试结果更精确，我们可以给 "),a("code",[t._v("should_panic")]),t._v(" 属性增加一个可选的 "),a("code",[t._v("expected")]),t._v(" 参数。测试工具会确保错误信息中包含其提供的文本。例如，考虑示例 11-9 中修改过的 "),a("code",[t._v("Guess")]),t._v("，这里 "),a("code",[t._v("new")]),t._v(" 函数根据其值是过大还或者过小而提供不同的 panic 信息：")]),t._v(" "),a("p",[a("span",{staticClass:"filename"},[t._v("文件名: src/lib.rs")])]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("panic!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Guess value must be greater than or equal to 1, got {}."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("panic!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Guess value must be less than or equal to 100, got {}."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            value\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[should_panic(expected = "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Guess value must be less than or equal to 100"')]),t._v(")]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("greater_than_100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("span",{staticClass:"caption"},[t._v("示例 11-9：一个会带有特定错误信息的 "),a("code",[t._v("panic!")]),t._v(" 条件的测试")])]),t._v(" "),a("p",[t._v("这个测试会通过，因为 "),a("code",[t._v("should_panic")]),t._v(" 属性中 "),a("code",[t._v("expected")]),t._v(" 参数提供的值是 "),a("code",[t._v("Guess::new")]),t._v(" 函数 panic 信息的子串。我们可以指定期望的整个 panic 信息，在这个例子中是 "),a("code",[t._v("Guess value must be less than or equal to 100, got 200.")]),t._v(" 。 "),a("code",[t._v("expected")]),t._v(" 信息的选择取决于 panic 信息有多独特或动态，和你希望测试有多准确。在这个例子中，错误信息的子字符串足以确保函数在 "),a("code",[t._v("else if value > 100")]),t._v(" 的情况下运行。")]),t._v(" "),a("p",[t._v("为了观察带有 "),a("code",[t._v("expected")]),t._v(" 信息的 "),a("code",[t._v("should_panic")]),t._v(" 测试失败时会发生什么，让我们再次引入一个 bug，将 "),a("code",[t._v("if value < 1")]),t._v(" 和 "),a("code",[t._v("else if value > 100")]),t._v(" 的代码块对换：")]),t._v(" "),a("div",{staticClass:"language-rust,ignore,not_desired_behavior extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if value < 1 {\n    panic!("Guess value must be less than or equal to 100, got {}.", value);\n} else if value > 100 {\n    panic!("Guess value must be greater than or equal to 1, got {}.", value);\n}\n')])])]),a("p",[t._v("这一次运行 "),a("code",[t._v("should_panic")]),t._v(" 测试，它会失败：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("running 1 test\ntest tests::greater_than_100 ... FAILED\n\nfailures:\n\n---- tests::greater_than_100 stdout ----\nthread 'tests::greater_than_100' panicked at 'Guess value must be\ngreater than or equal to 1, got 200.', src/lib.rs:11:13\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nnote: Panic did not include expected string 'Guess value must be less than or\nequal to 100'\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n")])])]),a("p",[t._v("失败信息表明测试确实如期望 panic 了，不过 panic 信息中并没有包含 "),a("code",[t._v("expected")]),t._v(" 信息 "),a("code",[t._v("'Guess value must be less than or equal to 100'")]),t._v("。而我们得到的 panic 信息是 "),a("code",[t._v("'Guess value must be greater than or equal to 1, got 200.'")]),t._v("。这样就可以开始寻找 bug 在哪了！")]),t._v(" "),a("h3",{attrs:{id:"将-result-t-e-用于测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-result-t-e-用于测试"}},[t._v("#")]),t._v(" 将 "),a("code",[t._v("Result<T, E>")]),t._v(" 用于测试")]),t._v(" "),a("p",[t._v("目前为止，我们编写的测试在失败时就会 panic。也可以使用 "),a("code",[t._v("Result<T, E>")]),t._v(" 编写测试！这里是第一个例子采用了 Result：")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("it_works")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two plus two does not equal four"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("现在 "),a("code",[t._v("it_works")]),t._v(" 函数的返回值类型为 "),a("code",[t._v("Result<(), String>")]),t._v("。在函数体中，不同于调用 "),a("code",[t._v("assert_eq!")]),t._v(" 宏，而是在测试通过时返回 "),a("code",[t._v("Ok(())")]),t._v("，在测试失败时返回带有 "),a("code",[t._v("String")]),t._v(" 的 "),a("code",[t._v("Err")]),t._v("。")]),t._v(" "),a("p",[t._v("这样编写测试来返回 "),a("code",[t._v("Result<T, E>")]),t._v(" 就可以在函数体中使用问号运算符，如此可以方便的编写任何运算符会返回 "),a("code",[t._v("Err")]),t._v(" 成员的测试。")]),t._v(" "),a("p",[t._v("不能对这些使用  "),a("code",[t._v("Result<T, E>")]),t._v(" 的测试使用 "),a("code",[t._v("#[should_panic]")]),t._v(" 注解。相反应该在测试失败时直接返回 "),a("code",[t._v("Err")]),t._v(" 值。")]),t._v(" "),a("p",[t._v("现在你知道了几种编写测试的方法，让我们看看运行测试时会发生什么，和可以用于 "),a("code",[t._v("cargo test")]),t._v(" 的不同选项。")])])}),[],!1,null,null,null);s.default=e.exports}}]);